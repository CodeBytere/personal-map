(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var main = require('./main.js');
var modalJS = require('./modal.js');
var airtable = require('airtable');

/******* GETTERS *******/

API_KEY = 'keyK7dq5zUfQPWqlO';
BASE_KEY = 'app2K7DEbfK3K8itR';
BASE_NAME = 'map-test';

var base = new airtable({
  apiKey: API_KEY
}).base(BASE_KEY);

//gets locations and places them appropriately in the sidebar
var getLocations = function() {
  clearSidebarLocations();

  base(BASE_NAME).select({
    view: "Main View"
  }).eachPage(function page(records, fetchNextPage) {
    records.forEach(function(record) {
      var output_id = record.fields.type + "_locs";

      var html = '<button id="' + record.id + '" class="edit_modal_button">' + record.fields.title + '</button><br><button class="delete_modal_button ' + record.id + '"><i class="fa fa-trash-o fa-2x"></i></button>';

      var container = document.createElement('div');
      container.className = "loc_entry";
      container.innerHTML = html;

      var output = document.getElementById(output_id);
      output.appendChild(container);

      var delete_button =  document.getElementsByClassName('' + record.id)[0];
      delete_button.onclick = function () {
        deleteMarker(record.id)
      };

      var edit_button = document.getElementById(record.id);
      edit_button.onclick = function () {
        editMarker(record)
      };
    });

    fetchNextPage();

  }, function done(error) {
    if (error) {
      console.log(error);
    }
  });
}

//gets markers from Airtable base and places them on the map
var getMarkers = function (){
  base(BASE_NAME).select({
    view: "Main View"
  }).eachPage(function page(records, fetchNextPage) {
    main.placeMarkers(records);
    fetchNextPage();

  }, function done(error) {
    if (error) {
      console.log(error);
    }
  });
}

/******* SETTERS *******/

//adds a marker through the modal
var addMarker = function () {

  var form_middle = "<form class='loc_form'> \
    <input type='text' name='title' class='new_loc_input' placeholder='Title'> <br>\
    <input type='text' name='address' class='new_loc_input' placeholder='Address'> <br>\
    <input type='text' name='link' class='new_loc_input' placeholder='Link'> <br>\
    <select name='type' class='new_loc_select'> \
      <option value='key_location'>Key Location</option> \
      <option value='coffee'>Coffee</option> \
      <option value='restaurant'>Restaurant</option> \
      <option value='nightlife'>Nightlife</option> \
      <option value='landmark'>Landmark</option> \
    </select> \
    </form>";

  modalJS.modal.show({
    top: 'Add Location',
    middle: form_middle,
    confirm: {
      text: 'Add',
      click: function () {
        marker = $('form').serializeArray().reduce(function(obj, item) {
          obj[item.name] = item.value;
          return obj;
        }, {});
        placeMarker(marker);
      }
    }
  });
};

//displays modal to edit a marker's values
var editMarker = function(record) {

  var link = function(link_val) {
    if (link_val == null)
      return "placeholder='Enter a link'";
    else
      return "value='" + record.fields.link + "'";
  }

  var form_middle = "<form class='loc_form'> \
    <input type='text' name='title' class='new_loc_input' value='" + record.fields.title + "'> <br>\
    <input type='text' name='address' class='new_loc_input' value='" + record.fields.address + "'> <br>\
    <input type='text' name='link' class='new_loc_input'" + link(record.fields.link) + "> <br>\
    <select name='type' class='new_loc_select'> \
      <option value='key_location'>Key Location</option> \
      <option value='coffee'>Coffee</option> \
      <option value='restaurant'>Restaurant</option> \
      <option value='nightlife'>Nightlife</option> \
      <option value='landmark'>Landmark</option> \
    </select> \
    </form>";

  modalJS.modal.show({
    top: 'Edit Location',
    middle: form_middle,
    confirm: {
      text: 'Save',
      click: function () {
        marker = $('form').serializeArray().reduce(function (obj, item) {
          obj[item.name] = item.value;
          return obj;
        }, {});
        updateMarker(record, marker);
      }
    }
  });
};

//performs call to update marker info in the db
var updateMarker = function(record, fields) {

  fields.lat = record.fields.lat;
  fields.lng = record.fields.lng;

  base(BASE_NAME).replace(record.id, fields, function(err, record) {
    if (err) {
      console.log(err); return;
    }
    console.log("successfully updated record");
    getLocations();
    getMarkers();
  });
}

//removes a marker from the database
var deleteMarker = function(id) {
  base(BASE_NAME).destroy(id, function(err, deletedRecord) {
    if (err) {
      console.log(err);
      return;
    }
    console.log('successfully deleted record');
    getLocations();
    getMarkers();
  });
}

//places a new marker on the map with given and calculated data
var placeMarker = function(record) {

  //uses geocoder to get the latitude and longitude
  function encodeAddress() {
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({'address' : record.address}, function (results, status) {
      if (status === google.maps.GeocoderStatus.OK) {
        setData(results[0].geometry.location);
      } else {
        alert("Google Maps had some trouble finding" + address + status);
      }
    });
   }
  encodeAddress();

  //sets the field information and executes POST request to the airtable api
  function setData(lat_lng){
    var new_record = {
      title: record.title,
      address: record.address,
      lat: JSON.stringify(lat_lng.lat()),
      lng: JSON.stringify(lat_lng.lng()),
      link: record.link,
      type: record.type
    };

    base(BASE_NAME).create(new_record, function(err, record) {
      if (err) {
        console.log(err);
        return;
      }
      console.log("successfully created new record");
      getMarkers();
      getLocations();
    });
  }
};

/******** HELPERS ********/

//clears the sidebar of locations when a new one is added
var clearSidebarLocations = function(){
  var loc_types = ['key_location_locs','coffee_locs','restaurant_locs', 'nightlife_locs','landmark_locs'];

  loc_types.forEach(function (loc_type) {
    document.getElementById(loc_type).innerHTML = "";
  });
}

module.exports = {
  getLocations: getLocations,
  getMarkers: getMarkers,
  addMarker: addMarker,
  editMarker: editMarker,
  placeMarker: placeMarker,
};



},{"./main.js":2,"./modal.js":3,"airtable":4}],2:[function(require,module,exports){
var crud = require('./crud.js');
var modal = require('./modal.js');
var $ = require("jquery");
var fontawesome = require('fontawesome-markers');

var map;
var infoWindow;
var infoWindows = [];

//initialize and populate the map
$(document).ready(function() {
  var mapOptions = {
    "center": {
      "lat": 40.759976,
      "lng": -73.9799772
    }
    , "clickableIcons": true
    , "disableDoubleClickZoom": false
    , "draggable": true
    , "fullscreenControl": true
    , "keyboardShortcuts": true
    , "mapMaker": false
    , "mapTypeControl": true
    , "mapTypeControlOptions": {
      "text": "Default (depends on viewport size etc.)"
      , "style": 0
    }
    , "mapTypeId": "roadmap"
    , "rotateControl": true
    , "scaleControl": true
    , "scrollwheel": true
    , "streetViewControl": true
    , "styles": [{
      "featureType": "landscape.man_made"
      , "elementType": "geometry"
      , "stylers": [{
        "color": "#f7f1df"
      }]
    }, {
      "featureType": "landscape.natural"
      , "elementType": "geometry"
      , "stylers": [{
        "color": "#d0e3b4"
      }]
    }, {
      "featureType": "landscape.natural.terrain"
      , "elementType": "geometry"
      , "stylers": [{
        "visibility": "on"
      }]
    }, {
      "featureType": "poi"
      , "elementType": "labels"
      , "stylers": [{
        "visibility": "on"
      }]
    }, {
      "featureType": "poi.business"
      , "elementType": "all"
      , "stylers": [{
        "visibility": "on"
      }]
    }, {
      "featureType": "poi.medical"
      , "elementType": "geometry"
      , "stylers": [{
        "color": "#fbd3da"
      }]
    }, {
      "featureType": "poi.park"
      , "elementType": "geometry"
      , "stylers": [{
        "color": "#bde6ab"
      }]
    }, {
      "featureType": "road"
      , "elementType": "geometry.stroke"
      , "stylers": [{
        "visibility": "on"
      }]
    }, {
      "featureType": "road"
      , "elementType": "labels"
      , "stylers": [{
        "visibility": "on"
      }]
    }, {
      "featureType": "road.highway"
      , "elementType": "geometry.fill"
      , "stylers": [{
        "color": "#ffe15f"
      }]
    }, {
      "featureType": "road.highway"
      , "elementType": "geometry.stroke"
      , "stylers": [{
        "color": "#efd151"
      }]
    }, {
      "featureType": "road.arterial"
      , "elementType": "geometry.fill"
      , "stylers": [{
        "color": "#ffffff"
      }]
    }, {
      "featureType": "road.local"
      , "elementType": "geometry.fill"
      , "stylers": [{
        "color": "black"
      }]
    }, {
      "featureType": "transit.station.airport"
      , "elementType": "geometry.fill"
      , "stylers": [{
        "color": "#cfb2db"
      }]
    }, {
      "featureType": "water"
      , "elementType": "geometry"
      , "stylers": [{
        "color": "#a2daf2"
      }]
    }]
    , "zoom": 14
    , "zoomControl": true
  };
  var mapElement = document.getElementById('map');
  map = new google.maps.Map(mapElement, mapOptions);

  google.maps.event.addDomListener(window, "resize", function () {
    var center = map.getCenter();
    google.maps.event.trigger(map, "resize");
    map.setCenter(center);
  });

  //close infowindows when the map is clicked
  google.maps.event.addListener(map, "click", function(event) {
    closeInfoWindows();
  });

  //add markers to both the map and the sidebar
  crud.getMarkers();
  crud.getLocations();

  addSearchBox();

  var btn = document.getElementById("mod_btn");
  btn.addEventListener("click", function(){
    crud.addMarker();
  });
});

//returns the custom map icon for each type of location
function custom_icons(type){
  var path, fillColor;

  if (type === "key_location") {
    path = fontawesome.KEY;
    fillColor = 'blue';
  }
  else if (type === "restaurant") {
    path = fontawesome.CUTLERY;
    fillColor = 'purple';
  }
  else if (type === "coffee") {
    path = fontawesome.COFFEE;
    fillColor = 'saddlebrown';
  }
  else if (type === "landmark") {
    path = fontawesome.BUILDING;
    fillColor = 'darkblue';
  }
  else if (type === "nightlife") {
    path = fontawesome.GLASS;
    fillColor = 'forestgreen';
  }

  var icon = {
    path: path,
    scale: 0.35,
    strokeWeight: 0.6,
    strokeColor: 'black',
    strokeOpacity: 1,
    fillColor: fillColor,
    fillOpacity: 1,
  }

  return icon;
}

//places markers on the map
function placeMarkers(info_markers) {
  $.each(info_markers, function (key, data) {
    data = data.fields;
    var lat_lng = new google.maps.LatLng(data.lat, data.lng);

    var marker = new google.maps.Marker({
      map: map,
      position: lat_lng,
      icon: custom_icons(data.type),
      address: data.address,
      title: data.title,
      labelClass: "mark"
    });

    var details;
    if (data.link) {
      details = "<strong>" + data.title + "</strong> <br>" + " <br>" +  data.address + "<br>" + " <br> <a href="+data.link+" target='_blank'>Website</a>";
    } else {
      details = "<strong>" + data.title + "</strong> <br>" + " <br>" +  data.address;
    }

    infowindow = new google.maps.InfoWindow()
    bindInfoWindow(marker, map, infowindow, details);
  });
}

//closes all other infowindows when a new one is placed
function closeInfoWindows() {
  for (i = 0; i < infoWindows.length; i++) {
      infoWindows[i].close();
      infoWindows.splice(i, 1);
  }
}

//binds an info window to each placed marker
function bindInfoWindow(marker, map, infowindow, strDescription){
  google.maps.event.addListener(marker, 'click', function() {
    closeInfoWindows();
    infowindow.setContent(strDescription);
    infoWindows.push(infowindow);
    infowindow.open(map, marker);
  });
}

//adds a search box to the field
function addSearchBox() {
  var input = document.getElementById('search-box');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  map.addListener('bounds_changed', function () {
    searchBox.setBounds(map.getBounds());
  });
  var markers = [];
  searchBox.addListener('places_changed', function () {
    var places = searchBox.getPlaces();
    if (places.length == 0) {
      return;
    }
    markers.forEach(function (marker) {
      marker.setMap(null);
    });
    markers = [];
    var bounds = new google.maps.LatLngBounds();
    places.forEach(function (place) {
      if (!place.geometry) {
        console.log("Returned place contains no geometry");
        return;
      }
      var icon = {
        url: place.icon
        , size: new google.maps.Size(71, 71)
        , origin: new google.maps.Point(0, 0)
        , anchor: new google.maps.Point(17, 34)
        , scaledSize: new google.maps.Size(25, 25)
      };
      markers.push(new google.maps.Marker({
        map: map
        , icon: icon
        , title: place.name
        , position: place.geometry.location
      }));
      if (place.geometry.viewport) {
        bounds.union(place.geometry.viewport);
      }
      else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
  });
}

module.exports.placeMarkers = placeMarkers;


},{"./crud.js":1,"./modal.js":3,"fontawesome-markers":22,"jquery":23}],3:[function(require,module,exports){
Array.prototype.contains = function (el) {
  return this.indexOf(el) > -1;
};
Node.prototype.removeClasses = function (arr) {
  this.className = this.className.split(/\s+/).filter(function (c) {
    return !arr.contains(c) && c.length;
  }).join(' ');
};
Node.prototype.addClass = function (c) {
  this.className += (/\s$/.test(this.className) || !this.className.length ? '' : ' ') + c;
};
var ModalJS = {
    version: '1.1'
    , modal: function (type) {
      var modal = {
        bg: '#modaljs-bg'
        , modals: '#modaljs-modals'
        , modal: '#modaljs-modal'
        , top: '#modaljs-top'
        , topCancel: '#modaljs-top-cancel'
        , middle: '#modaljs-middle'
        , bottom: '#modaljs-bottom'
        , bottomCancel: '#modaljs-bottom-cancel'
        , bottomConfirm: '#modaljs-bottom-confirm'
        , transitionType: '#modaljs-transitionType'
      };
      return ModalJS.sel(modal[type]);
    }
    , modalTypes: [
		'modal'
		, 'success'
		, 'alert'
		, 'warning'
		, 'error'
	]
    , sizeTypes: [
		'small'
		, 'medium'
		, 'big'
	]
    , monoTypes: [
		'mono'
		, 'colored'
	]
    , positionTypes: [
		'stickedToTop'
		, 'top'
		, 'middle'
		, 'bottom'
		, 'stickedToBottom'
	]
    , confirmFn: function () {}
    , isShown: function () {
      return modaljs.modal('modals').style.display != 'none';
    }
    , sel: function (s, b) {
      return b ? document.querySelectorAll(s) : document.querySelector(s);
    }
    , addEvent: function (el, name, func) {
      // addEvent
      var aE = function (el, name, func) {
          if (el.addEventListener) el.addEventListener(name, func, false);
          else if (el.attachEvent) el.attachEvent('on' + name, func);
          else el['on' + name] = func;
        }
        , i;
      switch (typeof el) {
      case 'object':
        if (el instanceof Node) {
          aE(el, name, func);
        }
        else if (el instanceof Array) {
          for (i = el.length - 1; i >= 0; i--) aE(el[i], name, func);
        }
        break;
      default:
        throw new Error('el must be object or instance of an array!');
      }
    }
    , init: function (props) {
      var modalHTML = '<div id="modaljs-modals" style="opacity:0;display:none"><div id="modaljs-bg"></div><div id="modaljs-modal" class="modaljs-normal"><div id="modaljs-top"></div><div id="modaljs-top-cancel"></div><div id="modaljs-middle"></div><div id="modaljs-bottom"><input type="button" id="modaljs-bottom-confirm" value="Ok"></div><input type="hidden" id="modaljs-transitionType"></div></div>';
      document.body.insertAdjacentHTML('beforeend', modalHTML);
      var that = this;
      this.addEvent([
			this.modal('topCancel')
			, this.modal('bg')
		], 'click', function () {
        that.hideModal();
      });
      this.addEvent(this.modal('bottomConfirm'), 'click', function () {
        that.hideModal();
        that.confirmFn();
      });
    }
    , show: function (props) {
      if (arguments.length < 1) throw new Error('ModalJS.show() needs at least one argument!');
      if (typeof props != 'object') throw new Error('Properties must be an object!');
      if (!props.hasOwnProperty('top') || !props.hasOwnProperty('middle')) throw new Error('Properties in ModalJS.show() must include at least "top" and "middle" properties!');
      if (!this.sel('#modaljs-modals', true).length) this.init(props);
      // setting up transitionType hidden input
      this.modal('transitionType').value = props.hasOwnProperty('transition') && ['fast', 'normal', 'slow'].indexOf(props.transition) > -1 ? props.transition : 'fast';
      var getProp = function (o, prop, def) {
        if (typeof def != 'boolean') def = false;
        if (!o.hasOwnProperty(prop)) return def;
        return o[prop];
      };
      var modals = this.modal('modals')
        , confirm = this.modal('bottomConfirm')
        , modalType = getProp(props, 'type', 'modal')
        , monoType = getProp(props, 'mono')
        , isBG = getProp(props, 'background', true)
        , sizeType = getProp(props, 'size', 'small')
        , positionType = getProp(props, 'position', 'middle');
      // setting 'type'
      if (!this.modalTypes.contains(modalType)) modalType = 'modal';
      modals.removeClasses(this.modalTypes);
      modals.addClass(modalType);
      monoType = monoType ? 'mono' : 'colored';
      if (!this.monoTypes.contains(monoType)) monoType = 'colored';
      this.modal('modal').removeClasses(this.monoTypes);
      this.modal('modal').addClass(monoType);
      // setting 'bg'
      this.modal('bg').style.display = this.modal('modal').style.boxShadow = isBG ? '' : 'none';
      // setting 'size'
      if (!this.sizeTypes.contains(sizeType)) sizeType = 'small';
      this.modal('modal').removeClasses(this.sizeTypes);
      this.modal('modal').addClass(sizeType);
      // setting 'position'
      if (!this.positionTypes.contains(positionType)) positionType = 'middle';
      this.modal('modal').removeClasses(this.positionTypes);
      this.modal('modal').addClass(positionType);
      // setting 'confirm'
      confirm.style.display = 'none';
      if (props.hasOwnProperty('confirm') && props.confirm.hasOwnProperty('text') && props.confirm.hasOwnProperty('click')) {
        var text = props.confirm.text
          , click = props.confirm.click
        if (typeof text == 'string' && typeof click == 'function') {
          confirm.style.display = 'inline-block';
          text = text || 'Ok';
          confirm.value = text;
          confirm.focus();
          this.confirmFn = click;
        }
      }
      this.showModal(modals, this.modal('transitionType'));
      var w = window;
      // setting 'background'
      this.modal('top').innerHTML = props.top;
      this.modal('middle').innerHTML = props.middle;
      // setting up modal top position
      this.modal('modal').style.margin = (positionType == 'middle' ? (-(this.modal('modal').offsetHeight / 2) - (props.hasOwnProperty('offsetTop') && typeof props.offsetTop == 'number' ? props.offsetTop : 0)) : '0') + 'px 0 0 ' + (-(this.modal('modal').offsetWidth / 2)) + 'px';
    }
    , showModal: function () {
      if (modaljs.isShown()) throw new Error('You can\'t show an actual shown modal!');
      var modals = this.modal('modals')
        , transitionType = this.modal('transitionType')
        , transitions = {
          fast: 0
          , normal: 300
          , slow: 600
        };
      var transitionsKeys = Object.keys(transitions);
      modals.removeClasses(transitionsKeys);
      modals.addClass(transitionType.value);
      modals.style.display = '';
      setTimeout(function () {
        modals.style.opacity = '1';
      }, transitions[transitionType.value]);
    }
    , hideModal: function () {
      if (!modaljs.isShown()) throw new Error('You can\'t hide an actual hidden modal!');
      var modals = this.modal('modals')
        , transitionType = this.modal('transitionType')
        , transitions = {
          fast: 0
          , normal: 300
          , slow: 600
        };
      modals.style.opacity = '0';
      setTimeout(function () {
        modals.style.display = 'none';
      }, transitions[transitionType.value]);
    }
  }
  , modaljs = ModalJS;

module.exports.modal = modaljs;

},{}],4:[function(require,module,exports){
(function (process){
'use strict';

var assert = require('assert');

var Class = require('./class');
var Base = require('./base');
var Record = require('./record');
var Table = require('./table');

var Airtable = Class.extend({
    init: function(opts) {
        opts = opts || {};

        this._apiKey = opts.apiKey || Airtable.apiKey || Airtable.default_config.apiKey;
        this._endpointUrl = opts.endpointUrl || Airtable.endpointUrl || Airtable.default_config.endpointUrl;
        this._apiVersion = opts.apiVersion || Airtable.apiVersion || Airtable.default_config.apiVersion;
        this._apiVersionMajor = this._apiVersion.split('.')[0];
        this._allowUnauthorizedSsl = opts.allowUnauthorizedSsl || Airtable.allowUnauthorizedSsl || Airtable.default_config.allowUnauthorizedSsl;
        this._noRetryIfRateLimited = opts.noRetryIfRateLimited || Airtable.noRetryIfRateLimited || Airtable.default_config.noRetryIfRateLimited;

        assert(this._apiKey, 'API key is required to connect to Airtable');
    },

    base: function(baseId) {
        return Base.createFunctor(this, baseId);
    }
});

Airtable.default_config = {
    endpointUrl: process.env.AIRTABLE_ENDPOINT_URL || 'https://api.airtable.com',
    apiVersion: '0.1.0',
    apiKey: process.env.AIRTABLE_API_KEY,
    allowUnauthorizedSsl: false,
    noRetryIfRateLimited: false
};

Airtable.configure = function(opts) {
    Airtable.apiKey = opts.apiKey;
    Airtable.endpointUrl = opts.endpointUrl;
    Airtable.apiVersion = opts.apiVersion;
    Airtable.allowUnauthorizedSsl = opts.allowUnauthorizedSsl;
    Airtable.noRetryIfRateLimited = opts.noRetryIfRateLimited;
};

Airtable.base = function(baseId) {
    return new Airtable().base(baseId);
};

Airtable.Base = Base;
Airtable.Record = Record;
Airtable.Table = Table;

module.exports = Airtable;

}).call(this,require('_process'))

},{"./base":6,"./class":7,"./record":11,"./table":13,"_process":19,"assert":17}],5:[function(require,module,exports){
'use strict';

var Class = require('./class');

var AirtableError = Class.extend({
    init: function(error, message, statusCode) {
        this.error = error;
        this.message = message;
        this.statusCode = statusCode;
    },
    toString: function() {
        return [
            this.message,
            '(', this.error, ')',
            this.statusCode ?  '[Http code ' + this.statusCode + ']' : ''
        ].join('');
    }
});

module.exports = AirtableError;

},{"./class":7}],6:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var internalConfig = require('./internal_config');
var Class = require('./class');
var AirtableError = require('./airtable_error');
var Table = require('./table');
var runAction = require('./run_action');

var Base = Class.extend({
    init: function(airtable, baseId) {
        this._airtable = airtable;
        this._id = baseId;
    },

    table: function(tableName) {
        return new Table(this, null, tableName);
    },

    runAction: function(method, path, queryParams, bodyData, callback) {
        runAction(this, method, path, queryParams, bodyData, callback);
    },

    _checkStatusForError: function(statusCode, body) {
        if (statusCode === 401) {
            return new AirtableError('AUTHENTICATION_REQUIRED', 'You should provide valid api key to perform this operation', statusCode);
        } else if (statusCode === 403) {
            return new AirtableError('NOT_AUTHORIZED', 'You are not authorized to perform this operation', statusCode);
        } else if (statusCode === 404) {
            return (function(){
                var message = (body && body.error && body.error.message) ? body.error.message : 'Could not find what you are looking for';
                return new AirtableError('NOT_FOUND', message, statusCode);
            })();
        } else if (statusCode === 413) {
            return new AirtableError('REQUEST_TOO_LARGE', 'Request body is too large', statusCode);
        } else if (statusCode === 422) {
            return new AirtableError(body.error.type, body.error.message, statusCode);
        } else if (statusCode === 429) {
            return new AirtableError('TOO_MANY_REQUESTS', 'You have made too many requests in a short period of time. Please retry your request later', statusCode);
        }else if (statusCode === 500) {
            return new AirtableError('SERVER_ERROR', 'Try again. If the problem persists, contact support.', statusCode);
        } else if (statusCode === 503) {
            return new AirtableError('SERVICE_UNAVAILABLE', 'The service is temporarily unavailable. Please retry shortly.', statusCode);
        }
    },

    doCall: function(tableName) {
        return this.table(tableName);
    },

    getId: function() {
        return this._id;
    }
});

Base.createFunctor = function(airtable, baseId) {
    var base = new Base(airtable, baseId);
    var baseFn = function() {
        return base.doCall.apply(base, arguments);
    };
    _.each(['table', 'runAction', 'getId'], function(baseMethod) {
        baseFn[baseMethod] = base[baseMethod].bind(base);
    });
    baseFn._base = base;
    baseFn.tables = base.tables;
    return baseFn;
};

module.exports = Base;

},{"./airtable_error":5,"./class":7,"./internal_config":9,"./run_action":12,"./table":13,"lodash":16}],7:[function(require,module,exports){
/*jshint strict:false */

/* Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 */
// Inspired by base2 and Prototype
// http://ejohn.org/blog/simple-javascript-inheritance/
(function(){
    var initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;

    // The base Class implementation (does nothing)
    var Class = function(){};

    // Create a new Class that inherits from this class
    Class.extend = function extender(prop) {
        var _super = this.prototype;

        // Instantiate a base class (but only create the instance,
        // don't run the init constructor)
        initializing = true;
        var prototype = new this();
        initializing = false;

        // Copy the properties over onto the new prototype
        for (var name in prop) {
            // Check if we're overwriting an existing function
            prototype[name] = typeof prop[name] == "function" &&
                typeof _super[name] == "function" && fnTest.test(prop[name]) ?
                (function(name, fn){
                    return function() {
                        var tmp = this._super;

                        // Add a new ._super() method that is the same method
                        // but on the super-class
                        this._super = _super[name];

                        // The method only need to be bound temporarily, so we
                        // remove it when we're done executing
                        var ret = fn.apply(this, arguments);
                        this._super = tmp;

                        return ret;
                    };
                })(name, prop[name]) :
            prop[name];
        }

        // The dummy class constructor
        function Class() {
            // All construction is actually done in the init method
            if ( !initializing && this.init )
                this.init.apply(this, arguments);
        }

        // Populate our constructed prototype object
        Class.prototype = prototype;

        // Enforce the constructor to be what we expect
        Class.prototype.constructor = Class;

        // And make this class extendable
        Class.extend = extender;

        return Class;
    };

    if (typeof exports !== 'undefined') {
        module.exports = Class;
    } else {
        window.Class = Class;
    }
})();

},{}],8:[function(require,module,exports){
'use strict';

var didWarnForDeprecation = {};

/**
 * Convenience function for marking a function as deprecated.
 *
 * Will emit a warning the first time that function is called.
 *
 * @param fn the function to mark as deprecated.
 * @param key a unique key identifying the function.
 * @param message the warning message.
 *
 * @return a wrapped function
 */
function deprecate(fn, key, message) {
    return function() {
        if (!didWarnForDeprecation[key]) {
            didWarnForDeprecation[key] = true;
            console.warn(message);
        }
        fn.apply(this, arguments);
    };
}

module.exports = deprecate;


},{}],9:[function(require,module,exports){
module.exports={
    "RETRY_DELAY_IF_RATE_LIMITED": 5000,
    "REQUEST_TIMEOUT": 30000
}
},{}],10:[function(require,module,exports){
'use strict';

var assert = require('assert');
var _ = require('lodash');

var check = require('./typecheck');
var Class = require('./class');
var Record = require('./record');

var Query = Class.extend({
    /**
     * Builds a query object. Won't fetch until `firstPage` or
     * or `eachPage` is called.
     */
    init: function(table, params) {
        assert(_.isPlainObject(params));
        _.each(params, function(value, key) {
            assert(Query.paramValidators[key] && Query.paramValidators[key](value).pass, 'Invalid parameter for Query: ' + key);
        });

        this._table = table;
        this._params = params;
    },

    /**
     * Fetches the first page of results for the query asynchronously,
     * then calls `done(error, records)`.
     */
    firstPage: function(done) {
        assert(_.isFunction(done),
            'The first parameter to `firstPage` must be a function');

        this.eachPage(function(records, fetchNextPage) {
            done(null, records);
        }, function(error) {
            done(error, null);
        });
    },

    /**
     * Fetches each page of results for the query asynchronously.
     *
     * Calls `pageCallback(records, fetchNextPage)` for each
     * page. You must call `fetchNextPage()` to fetch the next page of
     * results.
     *
     * After fetching all pages, or if there's an error, calls
     * `done(error)`.
     */
    eachPage: function(pageCallback, done) {
        assert(_.isFunction(pageCallback),
            'The first parameter to `eachPage` must be a function');

        assert(_.isFunction(done) || _.isUndefined(done),
            'The second parameter to `eachPage` must be a function or undefined');

        var that = this;
        var path = '/' + this._table._urlEncodedNameOrId();
        var params = _.clone(this._params);

        var inner = function() {
            that._table._base.runAction('get', path, params, {}, function(err, response, result) {
                if (err) {
                    done(err, null);
                } else {
                    var next;
                    if (result.offset) {
                        params.offset = result.offset;
                        next = inner;
                    } else {
                        next = function() {
                            if (done) {
                                done(null);
                            }
                        };
                    }

                    var records = _.map(result.records, function(recordJson) {
                        return new Record(that._table, null, recordJson);
                    });

                    pageCallback(records, next);
                }
            });
        };

        inner();
    },
});

Query.paramValidators = {
    fields:
        check(check.isArrayOf(_.isString), 'the value for `fields` should be an array of strings'),

    filterByFormula:
        check(_.isString, 'the value for `filterByFormula` should be a string'),

    maxRecords:
        check(_.isNumber, 'the value for `maxRecords` should be a number'),

    pageSize:
        check(_.isNumber, 'the value for `pageSize` should be a number'),

    sort:
        check(check.isArrayOf(function(obj) {
            return (
                _.isPlainObject(obj) &&
                _.isString(obj.field) &&
                (_.isUndefined(obj.direction) || _.contains(['asc', 'desc'], obj.direction))
            );
        }), 'the value for `sort` should be an array of sort objects. ' +
            'Each sort object must have a string `field` value, and an optional ' +
            '`direction` value that is "asc" or "desc".'
        ),

    view:
        check(_.isString, 'the value for `view` should be a string'),
};

/**
 * Validates the parameters for passing to the Query constructor.
 *
 * @return an object with two keys:
 *  validParams: the object that should be passed to the constructor.
 *  ignoredKeys: a list of keys that will be ignored.
 *  errors: a list of error messages.
 */
Query.validateParams = function validateParams(params) {
    assert(_.isPlainObject(params));

    var validParams = {};
    var ignoredKeys = [];
    var errors = [];
    _.each(params, function(value, key) {
        if (Query.paramValidators.hasOwnProperty(key)) {
            var validator = Query.paramValidators[key];
            var validationResult = validator(value);
            if (validationResult.pass) {
                validParams[key] = value;
            } else {
                errors.push(validationResult.error);
            }
        } else {
            ignoredKeys.push(key);
        }
    });

    return {
        validParams: validParams,
        ignoredKeys: ignoredKeys,
        errors: errors,
    };
};

module.exports = Query;

},{"./class":7,"./record":11,"./typecheck":14,"assert":17,"lodash":16}],11:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var Class = require('./class');

var Record = Class.extend({
    init: function(table, recordId, recordJson) {
        this._table = table;
        this.id = recordId || recordJson.id;
        this.setRawJson(recordJson);
        this.updateFields = this.patchUpdate;
        this.replaceFields = this.putUpdate;
    },
    getId: function() {
        return this.id;
    },
    get: function(columnName) {
        return this.fields[columnName];
    },
    set: function(columnName, columnValue) {
        this.fields[columnName] = columnValue;
    },
    save: function(done) {
        this.putUpdate(this.fields, done);
    },
    patchUpdate: function(cellValuesByName, opts, done) {
        var that = this;
        if (!done) {
            done = opts;
            opts = {};
        }
        var updateBody = _.extend({
            fields: cellValuesByName
        }, opts);

        this._table._base.runAction('patch', '/' + this._table._urlEncodedNameOrId() + '/' + this.id, {}, updateBody, function(err, response, results) {
            if (err) { done(err); return; }

            that.setRawJson(results);
            done(null, that);
        });
    },
    putUpdate: function(cellValuesByName, opts, done) {
        var that = this;
        if (!done) {
            done = opts;
            opts = {};
        }
        var updateBody = _.extend({
            fields: cellValuesByName
        }, opts);
        this._table._base.runAction('put', '/' + this._table._urlEncodedNameOrId() + '/' + this.id, {}, updateBody, function(err, response, results) {
            if (err) { done(err); return; }

            that.setRawJson(results);
            done(null, that);
        });
    },
    destroy: function(done) {
        var that = this;
        this._table._base.runAction('delete', '/' + this._table._urlEncodedNameOrId() + '/' + this.id, {}, {}, function(err, response, results) {
            if (err) { done(err); return; }

            done(null, that);
        });
    },

    fetch: function(done) {
        var that = this;
        this._table._base.runAction('get', '/' + this._table._urlEncodedNameOrId() + '/' + this.id, {}, {}, function(err, response, results) {
            if (err) { done(err); return; }

            that.setRawJson(results);
            done(null, that);
        });
    },
    setRawJson: function(rawJson) {
        this._rawJson = rawJson;
        this.fields = (this._rawJson && this._rawJson.fields) || {};
    }
});

module.exports = Record;

},{"./class":7,"lodash":16}],12:[function(require,module,exports){
/*globals jQuery */
'use strict';

var internalConfig = require('./internal_config');

function runActionWithJQuery(base, method, path, queryParams, bodyData, callback) {
    queryParams.forceInsecureCrossDomain = 'ALLOW_ANY_DOMAIN';

    var url = base._airtable._endpointUrl+'/v' + base._airtable._apiVersionMajor + '/' + base._id + path + '?' + jQuery.param(queryParams);

    jQuery.ajax(url, {
        contentType: 'application/json',
        type: method,

        data: JSON.stringify(bodyData),
        processData: false,
        dataType: 'json',
        timeout: internalConfig.REQUEST_TIMEOUT,

        headers: {
            'Authorization': 'Bearer ' + base._airtable._apiKey,
            'x-api-version': base._airtable._apiVersion,
            'x-airtable-application-id': base.getId(),
        },
        success: function(data, textStatus, jqXHR) {
            callback(null, null, data);
        },
        error: function(jqXHR, textStatus) {
            var error;
            if (jqXHR.status === 429 && !base._airtable._noRetryIfRateLimited) {
                setTimeout(function() {
                    runActionWithJQuery(base, method, path, queryParams, bodyData, callback);
                }, internalConfig.RETRY_DELAY_IF_RATE_LIMITED);
                return;
            }
            error = base._checkStatusForError(jqXHR.status, jqXHR.responseJSON);
            callback(error);
        }
    });
}

module.exports = runActionWithJQuery;

},{"./internal_config":9}],13:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var assert = require('assert');
var async = require('async');

var AirtableError = require('./airtable_error');
var Class = require('./class');
var deprecate = require('./deprecate');
var Query = require('./query');
var Record = require('./record');

var Table = Class.extend({
    init: function(base, tableId, tableName) {
        this._base = base;
        assert(tableId || tableName, 'Table name or table ID is required');
        this.id = tableId;
        this.name = tableName;

        // Public API
        this.find = this._findRecordById.bind(this);
        this.select = this._selectRecords.bind(this);
        this.create = this._createRecord.bind(this);
        this.update = this._updateRecord.bind(this);
        this.destroy = this._destroyRecord.bind(this);
        this.replace = this._replaceRecord.bind(this);

        // Deprecated API
        this.list = deprecate(this._listRecords.bind(this),
            'table.list',
            'Airtable: `list()` is deprecated. Use `select()` instead.');
        this.forEach = deprecate(this._forEachRecord.bind(this),
            'table.forEach',
            'Airtable: `forEach()` is deprecated. Use `select()` instead.');
    },
    _findRecordById: function(recordId, done) {
        var record = new Record(this, recordId);
        record.fetch(done);
    },
    _selectRecords: function(params) {
        if (_.isUndefined(params)) {
            params = {};
        }

        if (arguments.length > 1) {
            console.warn('Airtable: `select` takes only one parameter, but it was given ' +
                arguments.length + ' parameters. ' +
                'Use `eachPage` or `firstPage` to fetch records.');
        }

        if (_.isPlainObject(params)) {
            var validationResults = Query.validateParams(params);

            if (validationResults.errors.length) {
                var formattedErrors = validationResults.errors.map(function(error) {
                    return '  * ' + error;
                });

                assert(false, 'Airtable: invalid parameters for `select`:\n' +
                    formattedErrors.join('\n'));
            }

            if (validationResults.ignoredKeys.length) {
                console.warn('Airtable: the following parameters to `select` will be ignored: ' +
                    validationResults.ignoredKeys.join(', '));
            }

            return new Query(this, validationResults.validParams);
        } else {
            assert(false, 'Airtable: the parameter for `select` should be a plain object or undefined.');
        }
    },
    _urlEncodedNameOrId: function(){
        return this.id || encodeURIComponent(this.name);
    },
    _createRecord: function(recordData, optionalParameters, done) {
        var that = this;
        if (!done) {
            done = optionalParameters;
            optionalParameters = {};
        }
        var requestData = _.extend({fields: recordData}, optionalParameters);
        this._base.runAction('post', '/' + that._urlEncodedNameOrId() + '/', {}, requestData, function(err, resp, body) {
            if (err) { done(err); return; }

            var record = new Record(that, body.id, body);
            done(null, record);
        });
    },
    _updateRecord: function(recordId, recordData, opts, done) {
        var record = new Record(this, recordId);
        record.patchUpdate(recordData, opts, done);
    },
    _replaceRecord: function(recordId, recordData, opts, done) {
        var record = new Record(this, recordId);
        record.putUpdate(recordData, opts, done);
    },
    _destroyRecord: function(recordId, done) {
        var record = new Record(this, recordId);
        record.destroy(done);
    },
    _listRecords: function(limit, offset, opts, done) {
        var that = this;

        if (!done) {
            done = opts;
            opts = {};
        }
        var listRecordsParameters = _.extend({
            limit: limit, offset: offset
        }, opts);

        async.waterfall([
            function(next) {
                that._base.runAction('get', '/' + that._urlEncodedNameOrId() + '/', listRecordsParameters, {}, next);
            },
            function(response, results, next) {
                var records = _.map(results.records, function(recordJson) {
                    return new Record(that, null, recordJson);
                });
                next(null, records, results.offset);
            }
        ], done);
    },
    _forEachRecord: function(opts, callback, done) {
        if (arguments.length === 2) {
            done = callback;
            callback = opts;
            opts = {};
        }
        var that = this;
        var limit = Table.__recordsPerPageForIteration || 100;
        var offset = null;

        var nextPage = function() {
            that._listRecords(limit, offset, opts, function(err, page, newOffset) {
                if (err) { done(err); return; }

                _.each(page, callback);

                if (newOffset) {
                    offset = newOffset;
                    nextPage();
                } else {
                    done();
                }
            });
        };
        nextPage();
    }
});

module.exports = Table;

},{"./airtable_error":5,"./class":7,"./deprecate":8,"./query":10,"./record":11,"assert":17,"async":15,"lodash":16}],14:[function(require,module,exports){
'use strict';

var _ = require('lodash');

function check(fn, error) {
    return function(value) {
        if (fn(value)) {
            return {pass: true};
        } else {
            return {pass: false, error: error};
        }
    };
}

check.isOneOf = function isOneOf(options) {
    return _.contains.bind(this, options);
};

check.isArrayOf = function(itemValidator) {
    return function(value) {
        return _.isArray(value) && _.every(value, itemValidator);
    };
};

module.exports = check;

},{"lodash":16}],15:[function(require,module,exports){
(function (process,global){
/*!
 * async
 * https://github.com/caolan/async
 *
 * Copyright 2010-2014 Caolan McMahon
 * Released under the MIT license
 */
(function () {

    var async = {};
    function noop() {}
    function identity(v) {
        return v;
    }
    function toBool(v) {
        return !!v;
    }
    function notId(v) {
        return !v;
    }

    // global on the server, window in the browser
    var previous_async;

    // Establish the root object, `window` (`self`) in the browser, `global`
    // on the server, or `this` in some virtual machines. We use `self`
    // instead of `window` for `WebWorker` support.
    var root = typeof self === 'object' && self.self === self && self ||
            typeof global === 'object' && global.global === global && global ||
            this;

    if (root != null) {
        previous_async = root.async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    function only_once(fn) {
        return function() {
            if (fn === null) throw new Error("Callback was already called.");
            fn.apply(this, arguments);
            fn = null;
        };
    }

    function _once(fn) {
        return function() {
            if (fn === null) return;
            fn.apply(this, arguments);
            fn = null;
        };
    }

    //// cross-browser compatiblity functions ////

    var _toString = Object.prototype.toString;

    var _isArray = Array.isArray || function (obj) {
        return _toString.call(obj) === '[object Array]';
    };

    // Ported from underscore.js isObject
    var _isObject = function(obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
    };

    function _isArrayLike(arr) {
        return _isArray(arr) || (
            // has a positive integer length property
            typeof arr.length === "number" &&
            arr.length >= 0 &&
            arr.length % 1 === 0
        );
    }

    function _arrayEach(arr, iterator) {
        var index = -1,
            length = arr.length;

        while (++index < length) {
            iterator(arr[index], index, arr);
        }
    }

    function _map(arr, iterator) {
        var index = -1,
            length = arr.length,
            result = Array(length);

        while (++index < length) {
            result[index] = iterator(arr[index], index, arr);
        }
        return result;
    }

    function _range(count) {
        return _map(Array(count), function (v, i) { return i; });
    }

    function _reduce(arr, iterator, memo) {
        _arrayEach(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    }

    function _forEachOf(object, iterator) {
        _arrayEach(_keys(object), function (key) {
            iterator(object[key], key);
        });
    }

    function _indexOf(arr, item) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] === item) return i;
        }
        return -1;
    }

    var _keys = Object.keys || function (obj) {
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    function _keyIterator(coll) {
        var i = -1;
        var len;
        var keys;
        if (_isArrayLike(coll)) {
            len = coll.length;
            return function next() {
                i++;
                return i < len ? i : null;
            };
        } else {
            keys = _keys(coll);
            len = keys.length;
            return function next() {
                i++;
                return i < len ? keys[i] : null;
            };
        }
    }

    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
    // This accumulates the arguments passed into an array, after a given index.
    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).
    function _restParam(func, startIndex) {
        startIndex = startIndex == null ? func.length - 1 : +startIndex;
        return function() {
            var length = Math.max(arguments.length - startIndex, 0);
            var rest = Array(length);
            for (var index = 0; index < length; index++) {
                rest[index] = arguments[index + startIndex];
            }
            switch (startIndex) {
                case 0: return func.call(this, rest);
                case 1: return func.call(this, arguments[0], rest);
            }
            // Currently unused but handle cases outside of the switch statement:
            // var args = Array(startIndex + 1);
            // for (index = 0; index < startIndex; index++) {
            //     args[index] = arguments[index];
            // }
            // args[startIndex] = rest;
            // return func.apply(this, args);
        };
    }

    function _withoutIndex(iterator) {
        return function (value, index, callback) {
            return iterator(value, callback);
        };
    }

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////

    // capture the global reference to guard against fakeTimer mocks
    var _setImmediate = typeof setImmediate === 'function' && setImmediate;

    var _delay = _setImmediate ? function(fn) {
        // not a direct alias for IE10 compatibility
        _setImmediate(fn);
    } : function(fn) {
        setTimeout(fn, 0);
    };

    if (typeof process === 'object' && typeof process.nextTick === 'function') {
        async.nextTick = process.nextTick;
    } else {
        async.nextTick = _delay;
    }
    async.setImmediate = _setImmediate ? _delay : async.nextTick;


    async.forEach =
    async.each = function (arr, iterator, callback) {
        return async.eachOf(arr, _withoutIndex(iterator), callback);
    };

    async.forEachSeries =
    async.eachSeries = function (arr, iterator, callback) {
        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);
    };


    async.forEachLimit =
    async.eachLimit = function (arr, limit, iterator, callback) {
        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);
    };

    async.forEachOf =
    async.eachOf = function (object, iterator, callback) {
        callback = _once(callback || noop);
        object = object || [];

        var iter = _keyIterator(object);
        var key, completed = 0;

        while ((key = iter()) != null) {
            completed += 1;
            iterator(object[key], key, only_once(done));
        }

        if (completed === 0) callback(null);

        function done(err) {
            completed--;
            if (err) {
                callback(err);
            }
            // Check key is null in case iterator isn't exhausted
            // and done resolved synchronously.
            else if (key === null && completed <= 0) {
                callback(null);
            }
        }
    };

    async.forEachOfSeries =
    async.eachOfSeries = function (obj, iterator, callback) {
        callback = _once(callback || noop);
        obj = obj || [];
        var nextKey = _keyIterator(obj);
        var key = nextKey();
        function iterate() {
            var sync = true;
            if (key === null) {
                return callback(null);
            }
            iterator(obj[key], key, only_once(function (err) {
                if (err) {
                    callback(err);
                }
                else {
                    key = nextKey();
                    if (key === null) {
                        return callback(null);
                    } else {
                        if (sync) {
                            async.setImmediate(iterate);
                        } else {
                            iterate();
                        }
                    }
                }
            }));
            sync = false;
        }
        iterate();
    };



    async.forEachOfLimit =
    async.eachOfLimit = function (obj, limit, iterator, callback) {
        _eachOfLimit(limit)(obj, iterator, callback);
    };

    function _eachOfLimit(limit) {

        return function (obj, iterator, callback) {
            callback = _once(callback || noop);
            obj = obj || [];
            var nextKey = _keyIterator(obj);
            if (limit <= 0) {
                return callback(null);
            }
            var done = false;
            var running = 0;
            var errored = false;

            (function replenish () {
                if (done && running <= 0) {
                    return callback(null);
                }

                while (running < limit && !errored) {
                    var key = nextKey();
                    if (key === null) {
                        done = true;
                        if (running <= 0) {
                            callback(null);
                        }
                        return;
                    }
                    running += 1;
                    iterator(obj[key], key, only_once(function (err) {
                        running -= 1;
                        if (err) {
                            callback(err);
                            errored = true;
                        }
                        else {
                            replenish();
                        }
                    }));
                }
            })();
        };
    }


    function doParallel(fn) {
        return function (obj, iterator, callback) {
            return fn(async.eachOf, obj, iterator, callback);
        };
    }
    function doParallelLimit(fn) {
        return function (obj, limit, iterator, callback) {
            return fn(_eachOfLimit(limit), obj, iterator, callback);
        };
    }
    function doSeries(fn) {
        return function (obj, iterator, callback) {
            return fn(async.eachOfSeries, obj, iterator, callback);
        };
    }

    function _asyncMap(eachfn, arr, iterator, callback) {
        callback = _once(callback || noop);
        arr = arr || [];
        var results = _isArrayLike(arr) ? [] : {};
        eachfn(arr, function (value, index, callback) {
            iterator(value, function (err, v) {
                results[index] = v;
                callback(err);
            });
        }, function (err) {
            callback(err, results);
        });
    }

    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = doParallelLimit(_asyncMap);

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.inject =
    async.foldl =
    async.reduce = function (arr, memo, iterator, callback) {
        async.eachOfSeries(arr, function (x, i, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };

    async.foldr =
    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, identity).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };

    async.transform = function (arr, memo, iterator, callback) {
        if (arguments.length === 3) {
            callback = iterator;
            iterator = memo;
            memo = _isArray(arr) ? [] : {};
        }

        async.eachOf(arr, function(v, k, cb) {
            iterator(memo, v, k, cb);
        }, function(err) {
            callback(err, memo);
        });
    };

    function _filter(eachfn, arr, iterator, callback) {
        var results = [];
        eachfn(arr, function (x, index, callback) {
            iterator(x, function (v) {
                if (v) {
                    results.push({index: index, value: x});
                }
                callback();
            });
        }, function () {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    }

    async.select =
    async.filter = doParallel(_filter);

    async.selectLimit =
    async.filterLimit = doParallelLimit(_filter);

    async.selectSeries =
    async.filterSeries = doSeries(_filter);

    function _reject(eachfn, arr, iterator, callback) {
        _filter(eachfn, arr, function(value, cb) {
            iterator(value, function(v) {
                cb(!v);
            });
        }, callback);
    }
    async.reject = doParallel(_reject);
    async.rejectLimit = doParallelLimit(_reject);
    async.rejectSeries = doSeries(_reject);

    function _createTester(eachfn, check, getResult) {
        return function(arr, limit, iterator, cb) {
            function done() {
                if (cb) cb(getResult(false, void 0));
            }
            function iteratee(x, _, callback) {
                if (!cb) return callback();
                iterator(x, function (v) {
                    if (cb && check(v)) {
                        cb(getResult(true, x));
                        cb = iterator = false;
                    }
                    callback();
                });
            }
            if (arguments.length > 3) {
                eachfn(arr, limit, iteratee, done);
            } else {
                cb = iterator;
                iterator = limit;
                eachfn(arr, iteratee, done);
            }
        };
    }

    async.any =
    async.some = _createTester(async.eachOf, toBool, identity);

    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);

    async.all =
    async.every = _createTester(async.eachOf, notId, notId);

    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);

    function _findGetResult(v, x) {
        return x;
    }
    async.detect = _createTester(async.eachOf, identity, _findGetResult);
    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);
    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                callback(null, _map(results.sort(comparator), function (x) {
                    return x.value;
                }));
            }

        });

        function comparator(left, right) {
            var a = left.criteria, b = right.criteria;
            return a < b ? -1 : a > b ? 1 : 0;
        }
    };

    async.auto = function (tasks, concurrency, callback) {
        if (typeof arguments[1] === 'function') {
            // concurrency is optional, shift the args.
            callback = concurrency;
            concurrency = null;
        }
        callback = _once(callback || noop);
        var keys = _keys(tasks);
        var remainingTasks = keys.length;
        if (!remainingTasks) {
            return callback(null);
        }
        if (!concurrency) {
            concurrency = remainingTasks;
        }

        var results = {};
        var runningTasks = 0;

        var hasError = false;

        var listeners = [];
        function addListener(fn) {
            listeners.unshift(fn);
        }
        function removeListener(fn) {
            var idx = _indexOf(listeners, fn);
            if (idx >= 0) listeners.splice(idx, 1);
        }
        function taskComplete() {
            remainingTasks--;
            _arrayEach(listeners.slice(0), function (fn) {
                fn();
            });
        }

        addListener(function () {
            if (!remainingTasks) {
                callback(null, results);
            }
        });

        _arrayEach(keys, function (k) {
            if (hasError) return;
            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
            var taskCallback = _restParam(function(err, args) {
                runningTasks--;
                if (args.length <= 1) {
                    args = args[0];
                }
                if (err) {
                    var safeResults = {};
                    _forEachOf(results, function(val, rkey) {
                        safeResults[rkey] = val;
                    });
                    safeResults[k] = args;
                    hasError = true;

                    callback(err, safeResults);
                }
                else {
                    results[k] = args;
                    async.setImmediate(taskComplete);
                }
            });
            var requires = task.slice(0, task.length - 1);
            // prevent dead-locks
            var len = requires.length;
            var dep;
            while (len--) {
                if (!(dep = tasks[requires[len]])) {
                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));
                }
                if (_isArray(dep) && _indexOf(dep, k) >= 0) {
                    throw new Error('Has cyclic dependencies');
                }
            }
            function ready() {
                return runningTasks < concurrency && _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true) && !results.hasOwnProperty(k);
            }
            if (ready()) {
                runningTasks++;
                task[task.length - 1](taskCallback, results);
            }
            else {
                addListener(listener);
            }
            function listener() {
                if (ready()) {
                    runningTasks++;
                    removeListener(listener);
                    task[task.length - 1](taskCallback, results);
                }
            }
        });
    };



    async.retry = function(times, task, callback) {
        var DEFAULT_TIMES = 5;
        var DEFAULT_INTERVAL = 0;

        var attempts = [];

        var opts = {
            times: DEFAULT_TIMES,
            interval: DEFAULT_INTERVAL
        };

        function parseTimes(acc, t){
            if(typeof t === 'number'){
                acc.times = parseInt(t, 10) || DEFAULT_TIMES;
            } else if(typeof t === 'object'){
                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;
                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;
            } else {
                throw new Error('Unsupported argument type for \'times\': ' + typeof t);
            }
        }

        var length = arguments.length;
        if (length < 1 || length > 3) {
            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');
        } else if (length <= 2 && typeof times === 'function') {
            callback = task;
            task = times;
        }
        if (typeof times !== 'function') {
            parseTimes(opts, times);
        }
        opts.callback = callback;
        opts.task = task;

        function wrappedTask(wrappedCallback, wrappedResults) {
            function retryAttempt(task, finalAttempt) {
                return function(seriesCallback) {
                    task(function(err, result){
                        seriesCallback(!err || finalAttempt, {err: err, result: result});
                    }, wrappedResults);
                };
            }

            function retryInterval(interval){
                return function(seriesCallback){
                    setTimeout(function(){
                        seriesCallback(null);
                    }, interval);
                };
            }

            while (opts.times) {

                var finalAttempt = !(opts.times-=1);
                attempts.push(retryAttempt(opts.task, finalAttempt));
                if(!finalAttempt && opts.interval > 0){
                    attempts.push(retryInterval(opts.interval));
                }
            }

            async.series(attempts, function(done, data){
                data = data[data.length - 1];
                (wrappedCallback || opts.callback)(data.err, data.result);
            });
        }

        // If a callback is passed, run this as a controll flow
        return opts.callback ? wrappedTask() : wrappedTask;
    };

    async.waterfall = function (tasks, callback) {
        callback = _once(callback || noop);
        if (!_isArray(tasks)) {
            var err = new Error('First argument to waterfall must be an array of functions');
            return callback(err);
        }
        if (!tasks.length) {
            return callback();
        }
        function wrapIterator(iterator) {
            return _restParam(function (err, args) {
                if (err) {
                    callback.apply(null, [err].concat(args));
                }
                else {
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    ensureAsync(iterator).apply(null, args);
                }
            });
        }
        wrapIterator(async.iterator(tasks))();
    };

    function _parallel(eachfn, tasks, callback) {
        callback = callback || noop;
        var results = _isArrayLike(tasks) ? [] : {};

        eachfn(tasks, function (task, key, callback) {
            task(_restParam(function (err, args) {
                if (args.length <= 1) {
                    args = args[0];
                }
                results[key] = args;
                callback(err);
            }));
        }, function (err) {
            callback(err, results);
        });
    }

    async.parallel = function (tasks, callback) {
        _parallel(async.eachOf, tasks, callback);
    };

    async.parallelLimit = function(tasks, limit, callback) {
        _parallel(_eachOfLimit(limit), tasks, callback);
    };

    async.series = function(tasks, callback) {
        _parallel(async.eachOfSeries, tasks, callback);
    };

    async.iterator = function (tasks) {
        function makeCallback(index) {
            function fn() {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            }
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            };
            return fn;
        }
        return makeCallback(0);
    };

    async.apply = _restParam(function (fn, args) {
        return _restParam(function (callArgs) {
            return fn.apply(
                null, args.concat(callArgs)
            );
        });
    });

    function _concat(eachfn, arr, fn, callback) {
        var result = [];
        eachfn(arr, function (x, index, cb) {
            fn(x, function (err, y) {
                result = result.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, result);
        });
    }
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        callback = callback || noop;
        if (test()) {
            var next = _restParam(function(err, args) {
                if (err) {
                    callback(err);
                } else if (test.apply(this, args)) {
                    iterator(next);
                } else {
                    callback.apply(null, [null].concat(args));
                }
            });
            iterator(next);
        } else {
            callback(null);
        }
    };

    async.doWhilst = function (iterator, test, callback) {
        var calls = 0;
        return async.whilst(function() {
            return ++calls <= 1 || test.apply(this, arguments);
        }, iterator, callback);
    };

    async.until = function (test, iterator, callback) {
        return async.whilst(function() {
            return !test.apply(this, arguments);
        }, iterator, callback);
    };

    async.doUntil = function (iterator, test, callback) {
        return async.doWhilst(iterator, function() {
            return !test.apply(this, arguments);
        }, callback);
    };

    async.during = function (test, iterator, callback) {
        callback = callback || noop;

        var next = _restParam(function(err, args) {
            if (err) {
                callback(err);
            } else {
                args.push(check);
                test.apply(this, args);
            }
        });

        var check = function(err, truth) {
            if (err) {
                callback(err);
            } else if (truth) {
                iterator(next);
            } else {
                callback(null);
            }
        };

        test(check);
    };

    async.doDuring = function (iterator, test, callback) {
        var calls = 0;
        async.during(function(next) {
            if (calls++ < 1) {
                next(null, true);
            } else {
                test.apply(this, arguments);
            }
        }, iterator, callback);
    };

    function _queue(worker, concurrency, payload) {
        if (concurrency == null) {
            concurrency = 1;
        }
        else if(concurrency === 0) {
            throw new Error('Concurrency must not be zero');
        }
        function _insert(q, data, pos, callback) {
            if (callback != null && typeof callback !== "function") {
                throw new Error("task callback must be a function");
            }
            q.started = true;
            if (!_isArray(data)) {
                data = [data];
            }
            if(data.length === 0 && q.idle()) {
                // call drain immediately if there are no tasks
                return async.setImmediate(function() {
                    q.drain();
                });
            }
            _arrayEach(data, function(task) {
                var item = {
                    data: task,
                    callback: callback || noop
                };

                if (pos) {
                    q.tasks.unshift(item);
                } else {
                    q.tasks.push(item);
                }

                if (q.tasks.length === q.concurrency) {
                    q.saturated();
                }
            });
            async.setImmediate(q.process);
        }
        function _next(q, tasks) {
            return function(){
                workers -= 1;

                var removed = false;
                var args = arguments;
                _arrayEach(tasks, function (task) {
                    _arrayEach(workersList, function (worker, index) {
                        if (worker === task && !removed) {
                            workersList.splice(index, 1);
                            removed = true;
                        }
                    });

                    task.callback.apply(task, args);
                });
                if (q.tasks.length + workers === 0) {
                    q.drain();
                }
                q.process();
            };
        }

        var workers = 0;
        var workersList = [];
        var q = {
            tasks: [],
            concurrency: concurrency,
            payload: payload,
            saturated: noop,
            empty: noop,
            drain: noop,
            started: false,
            paused: false,
            push: function (data, callback) {
                _insert(q, data, false, callback);
            },
            kill: function () {
                q.drain = noop;
                q.tasks = [];
            },
            unshift: function (data, callback) {
                _insert(q, data, true, callback);
            },
            process: function () {
                while(!q.paused && workers < q.concurrency && q.tasks.length){

                    var tasks = q.payload ?
                        q.tasks.splice(0, q.payload) :
                        q.tasks.splice(0, q.tasks.length);

                    var data = _map(tasks, function (task) {
                        return task.data;
                    });

                    if (q.tasks.length === 0) {
                        q.empty();
                    }
                    workers += 1;
                    workersList.push(tasks[0]);
                    var cb = only_once(_next(q, tasks));
                    worker(data, cb);
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            },
            workersList: function () {
                return workersList;
            },
            idle: function() {
                return q.tasks.length + workers === 0;
            },
            pause: function () {
                q.paused = true;
            },
            resume: function () {
                if (q.paused === false) { return; }
                q.paused = false;
                var resumeCount = Math.min(q.concurrency, q.tasks.length);
                // Need to call q.process once per concurrent
                // worker to preserve full concurrency after pause
                for (var w = 1; w <= resumeCount; w++) {
                    async.setImmediate(q.process);
                }
            }
        };
        return q;
    }

    async.queue = function (worker, concurrency) {
        var q = _queue(function (items, cb) {
            worker(items[0], cb);
        }, concurrency, 1);

        return q;
    };

    async.priorityQueue = function (worker, concurrency) {

        function _compareTasks(a, b){
            return a.priority - b.priority;
        }

        function _binarySearch(sequence, item, compare) {
            var beg = -1,
                end = sequence.length - 1;
            while (beg < end) {
                var mid = beg + ((end - beg + 1) >>> 1);
                if (compare(item, sequence[mid]) >= 0) {
                    beg = mid;
                } else {
                    end = mid - 1;
                }
            }
            return beg;
        }

        function _insert(q, data, priority, callback) {
            if (callback != null && typeof callback !== "function") {
                throw new Error("task callback must be a function");
            }
            q.started = true;
            if (!_isArray(data)) {
                data = [data];
            }
            if(data.length === 0) {
                // call drain immediately if there are no tasks
                return async.setImmediate(function() {
                    q.drain();
                });
            }
            _arrayEach(data, function(task) {
                var item = {
                    data: task,
                    priority: priority,
                    callback: typeof callback === 'function' ? callback : noop
                };

                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

                if (q.tasks.length === q.concurrency) {
                    q.saturated();
                }
                async.setImmediate(q.process);
            });
        }

        // Start with a normal queue
        var q = async.queue(worker, concurrency);

        // Override push to accept second parameter representing priority
        q.push = function (data, priority, callback) {
            _insert(q, data, priority, callback);
        };

        // Remove unshift function
        delete q.unshift;

        return q;
    };

    async.cargo = function (worker, payload) {
        return _queue(worker, 1, payload);
    };

    function _console_fn(name) {
        return _restParam(function (fn, args) {
            fn.apply(null, args.concat([_restParam(function (err, args) {
                if (typeof console === 'object') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _arrayEach(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            })]));
        });
    }
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        var has = Object.prototype.hasOwnProperty;
        hasher = hasher || identity;
        var memoized = _restParam(function memoized(args) {
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (has.call(memo, key)) {   
                async.setImmediate(function () {
                    callback.apply(null, memo[key]);
                });
            }
            else if (has.call(queues, key)) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([_restParam(function (args) {
                    memo[key] = args;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                        q[i].apply(null, args);
                    }
                })]));
            }
        });
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
        return function () {
            return (fn.unmemoized || fn).apply(null, arguments);
        };
    };

    function _times(mapper) {
        return function (count, iterator, callback) {
            mapper(_range(count), iterator, callback);
        };
    }

    async.times = _times(async.map);
    async.timesSeries = _times(async.mapSeries);
    async.timesLimit = function (count, limit, iterator, callback) {
        return async.mapLimit(_range(count), limit, iterator, callback);
    };

    async.seq = function (/* functions... */) {
        var fns = arguments;
        return _restParam(function (args) {
            var that = this;

            var callback = args[args.length - 1];
            if (typeof callback == 'function') {
                args.pop();
            } else {
                callback = noop;
            }

            async.reduce(fns, args, function (newargs, fn, cb) {
                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {
                    cb(err, nextargs);
                })]));
            },
            function (err, results) {
                callback.apply(that, [err].concat(results));
            });
        });
    };

    async.compose = function (/* functions... */) {
        return async.seq.apply(null, Array.prototype.reverse.call(arguments));
    };


    function _applyEach(eachfn) {
        return _restParam(function(fns, args) {
            var go = _restParam(function(args) {
                var that = this;
                var callback = args.pop();
                return eachfn(fns, function (fn, _, cb) {
                    fn.apply(that, args.concat([cb]));
                },
                callback);
            });
            if (args.length) {
                return go.apply(this, args);
            }
            else {
                return go;
            }
        });
    }

    async.applyEach = _applyEach(async.eachOf);
    async.applyEachSeries = _applyEach(async.eachOfSeries);


    async.forever = function (fn, callback) {
        var done = only_once(callback || noop);
        var task = ensureAsync(fn);
        function next(err) {
            if (err) {
                return done(err);
            }
            task(next);
        }
        next();
    };

    function ensureAsync(fn) {
        return _restParam(function (args) {
            var callback = args.pop();
            args.push(function () {
                var innerArgs = arguments;
                if (sync) {
                    async.setImmediate(function () {
                        callback.apply(null, innerArgs);
                    });
                } else {
                    callback.apply(null, innerArgs);
                }
            });
            var sync = true;
            fn.apply(this, args);
            sync = false;
        });
    }

    async.ensureAsync = ensureAsync;

    async.constant = _restParam(function(values) {
        var args = [null].concat(values);
        return function (callback) {
            return callback.apply(this, args);
        };
    });

    async.wrapSync =
    async.asyncify = function asyncify(func) {
        return _restParam(function (args) {
            var callback = args.pop();
            var result;
            try {
                result = func.apply(this, args);
            } catch (e) {
                return callback(e);
            }
            // if result is Promise object
            if (_isObject(result) && typeof result.then === "function") {
                result.then(function(value) {
                    callback(null, value);
                })["catch"](function(err) {
                    callback(err.message ? err : new Error(err));
                });
            } else {
                callback(null, result);
            }
        });
    };

    // Node.js
    if (typeof module === 'object' && module.exports) {
        module.exports = async;
    }
    // AMD / RequireJS
    else if (typeof define === 'function' && define.amd) {
        define([], function () {
            return async;
        });
    }
    // included directly via <script> tag
    else {
        root.async = async;
    }

}());

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":19}],16:[function(require,module,exports){
(function (global){
/**
 * @license
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modern -o ./dist/lodash.js`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Used to pool arrays and objects used internally */
  var arrayPool = [],
      objectPool = [];

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
  var keyPrefix = +new Date + '';

  /** Used as the size when optimizations are enabled for large arrays */
  var largeArraySize = 75;

  /** Used as the max size of the `arrayPool` and `objectPool` */
  var maxPoolSize = 40;

  /** Used to detect and test whitespace */
  var whitespace = (
    // whitespace
    ' \t\x0B\f\xA0\ufeff' +

    // line terminators
    '\n\r\u2028\u2029' +

    // unicode category "Zs" space separators
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to detected named functions */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to match "interpolate" template delimiters */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match leading whitespace and zeros to be removed */
  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to detect functions containing a `this` reference */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object',
    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',
    'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used as an internal `_.debounce` options object */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used as the property descriptor for `__bindData__` */
  var descriptor = {
    'configurable': false,
    'enumerable': false,
    'value': null,
    'writable': false
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports` */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `_.indexOf` without support for binary searches
   * or `fromIndex` constraints.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value or `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    var index = (fromIndex || 0) - 1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * An implementation of `_.contains` for cache objects that mimics the return
   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache object to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var type = typeof value;
    cache = cache.cache;

    if (type == 'boolean' || value == null) {
      return cache[value] ? 0 : -1;
    }
    if (type != 'number' && type != 'string') {
      type = 'object';
    }
    var key = type == 'number' ? value : keyPrefix + value;
    cache = (cache = cache[type]) && cache[key];

    return type == 'object'
      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)
      : (cache ? 0 : -1);
  }

  /**
   * Adds a given value to the corresponding cache object.
   *
   * @private
   * @param {*} value The value to add to the cache.
   */
  function cachePush(value) {
    var cache = this.cache,
        type = typeof value;

    if (type == 'boolean' || value == null) {
      cache[value] = true;
    } else {
      if (type != 'number' && type != 'string') {
        type = 'object';
      }
      var key = type == 'number' ? value : keyPrefix + value,
          typeCache = cache[type] || (cache[type] = {});

      if (type == 'object') {
        (typeCache[key] || (typeCache[key] = [])).push(value);
      } else {
        typeCache[key] = true;
      }
    }
  }

  /**
   * Used by `_.max` and `_.min` as the default callback when a given
   * collection is a string value.
   *
   * @private
   * @param {string} value The character to inspect.
   * @returns {number} Returns the code unit of given character.
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }

  /**
   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ac = a.criteria,
        bc = b.criteria,
        index = -1,
        length = ac.length;

    while (++index < length) {
      var value = ac[index],
          other = bc[index];

      if (value !== other) {
        if (value > other || typeof value == 'undefined') {
          return 1;
        }
        if (value < other || typeof other == 'undefined') {
          return -1;
        }
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to return the same value for
    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
    //
    // This also ensures a stable sort in V8 and other engines.
    // See http://code.google.com/p/v8/issues/detail?id=90
    return a.index - b.index;
  }

  /**
   * Creates a cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [array=[]] The array to search.
   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.
   */
  function createCache(array) {
    var index = -1,
        length = array.length,
        first = array[0],
        mid = array[(length / 2) | 0],
        last = array[length - 1];

    if (first && typeof first == 'object' &&
        mid && typeof mid == 'object' && last && typeof last == 'object') {
      return false;
    }
    var cache = getObject();
    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;

    var result = getObject();
    result.array = array;
    result.cache = cache;
    result.push = cachePush;

    while (++index < length) {
      result.push(array[index]);
    }
    return result;
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Gets an array from the array pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Array} The array from the pool.
   */
  function getArray() {
    return arrayPool.pop() || [];
  }

  /**
   * Gets an object from the object pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Object} The object from the pool.
   */
  function getObject() {
    return objectPool.pop() || {
      'array': null,
      'cache': null,
      'criteria': null,
      'false': false,
      'index': 0,
      'null': false,
      'number': null,
      'object': null,
      'push': null,
      'string': null,
      'true': false,
      'undefined': false,
      'value': null
    };
  }

  /**
   * Releases the given array back to the array pool.
   *
   * @private
   * @param {Array} [array] The array to release.
   */
  function releaseArray(array) {
    array.length = 0;
    if (arrayPool.length < maxPoolSize) {
      arrayPool.push(array);
    }
  }

  /**
   * Releases the given object back to the object pool.
   *
   * @private
   * @param {Object} [object] The object to release.
   */
  function releaseObject(object) {
    var cache = object.cache;
    if (cache) {
      releaseObject(cache);
    }
    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
    if (objectPool.length < maxPoolSize) {
      objectPool.push(object);
    }
  }

  /**
   * Slices the `collection` from the `start` index up to, but not including,
   * the `end` index.
   *
   * Note: This function is used instead of `Array#slice` to support node lists
   * in IE < 9 and to ensure dense arrays are returned.
   *
   * @private
   * @param {Array|Object|string} collection The collection to slice.
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array} Returns the new array.
   */
  function slice(array, start, end) {
    start || (start = 0);
    if (typeof end == 'undefined') {
      end = array ? array.length : 0;
    }
    var index = -1,
        length = end - start || 0,
        result = Array(length < 0 ? 0 : length);

    while (++index < length) {
      result[index] = array[start + index];
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given context object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns the `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.io/#x11.1.5.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /**
     * Used for `Array` method references.
     *
     * Normally `Array.prototype` would suffice, however, using an array literal
     * avoids issues in Narwhal.
     */
    var arrayRef = [];

    /** Used for native method references */
    var objectProto = Object.prototype;

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        fnToString = Function.prototype.toString,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        setTimeout = context.setTimeout,
        splice = arrayRef.splice,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function() {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch(e) { }
      return result;
    }());

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[funcClass] = Function;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
     * `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
       ? value
       : new lodashWrapper(value);
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap in a `lodash` instance.
     * @param {boolean} chainAll A flag to enable chaining for all methods
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value, chainAll) {
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * Detect if functions can be decompiled by `Function#toString`
     * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

    /**
     * Detect if `Function#name` is supported (all but IE).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcNames = typeof Function.name == 'string';

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': /<%-([\s\S]+?)%>/g,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': /<%([\s\S]+?)%>/g,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(bindData) {
      var func = bindData[0],
          partialArgs = bindData[2],
          thisArg = bindData[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.clone` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, callback, stackA, stackB) {
      if (callback) {
        var result = callback(value);
        if (typeof result != 'undefined') {
          return result;
        }
      }
      // inspect [[Class]]
      var isObj = isObject(value);
      if (isObj) {
        var className = toString.call(value);
        if (!cloneableClasses[className]) {
          return value;
        }
        var ctor = ctorByClass[className];
        switch (className) {
          case boolClass:
          case dateClass:
            return new ctor(+value);

          case numberClass:
          case stringClass:
            return new ctor(value);

          case regexpClass:
            result = ctor(value.source, reFlags.exec(value));
            result.lastIndex = value.lastIndex;
            return result;
        }
      } else {
        return value;
      }
      var isArr = isArray(value);
      if (isDeep) {
        // check for circular references and return corresponding clone
        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        result = isArr ? ctor(value.length) : {};
      }
      else {
        result = isArr ? slice(value) : assign({}, value);
      }
      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // exit for shallow clone
      if (!isDeep) {
        return result;
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? forEach : forOwn)(value, function(objValue, key) {
        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
      });

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype, properties) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for browsers without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function() {
        function Object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object;
            Object.prototype = null;
          }
          return result || context.Object();
        };
      }());
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var bindData = func.__bindData__;
      if (typeof bindData == 'undefined') {
        if (support.funcNames) {
          bindData = !func.name;
        }
        bindData = bindData || !support.funcDecomp;
        if (!bindData) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            bindData = !reFuncName.test(source);
          }
          if (!bindData) {
            // checks if `func` references the `this` keyword and stores the result
            bindData = reThis.test(source);
            setBindData(func, bindData);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (bindData === false || (bindData !== true && bindData[1] & 1)) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 2: return function(a, b) {
          return func.call(thisArg, a, b);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(bindData) {
      var func = bindData[0],
          bitmask = bindData[1],
          partialArgs = bindData[2],
          partialRightArgs = bindData[3],
          thisArg = bindData[4],
          arity = bindData[5];

      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          if (isCurry && args.length < arity) {
            bitmask |= 16 & ~32;
            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.difference` that accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {Array} [values] The array of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     */
    function baseDifference(array, values) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          isLarge = length >= largeArraySize && indexOf === baseIndexOf,
          result = [];

      if (isLarge) {
        var cache = createCache(values);
        if (cache) {
          indexOf = cacheIndexOf;
          values = cache;
        } else {
          isLarge = false;
        }
      }
      while (++index < length) {
        var value = array[index];
        if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      if (isLarge) {
        releaseObject(values);
      }
      return result;
    }

    /**
     * The base implementation of `_.flatten` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns a new flattened array.
     */
    function baseFlatten(array, isShallow, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value && typeof value == 'object' && typeof value.length == 'number'
            && (isArray(value) || isArguments(value))) {
          // recursively flatten arrays (susceptible to call stack limits)
          if (!isShallow) {
            value = baseFlatten(value, isShallow, isStrict);
          }
          var valIndex = -1,
              valLength = value.length,
              resIndex = result.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[resIndex++] = value[valIndex];
          }
        } else if (!isStrict) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
     * that allows partial "_.where" style comparisons.
     *
     * @private
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      if (callback) {
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
          !(a && objectTypes[type]) &&
          !(b && objectTypes[otherType])) {
        return false;
      }
      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
      // http://es5.github.io/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
            bWrapped = hasOwnProperty.call(b, '__wrapped__');

        if (aWrapped || bWrapped) {
          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = a.constructor,
            ctorB = b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB &&
              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
              ('constructor' in a && 'constructor' in b)
            ) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
      var initedStack = !stackA;
      stackA || (stackA = getArray());
      stackB || (stackB = getArray());

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        // compare lengths to determine if a deep comparison is necessary
        length = a.length;
        size = b.length;
        result = size == length;

        if (result || isWhere) {
          // deep compare the contents, ignoring non-numeric properties
          while (size--) {
            var index = length,
                value = b[size];

            if (isWhere) {
              while (index--) {
                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                  break;
                }
              }
            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
              break;
            }
          }
        }
      }
      else {
        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
        // which, in this case, is more costly
        forIn(b, function(value, key, b) {
          if (hasOwnProperty.call(b, key)) {
            // count the number of properties.
            size++;
            // deep compare each property value.
            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
          }
        });

        if (result && !isWhere) {
          // ensure both objects have the same number of properties
          forIn(a, function(value, key, a) {
            if (hasOwnProperty.call(a, key)) {
              // `size` will be `-1` if `a` has more properties than `b`
              return (result = --size > -1);
            }
          });
        }
      }
      stackA.pop();
      stackB.pop();

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.merge` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     */
    function baseMerge(object, source, callback, stackA, stackB) {
      (isArray(source) ? forEach : forOwn)(source, function(source, key) {
        var found,
            isArr,
            result = source,
            value = object[key];

        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
          // avoid merging previously merged cyclic sources
          var stackLength = stackA.length;
          while (stackLength--) {
            if ((found = stackA[stackLength] == source)) {
              value = stackB[stackLength];
              break;
            }
          }
          if (!found) {
            var isShallow;
            if (callback) {
              result = callback(value, source);
              if ((isShallow = typeof result != 'undefined')) {
                value = result;
              }
            }
            if (!isShallow) {
              value = isArr
                ? (isArray(value) ? value : [])
                : (isPlainObject(value) ? value : {});
            }
            // add `source` and associated `value` to the stack of traversed objects
            stackA.push(source);
            stackB.push(value);

            // recursively merge objects and arrays (susceptible to call stack limits)
            if (!isShallow) {
              baseMerge(value, source, callback, stackA, stackB);
            }
          }
        }
        else {
          if (callback) {
            result = callback(value, source);
            if (typeof result == 'undefined') {
              result = source;
            }
          }
          if (typeof result != 'undefined') {
            value = result;
          }
        }
        object[key] = value;
      });
    }

    /**
     * The base implementation of `_.random` without argument juggling or support
     * for returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns a random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function} [callback] The function called per iteration.
     * @returns {Array} Returns a duplicate-value-free array.
     */
    function baseUniq(array, isSorted, callback) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          result = [];

      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
          seen = (callback || isLarge) ? getArray() : result;

      if (isLarge) {
        var cache = createCache(seen);
        indexOf = cacheIndexOf;
        seen = cache;
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isSorted
              ? !index || seen[seen.length - 1] !== computed
              : indexOf(seen, computed) < 0
            ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      if (isLarge) {
        releaseArray(seen.array);
        releaseObject(seen);
      } else if (callback) {
        releaseArray(seen);
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an object composed
     * of keys generated from the results of running each element of the collection
     * through a callback. The given `setter` function sets the keys and values
     * of the composed object.
     *
     * @private
     * @param {Function} setter The setter function.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter) {
      return function(collection, callback, thisArg) {
        var result = {};
        callback = lodash.createCallback(callback, thisArg, 3);

        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            var value = collection[index];
            setter(result, value, callback(value, index, collection), collection);
          }
        } else {
          forOwn(collection, function(value, key, collection) {
            setter(result, value, callback(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of method flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1 - `_.bind`
     *  2 - `_.bindKey`
     *  4 - `_.curry`
     *  8 - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          isPartial = bitmask & 16,
          isPartialRight = bitmask & 32;

      if (!isBindKey && !isFunction(func)) {
        throw new TypeError;
      }
      if (isPartial && !partialArgs.length) {
        bitmask &= ~16;
        isPartial = partialArgs = false;
      }
      if (isPartialRight && !partialRightArgs.length) {
        bitmask &= ~32;
        isPartialRight = partialRightArgs = false;
      }
      var bindData = func && func.__bindData__;
      if (bindData && bindData !== true) {
        // clone `bindData`
        bindData = slice(bindData);
        if (bindData[2]) {
          bindData[2] = slice(bindData[2]);
        }
        if (bindData[3]) {
          bindData[3] = slice(bindData[3]);
        }
        // set `thisBinding` is not previously bound
        if (isBind && !(bindData[1] & 1)) {
          bindData[4] = thisArg;
        }
        // set if previously bound but not currently (subsequent curried functions)
        if (!isBind && bindData[1] & 1) {
          bitmask |= 8;
        }
        // set curried arity if not yet set
        if (isCurry && !(bindData[1] & 4)) {
          bindData[5] = arity;
        }
        // append partial left arguments
        if (isPartial) {
          push.apply(bindData[2] || (bindData[2] = []), partialArgs);
        }
        // append partial right arguments
        if (isPartialRight) {
          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
        }
        // merge flags
        bindData[1] |= bitmask;
        return createWrapper.apply(null, bindData);
      }
      // fast path for `_.bind`
      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
    }

    /**
     * Used by `escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} match The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeHtmlChar(match) {
      return htmlEscapes[match];
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized, this method returns the custom method, otherwise it returns
     * the `baseIndexOf` function.
     *
     * @private
     * @returns {Function} Returns the "indexOf" function.
     */
    function getIndexOf() {
      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
      return result;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(value);
    }

    /**
     * Sets `this` binding data on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setBindData = !defineProperty ? noop : function(func, value) {
      descriptor.value = value;
      defineProperty(func, '__bindData__', descriptor);
    };

    /**
     * A fallback implementation of `isPlainObject` which checks if a given value
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var ctor,
          result;

      // avoid non Object objects, `arguments` objects, and DOM elements
      if (!(value && toString.call(value) == objectClass) ||
          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {
        return false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      forIn(value, function(value, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * Used by `unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} match The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    function unescapeHtmlChar(match) {
      return htmlUnescapes[match];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == argsClass || false;
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == arrayClass || false;
    };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = function(object) {
      var index, iterable = object, result = [];
      if (!iterable) return result;
      if (!(objectTypes[typeof object])) return result;
        for (index in iterable) {
          if (hasOwnProperty.call(iterable, index)) {
            result.push(index);
          }
        }
      return result
    };

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      return nativeKeys(object);
    };

    /**
     * Used to convert characters to HTML entities:
     *
     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
     * don't require escaping in HTML and have no special meaning unless they're part
     * of a tag or an unquoted attribute value.
     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
     */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to convert HTML entities to characters */
    var htmlUnescapes = invert(htmlEscapes);

    /** Used to match HTML entities and HTML characters */
    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var object = { 'name': 'barney' };
     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var assign = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
        var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);
      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {
        callback = args[--argsLength];
      }
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];
        }
        }
      }
      return result
    };

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a callback
     * is provided it will be executed to produce the cloned values. If the
     * callback returns `undefined` cloning will be handled by the method instead.
     * The callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var shallow = _.clone(characters);
     * shallow[0] === characters[0];
     * // => true
     *
     * var deep = _.clone(characters, true);
     * deep[0] === characters[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, callback, thisArg) {
      // allows working with "Collections" methods without using their `index`
      // and `collection` arguments for `isDeep` and `callback`
      if (typeof isDeep != 'boolean' && isDeep != null) {
        thisArg = callback;
        callback = isDeep;
        isDeep = false;
      }
      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates a deep clone of `value`. If a callback is provided it will be
     * executed to produce the cloned values. If the callback returns `undefined`
     * cloning will be handled by the method instead. The callback is bound to
     * `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var deep = _.cloneDeep(characters);
     * deep[0] === characters[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? assign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var object = { 'name': 'barney' };
     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var defaults = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (typeof result[index] == 'undefined') result[index] = iterable[index];
        }
        }
      }
      return result
    };

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': false },
     *   'fred': {    'age': 40, 'blocked': true },
     *   'pebbles': { 'age': 1,  'blocked': false }
     * };
     *
     * _.findKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (property order is not guaranteed across environments)
     *
     * // using "_.where" callback shorthand
     * _.findKey(characters, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using "_.pluck" callback shorthand
     * _.findKey(characters, 'blocked');
     * // => 'fred'
     */
    function findKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': true },
     *   'fred': {    'age': 40, 'blocked': false },
     *   'pebbles': { 'age': 1,  'blocked': true }
     * };
     *
     * _.findLastKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
     *
     * // using "_.where" callback shorthand
     * _.findLastKey(characters, { 'age': 40 });
     * // => 'fred'
     *
     * // using "_.pluck" callback shorthand
     * _.findLastKey(characters, 'blocked');
     * // => 'pebbles'
     */
    function findLastKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwnRight(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over own and inherited enumerable properties of an object,
     * executing the callback for each property. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, key, object). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forIn(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
     */
    var forIn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        for (index in iterable) {
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forIn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forInRight(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
     */
    function forInRight(object, callback, thisArg) {
      var pairs = [];

      forIn(object, function(value, key) {
        pairs.push(key, value);
      });

      var length = pairs.length;
      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(pairs[length--], pairs[length], object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Iterates over own enumerable properties of an object, executing the callback
     * for each property. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
     */
    var forOwn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forOwn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, callback, thisArg) {
      var props = keys(object),
          length = props.length;

      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Creates a sorted array of property names of all enumerable properties,
     * own and inherited, of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      forIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified property name exists as a direct property of `object`,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to check.
     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     */
    function invert(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        result[object[key]] = key;
      }
      return result;
    }

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        value && typeof value == 'object' && toString.call(value) == boolClass || false;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value && value.nodeType === 1 || false;
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass || className == argsClass ) ||
          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      forOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If a callback is provided it will be executed
     * to compare values. If the callback returns `undefined` comparisons will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var copy = { 'name': 'fred' };
     *
     * object == copy;
     * // => false
     *
     * _.isEqual(object, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg) {
      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This is not the same as native `isFinite` which will return true for
     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return !!(value && objectTypes[typeof value]);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This is not the same as native `isNaN` which will return `true` for
     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        value && typeof value == 'object' && toString.call(value) == numberClass || false;
    }

    /**
     * Checks if `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * _.isPlainObject(new Shape);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && toString.call(value) == objectClass)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/fred/);
     * // => true
     */
    function isRegExp(value) {
      return value && typeof value == 'object' && toString.call(value) == regexpClass || false;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' ||
        value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new object with values of the results of each `callback` execution.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var characters = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // using "_.pluck" callback shorthand
     * _.mapValues(characters, 'age');
     * // => { 'fred': 40, 'pebbles': 1 }
     */
    function mapValues(object, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg, 3);

      forOwn(object, function(value, key, object) {
        result[key] = callback(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a callback is
     * provided it will be executed to produce the merged values of the destination
     * and source properties. If the callback returns `undefined` merging will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'characters': [
     *     { 'name': 'barney' },
     *     { 'name': 'fred' }
     *   ]
     * };
     *
     * var ages = {
     *   'characters': [
     *     { 'age': 36 },
     *     { 'age': 40 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object) {
      var args = arguments,
          length = 2;

      if (!isObject(object)) {
        return object;
      }
      // allows working with `_.reduce` and `_.reduceRight` without using
      // their `index` and `collection` arguments
      if (typeof args[2] != 'number') {
        length = args.length;
      }
      if (length > 3 && typeof args[length - 2] == 'function') {
        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
      } else if (length > 2 && typeof args[length - 1] == 'function') {
        callback = args[--length];
      }
      var sources = slice(arguments, 1, length),
          index = -1,
          stackA = getArray(),
          stackB = getArray();

      while (++index < length) {
        baseMerge(object, sources[index], callback, stackA, stackB);
      }
      releaseArray(stackA);
      releaseArray(stackB);
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` omitting the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The properties to omit or the
     *  function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
     * // => { 'name': 'fred' }
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'fred' }
     */
    function omit(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var props = [];
        forIn(object, function(value, key) {
          props.push(key);
        });
        props = baseDifference(props, baseFlatten(arguments, true, false, 1));

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          result[key] = object[key];
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (!callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates a two dimensional array of an object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` picking the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
     * // => { 'name': 'fred' }
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'fred' }
     */
    function pick(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var index = -1,
            props = baseFlatten(arguments, true, false, 1),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * An alternative to `_.reduce` this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable properties through a callback, with each callback execution
     * potentially mutating the `accumulator` object. The callback is bound to
     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
     * Callbacks may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
     *   num *= num;
     *   if (num % 2) {
     *     return result.push(num) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, callback, accumulator, thisArg) {
      var isArr = isArray(object);
      if (accumulator == null) {
        if (isArr) {
          accumulator = [];
        } else {
          var ctor = object && object.constructor,
              proto = ctor && ctor.prototype;

          accumulator = baseCreate(proto);
        }
      }
      if (callback) {
        callback = lodash.createCallback(callback, thisArg, 4);
        (isArr ? forEach : forOwn)(object, function(value, index, object) {
          return callback(accumulator, value, index, object);
        });
      }
      return accumulator;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (property order is not guaranteed across environments)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
     *   to retrieve, specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var args = arguments,
          index = -1,
          props = baseFlatten(args, true, false, 1),
          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,
          result = Array(length);

      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given value is present in a collection using strict equality
     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
     * offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {*} target The value to check for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.contains('pebbles', 'eb');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var index = -1,
          indexOf = getIndexOf(),
          length = collection ? collection.length : 0,
          result = false;

      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
      if (isArray(collection)) {
        result = indexOf(collection, target, fromIndex) > -1;
      } else if (typeof length == 'number') {
        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
      } else {
        forOwn(collection, function(value) {
          if (++index >= fromIndex) {
            return !(result = value === target);
          }
        });
      }
      return result;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through the callback. The corresponding value
     * of each key is the number of times the key was returned by the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
    });

    /**
     * Checks if the given callback returns truey value for **all** elements of
     * a collection. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if all elements passed the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(characters, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(characters, { 'age': 36 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning an array of all elements
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(characters, 'blocked');
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     *
     * // using "_.where" callback shorthand
     * _.filter(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning the first element that
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect, findWhere
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.find(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
     *
     * // using "_.where" callback shorthand
     * _.find(characters, { 'age': 1 });
     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
     *
     * // using "_.pluck" callback shorthand
     * _.find(characters, 'blocked');
     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * This method is like `_.find` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(num) {
     *   return num % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forEachRight(collection, function(value, index, collection) {
        if (callback(value, index, collection)) {
          result = value;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over elements of a collection, executing the callback for each
     * element. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * Note: As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
     * // => logs each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
     * // => logs each number and returns the object (property order is not guaranteed across environments)
     */
    function forEach(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        forOwn(collection, callback);
      }
      return collection;
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
     * // => logs each number from right to left and returns '3,2,1'
     */
    function forEachRight(collection, callback, thisArg) {
      var length = collection ? collection.length : 0;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (length--) {
          if (callback(collection[length], length, collection) === false) {
            break;
          }
        }
      } else {
        var props = keys(collection);
        length = props.length;
        forOwn(collection, function(value, key, collection) {
          key = props ? props[--length] : --length;
          return callback(collection[key], key, collection);
        });
      }
      return collection;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of a collection through the callback. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of the collection through the given callback. The corresponding
     * value of each key is the last element responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keys = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keys, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in the `collection`
     * returning an array of the results of each invoked method. Additional arguments
     * will be provided to each invoked method. If `methodName` is a function it
     * will be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [arg] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var args = slice(arguments, 2),
          index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in the collection
     * through the callback. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (property order is not guaranteed across environments)
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(characters, 'name');
     * // => ['barney', 'fred']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        var result = Array(length);
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        result = [];
        forOwn(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of a collection. If the collection is empty or
     * falsey `-Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.max(characters, function(chr) { return chr.age; });
     * // => { 'name': 'fred', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(characters, 'age');
     * // => { 'name': 'fred', 'age': 40 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of a collection. If the collection is empty or
     * falsey `Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.min(characters, function(chr) { return chr.age; });
     * // => { 'name': 'barney', 'age': 36 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(characters, 'age');
     * // => { 'name': 'barney', 'age': 36 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the collection.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} property The name of the property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(characters, 'name');
     * // => ['barney', 'fred']
     */
    var pluck = map;

    /**
     * Reduces a collection to a value which is the accumulated result of running
     * each element in the collection through the callback, where each successive
     * callback execution consumes the return value of the previous execution. If
     * `accumulator` is not provided the first element of the collection will be
     * used as the initial `accumulator` value. The callback is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      if (!collection) return accumulator;
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);

      var index = -1,
          length = collection.length;

      if (typeof length == 'number') {
        if (noaccum) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);
      forEachRight(collection, function(value, index, collection) {
        accumulator = noaccum
          ? (noaccum = false, value)
          : callback(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter` this method returns the elements of a
     * collection that the callback does **not** return truey for.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that failed the callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(characters, 'blocked');
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     *
     * // using "_.where" callback shorthand
     * _.reject(characters, { 'age': 36 });
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Retrieves a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Allows working with functions like `_.map`
     *  without using their `index` arguments as `n`.
     * @returns {Array} Returns the random sample(s) of `collection`.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (collection && typeof collection.length != 'number') {
        collection = values(collection);
      }
      if (n == null || guard) {
        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(nativeMax(0, n), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        var rand = baseRandom(0, ++index);
        result[index] = result[rand];
        result[rand] = value;
      });
      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the callback returns a truey value for **any** element of a
     * collection. The function returns as soon as it finds a passing value and
     * does not iterate over the entire collection. The callback is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if any element passed the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(characters, 'blocked');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(characters, { 'age': 1 });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through the callback. This method
     * performs a stable sort, that is, it will preserve the original sort order
     * of equal elements. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an array of property names is provided for `callback` the collection
     * will be sorted by each property value.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'barney',  'age': 26 },
     *   { 'name': 'fred',    'age': 30 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(_.sortBy(characters, 'age'), _.values);
     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
     *
     * // sorting by multiple properties
     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          isArr = isArray(callback),
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (!isArr) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      forEach(collection, function(value, key, collection) {
        var object = result[++index] = getObject();
        if (isArr) {
          object.criteria = map(callback, function(key) { return value[key]; });
        } else {
          (object.criteria = getArray())[0] = callback(value, key, collection);
        }
        object.index = index;
        object.value = value;
      });

      length = result.length;
      result.sort(compareAscending);
      while (length--) {
        var object = result[length];
        result[length] = object.value;
        if (!isArr) {
          releaseArray(object.criteria);
        }
        releaseObject(object);
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return slice(collection);
      }
      return values(collection);
    }

    /**
     * Performs a deep comparison of each element in a `collection` to the given
     * `properties` object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Object} props The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given properties.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.where(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
     *
     * _.where(characters, { 'pets': ['dino'] });
     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using strict
     * equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      return baseDifference(array, baseFlatten(arguments, true, true, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.findIndex(characters, function(chr) {
     *   return chr.age < 20;
     * });
     * // => 2
     *
     * // using "_.where" callback shorthand
     * _.findIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findIndex(characters, 'blocked');
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': true },
     *   { 'name': 'fred',    'age': 40, 'blocked': false },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
     * ];
     *
     * _.findLastIndex(characters, function(chr) {
     *   return chr.age > 30;
     * });
     * // => 1
     *
     * // using "_.where" callback shorthand
     * _.findLastIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findLastIndex(characters, 'blocked');
     * // => 2
     */
    function findLastIndex(array, callback, thisArg) {
      var length = array ? array.length : 0;
      callback = lodash.createCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element or first `n` elements of an array. If a callback
     * is provided elements at the beginning of the array are returned as long
     * as the callback returns truey. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(characters, 'blocked');
     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
     * // => ['barney', 'fred']
     */
    function first(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = -1;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[0] : undefined;
        }
      }
      return slice(array, 0, nativeMin(nativeMax(0, n), length));
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truey, the array will only be flattened a single level. If a callback
     * is provided each element of the array is passed through the callback before
     * flattening. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(characters, 'pets');
     * // => ['hoppy', 'baby puss', 'dino']
     */
    function flatten(array, isShallow, callback, thisArg) {
      // juggle arguments
      if (typeof isShallow != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;
        isShallow = false;
      }
      if (callback != null) {
        array = map(array, callback, thisArg);
      }
      return baseFlatten(array, isShallow);
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the array is already sorted
     * providing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      if (typeof fromIndex == 'number') {
        var length = array ? array.length : 0;
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
      } else if (fromIndex) {
        var index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element or last `n` elements of an array. If a
     * callback is provided elements at the end of the array are excluded from
     * the result as long as the callback returns truey. The callback is bound
     * to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(characters, 'blocked');
     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
     * // => ['barney', 'fred']
     */
    function initial(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
    }

    /**
     * Creates an array of unique values present in all provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = getArray(),
          indexOf = getIndexOf(),
          trustIndexOf = indexOf === baseIndexOf,
          seen = getArray();

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(trustIndexOf && value.length >= largeArraySize &&
            createCache(argsIndex ? args[argsIndex] : seen));
        }
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [];

      outer:
      while (++index < length) {
        var cache = caches[0];
        value = array[index];

        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
          argsIndex = argsLength;
          (cache || seen).push(value);
          while (--argsIndex) {
            cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
              continue outer;
            }
          }
          result.push(value);
        }
      }
      while (argsLength--) {
        cache = caches[argsLength];
        if (cache) {
          releaseObject(cache);
        }
      }
      releaseArray(caches);
      releaseArray(seen);
      return result;
    }

    /**
     * Gets the last element or last `n` elements of an array. If a callback is
     * provided elements at the end of the array are returned as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.last(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.last(characters, { 'employer': 'na' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function last(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[length - 1] : undefined;
        }
      }
      return slice(array, nativeMax(0, length - n));
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from the given array using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {...*} [value] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull(array) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          length = array ? array.length : 0;

      while (++argsIndex < argsLength) {
        var index = -1,
            value = args[argsIndex];
        while (++index < length) {
          if (array[index] === value) {
            splice.call(array, index--, 1);
            length--;
          }
        }
      }
      return array;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`. If `start` is less than `stop` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = typeof step == 'number' ? step : (+step || 1);

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / (step || 1))),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Removes all elements from an array that the callback returns truey for
     * and returns an array of removed elements. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4, 5, 6];
     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3, 5]
     *
     * console.log(evens);
     * // => [2, 4, 6]
     */
    function remove(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (callback(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * The opposite of `_.initial` this method gets all but the first element or
     * first `n` elements of an array. If a callback function is provided elements
     * at the beginning of the array are excluded from the result as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.rest(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.rest(characters, { 'employer': 'slate' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
      }
      return slice(array, n);
    }

    /**
     * Uses a binary search to determine the smallest index at which a value
     * should be inserted into a given sorted array in order to maintain the sort
     * order of the array. If a callback is provided it will be executed for
     * `value` and each element of `array` to compute their sort ranking. The
     * callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, true, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using strict equality
     * for comparisons, i.e. `===`. If the array is sorted, providing
     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
     * each element of `array` is passed through the callback before uniqueness
     * is computed. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
     * // => ['A', 'b', 'C']
     *
     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2.5, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      // juggle arguments
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
        isSorted = false;
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      return baseUniq(array, isSorted, callback);
    }

    /**
     * Creates an array excluding all provided values using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {...*} [value] The values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, slice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See http://en.wikipedia.org/wiki/Symmetric_difference.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))
            : array;
        }
      }
      return result || [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second
     * elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @alias unzip
     * @category Arrays
     * @param {...Array} [array] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var array = arguments.length > 1 ? arguments : arguments[0],
          index = -1,
          length = array ? max(pluck(array, 'length')) : 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = pluck(array, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Provide
     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      if (!values && length && !isArray(keys[0])) {
        values = [];
      }
      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that executes `func`, with  the `this` binding and
     * arguments of the created function, only after being called `n` times.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {number} n The number of times the function must be called before
     *  `func` is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('Done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'Done saving!', after all saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      return arguments.length > 2
        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
        : createWrapper(func, 1, null, null, thisArg);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all the function properties
     * of `object` will be bound.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...string} [methodName] The object method names to
     *  bind, specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = createWrapper(object[key], 1, null, null, object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those provided to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See http://michaux.ca/articles/lazy-function-definition-pattern.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi fred'
     *
     * object.greet = function(greeting) {
     *   return greeting + 'ya ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      return arguments.length > 2
        ? createWrapper(key, 19, slice(arguments, 2), null, object)
        : createWrapper(key, 3, null, null, object);
    }

    /**
     * Creates a function that is the composition of the provided functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {...Function} [func] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var realNameMap = {
     *   'pebbles': 'penelope'
     * };
     *
     * var format = function(name) {
     *   name = realNameMap[name.toLowerCase()] || name;
     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
     * };
     *
     * var greet = function(formatted) {
     *   return 'Hiya ' + formatted + '!';
     * };
     *
     * var welcome = _.compose(greet, format);
     * welcome('pebbles');
     * // => 'Hiya Penelope!'
     */
    function compose() {
      var funcs = arguments,
          length = funcs.length;

      while (length--) {
        if (!isFunction(funcs[length])) {
          throw new TypeError;
        }
      }
      return function() {
        var args = arguments,
            length = funcs.length;

        while (length--) {
          args = [funcs[length].apply(this, args)];
        }
        return args[0];
      };
    }

    /**
     * Creates a function which accepts one or more arguments of `func` that when
     * invoked either executes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` can be specified
     * if `func.length` is not sufficient.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var curried = _.curry(function(a, b, c) {
     *   console.log(a + b + c);
     * });
     *
     * curried(1)(2)(3);
     * // => 6
     *
     * curried(1, 2)(3);
     * // => 6
     *
     * curried(1, 2, 3);
     * // => 6
     */
    function curry(func, arity) {
      arity = typeof arity == 'number' ? arity : (+arity || func.length);
      return createWrapper(func, 4, null, null, null, arity);
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
     * to the debounced function will return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * var lazyLayout = _.debounce(calculateLayout, 150);
     * jQuery(window).on('resize', lazyLayout);
     *
     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * });
     *
     * // ensure `batchLog` is executed once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * source.addEventListener('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }, false);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      wait = nativeMax(0, wait) || 0;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      var delayed = function() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      };

      var maxDelayed = function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      };

      return function() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay execution.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it will be used to determine the cache key for storing the result
     * based on the arguments provided to the memoized function. By default, the
     * first argument provided to the memoized function is used as the cache key.
     * The `func` is executed with the `this` binding of the memoized function.
     * The result cache is exposed as the `cache` property on the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     *
     * fibonacci(9)
     * // => 34
     *
     * var data = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // modifying the result cache
     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
     * get('pebbles');
     * // => { 'name': 'pebbles', 'age': 1 }
     *
     * get.cache.pebbles.name = 'penelope';
     * get('pebbles');
     * // => { 'name': 'penelope', 'age': 1 }
     */
    function memoize(func, resolver) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];

        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      }
      memoized.cache = {};
      return memoized;
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those provided to the new function. This
     * method is similar to `_.bind` except it does **not** alter the `this` binding.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('fred');
     * // => 'hi fred'
     */
    function partial(func) {
      return createWrapper(func, 16, slice(arguments, 1));
    }

    /**
     * This method is like `_.partial` except that `partial` arguments are
     * appended to those provided to the new function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      return createWrapper(func, 32, null, slice(arguments, 1));
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. Provide an options object to
     * indicate that `func` should be invoked on the leading and/or trailing edge
     * of the `wait` timeout. Subsequent calls to the throttled function will
     * return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle executions to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     *
     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = wait;
      debounceOptions.trailing = trailing;

      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Additional arguments provided to the function are appended
     * to those provided to the wrapper function. The wrapper is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('Fred, Wilma, & Pebbles');
     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
     */
    function wrap(value, wrapper) {
      return createWrapper(wrapper, 16, [value]);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name the created callback will return the property value for a given element.
     * If `func` is an object the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(characters, 'age__gt38');
     * // => [{ 'name': 'fred', 'age': 40 }]
     */
    function createCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (func == null || type == 'function') {
        return baseCreateCallback(func, thisArg, argCount);
      }
      // handle "_.pluck" style callback shorthands
      if (type != 'object') {
        return property(func);
      }
      var props = keys(func),
          key = props[0],
          a = func[key];

      // handle "_.where" style callback shorthands
      if (props.length == 1 && a === a && !isObject(a)) {
        // fast path the common case of providing an object with a single
        // property containing a primitive value
        return function(object) {
          var b = object[key];
          return a === b && (a !== 0 || (1 / a == 1 / b));
        };
      }
      return function(object) {
        var length = props.length,
            result = false;

        while (length--) {
          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
            break;
          }
        }
        return result;
      };
    }

    /**
     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
     * corresponding HTML entities.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('Fred, Wilma, & Pebbles');
     * // => 'Fred, Wilma, &amp; Pebbles'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Adds function properties of a source object to the destination object.
     * If `object` is a function methods will be added to its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Function|Object} [object=lodash] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
     * @example
     *
     * function capitalize(string) {
     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
     * }
     *
     * _.mixin({ 'capitalize': capitalize });
     * _.capitalize('fred');
     * // => 'Fred'
     *
     * _('fred').capitalize().value();
     * // => 'Fred'
     *
     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
     * _('fred').capitalize();
     * // => 'Fred'
     */
    function mixin(object, source, options) {
      var chain = true,
          methodNames = source && functions(source);

      if (!source || (!options && !methodNames.length)) {
        if (options == null) {
          options = source;
        }
        ctor = lodashWrapper;
        source = object;
        object = lodash;
        methodNames = functions(source);
      }
      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      var ctor = object,
          isFunc = isFunction(ctor);

      forEach(methodNames, function(methodName) {
        var func = object[methodName] = source[methodName];
        if (isFunc) {
          ctor.prototype[methodName] = function() {
            var chainAll = this.__chain__,
                value = this.__wrapped__,
                args = [value];

            push.apply(args, arguments);
            var result = func.apply(object, args);
            if (chain || chainAll) {
              if (value === result && isObject(result)) {
                return this;
              }
              result = new ctor(result);
              result.__chain__ = chainAll;
            }
            return result;
          };
        }
      });
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // no operation performed
    }

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var stamp = _.now();
     * _.defer(function() { console.log(_.now() - stamp); });
     * // => logs the number of milliseconds it took for the deferred function to be called
     */
    var now = isNative(now = Date.now) && now || function() {
      return new Date().getTime();
    };

    /**
     * Converts the given value into an integer of the specified radix.
     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the
     * `value` is a hexadecimal, in which case a `radix` of `16` is used.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See http://es5.github.io/#E.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} value The value to parse.
     * @param {number} [radix] The radix used to interpret the value to parse.
     * @returns {number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`
      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
    };

    /**
     * Creates a "_.pluck" style function, which returns the `key` value of a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} key The name of the property to retrieve.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var getName = _.property('name');
     *
     * _.map(characters, getName);
     * // => ['barney', 'fred']
     *
     * _.sortBy(characters, getName);
     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
     */
    function property(key) {
      return function(object) {
        return object[key];
      };
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number will be
     * returned. If `floating` is truey or either `min` or `max` are floats a
     * floating-point number will be returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating=false] Specify returning a floating-point number.
     * @returns {number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (typeof min == 'boolean' && noMax) {
          floating = min;
          min = 1;
        }
        else if (!noMax && typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /**
     * Resolves the value of property `key` on `object`. If `key` is a function
     * it will be invoked with the `this` binding of `object` and its result returned,
     * else the property value is returned. If `object` is falsey then `undefined`
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to resolve.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'cheese': 'crumpets',
     *   'stuff': function() {
     *     return 'nonsense';
     *   }
     * };
     *
     * _.result(object, 'cheese');
     * // => 'crumpets'
     *
     * _.result(object, 'stuff');
     * // => 'nonsense'
     */
    function result(object, key) {
      if (object) {
        var value = object[key];
        return isFunction(value) ? object[key]() : value;
      }
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
     *
     * For more information on precompiling templates see:
     * http://lodash.com/custom-builds
     *
     * For more information on Chrome extension sandboxes see:
     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} text The template text.
     * @param {Object} data The data object used to populate the text.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as local variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [variable] The data object variable name.
     * @returns {Function|string} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'fred' });
     * // => 'hello fred'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to generate HTML
     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'pebbles' });
     * // => 'hello pebbles'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
     * // => 'hello barney!'
     *
     * // using a custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `imports` option to import jQuery
     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text = String(text || '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = defaults({}, options, settings);

      var imports = defaults({}, options.imports, settings.imports),
          importsKeys = keys(imports),
          importsValues = values(imports);

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source by its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Executes the callback `n` times, returning an array of the results
     * of each callback execution. The callback is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns an array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = baseCreateCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * The inverse of `_.escape` this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('Fred, Barney &amp; Pebbles');
     * // => 'Fred, Barney & Pebbles'
     */
    function unescape(string) {
      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps the given value with explicit
     * method chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(characters)
     *     .sortBy('age')
     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
     *     .first()
     *     .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      value = new lodashWrapper(value);
      value.__chain__ = true;
      return value;
    }

    /**
     * Invokes `interceptor` with the `value` as the first argument and then
     * returns `value`. The purpose of this method is to "tap into" a method
     * chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [3, 2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chaining
     * @returns {*} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(characters).first();
     * // => { 'name': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(characters).chain()
     *   .first()
     *   .pick('age')
     *   .value();
     * // => { 'age': 36 }
     */
    function wrapperChain() {
      this.__chain__ = true;
      return this;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {string} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {*} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.createCallback = createCallback;
    lodash.curry = curry;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.pull = pull;
    lodash.range = range;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;
    lodash.unzip = zip;

    // add functions to `lodash.prototype`
    mixin(lodash);

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.findWhere = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    mixin(function() {
      var source = {}
      forOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }(), false);

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;
    lodash.sample = sample;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    forOwn(lodash, function(func, methodName) {
      var callbackable = methodName !== 'sample';
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(n, guard) {
          var chainAll = this.__chain__,
              result = func(this.__wrapped__, n, guard);

          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
            ? result
            : new lodashWrapper(result, chainAll);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = '2.4.1';

    // add "Chaining" functions to the wrapper
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    forEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        var chainAll = this.__chain__,
            result = func.apply(this.__wrapped__, arguments);

        return chainAll
          ? new lodashWrapper(result, chainAll)
          : result;
      };
    });

    // add `Array` functions that return the existing wrapped value
    forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    forEach(['concat', 'slice', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
      };
    });

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash is loaded with a RequireJS shim config.
    // See http://requirejs.org/docs/api.html#config-shim
    root._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define(function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or Rhino -require
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],17:[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && !isFinite(value)) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b)) {
    return a === b;
  }
  var aIsArgs = isArguments(a),
      bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  var ka = objectKeys(a),
      kb = objectKeys(b),
      key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":21}],18:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],19:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

(function () {
    try {
        cachedSetTimeout = setTimeout;
    } catch (e) {
        cachedSetTimeout = function () {
            throw new Error('setTimeout is not defined');
        }
    }
    try {
        cachedClearTimeout = clearTimeout;
    } catch (e) {
        cachedClearTimeout = function () {
            throw new Error('clearTimeout is not defined');
        }
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],20:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],21:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":20,"_process":19,"inherits":18}],22:[function(require,module,exports){
module.exports={"GLASS":"M61.164-57.743q0 1.26-1.548 2.808l-22.752 22.752v27.648h11.52q.936 0 1.62.684t.684 1.62-.684 1.62-1.62.684h-32.256q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684h11.52v-27.648l-22.752-22.752q-1.548-1.548-1.548-2.808 0-.828.648-1.314t1.368-.63 1.548-.144h50.688q.828 0 1.548.144t1.368.63.648 1.314z","MUSIC":"M55.296-56.375v40.32q0 1.8-1.224 3.204t-3.096 2.178-3.726 1.152-3.474.378-3.474-.378-3.726-1.152-3.096-2.178-1.224-3.204 1.224-3.204 3.096-2.178 3.726-1.152 3.474-.378q3.78 0 6.912 1.404v-19.332l-27.648 8.532v25.524q0 1.8-1.224 3.204t-3.096 2.178-3.726 1.152-3.474.378-3.474-.378-3.726-1.152-3.096-2.178-1.224-3.204 1.224-3.204 3.096-2.178 3.726-1.152 3.474-.378q3.78 0 6.912 1.404v-34.812q0-1.116.684-2.034t1.764-1.278l29.952-9.216q.432-.144 1.008-.144 1.44 0 2.448 1.008t1.008 2.448z","SEARCH":"M41.472-34.487q0-6.66-4.734-11.394t-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734 11.394-4.734 4.734-11.394zm18.432 29.952q0 1.872-1.368 3.24t-3.24 1.368q-1.944 0-3.24-1.368l-12.348-12.312q-6.444 4.464-14.364 4.464-5.148 0-9.846-1.998t-8.1-5.4-5.4-8.1-1.998-9.846 1.998-9.846 5.4-8.1 8.1-5.4 9.846-1.998 9.846 1.998 8.1 5.4 5.4 8.1 1.998 9.846q0 7.92-4.464 14.364l12.348 12.348q1.332 1.332 1.332 3.24z","ENVELOPE_O":"M59.904-10.295v-27.648q-1.152 1.296-2.484 2.376-9.648 7.416-15.336 12.168-1.836 1.548-2.988 2.412t-3.114 1.746-3.69.882h-.072q-1.728 0-3.69-.882t-3.114-1.746-2.988-2.412q-5.688-4.752-15.336-12.168-1.332-1.08-2.484-2.376v27.648q0 .468.342.81t.81.342h52.992q.468 0 .81-.342t.342-.81zm0-37.836v-.882l-.018-.468-.108-.45-.198-.324-.324-.27-.504-.09h-52.992q-.468 0-.81.342t-.342.81q0 6.048 5.292 10.224 6.948 5.472 14.436 11.412.216.18 1.26 1.062t1.656 1.35 1.602 1.134 1.818.99 1.548.324h.072q.72 0 1.548-.324t1.818-.99 1.602-1.134 1.656-1.35 1.26-1.062q7.488-5.94 14.436-11.412 1.944-1.548 3.618-4.158t1.674-4.734zm4.608-1.332v39.168q0 2.376-1.692 4.068t-4.068 1.692h-52.992q-2.376 0-4.068-1.692t-1.692-4.068v-39.168q0-2.376 1.692-4.068t4.068-1.692h52.992q2.376 0 4.068 1.692t1.692 4.068z","HEART":"M32.256-4.535q-.936 0-1.584-.648l-22.464-21.672q-.36-.288-.99-.936t-1.998-2.358-2.448-3.51-1.926-4.356-.846-4.968q0-7.92 4.572-12.384t12.636-4.464q2.232 0 4.554.774t4.32 2.088 3.438 2.466 2.736 2.448q1.296-1.296 2.736-2.448t3.438-2.466 4.32-2.088 4.554-.774q8.064 0 12.636 4.464t4.572 12.384q0 7.956-8.244 16.2l-22.428 21.6q-.648.648-1.584.648z","STAR":"M59.904-41.147q0 .792-.936 1.728l-13.068 12.744 3.096 18q.036.252.036.72 0 .756-.378 1.278t-1.098.522q-.684 0-1.44-.432l-16.164-8.496-16.164 8.496q-.792.432-1.44.432-.756 0-1.134-.522t-.378-1.278q0-.216.072-.72l3.096-18-13.104-12.744q-.9-.972-.9-1.728 0-1.332 2.016-1.656l18.072-2.628 8.1-16.38q.684-1.476 1.764-1.476t1.764 1.476l8.1 16.38 18.072 2.628q2.016.324 2.016 1.656z","STAR_O":"M40.932-28.295l11.016-10.692-15.192-2.232-6.804-13.752-6.804 13.752-15.192 2.232 11.016 10.692-2.628 15.156 13.608-7.164 13.572 7.164zm18.972-12.852q0 .792-.936 1.728l-13.068 12.744 3.096 18q.036.252.036.72 0 1.8-1.476 1.8-.684 0-1.44-.432l-16.164-8.496-16.164 8.496q-.792.432-1.44.432-.756 0-1.134-.522t-.378-1.278q0-.216.072-.72l3.096-18-13.104-12.744q-.9-.972-.9-1.728 0-1.332 2.016-1.656l18.072-2.628 8.1-16.38q.684-1.476 1.764-1.476t1.764 1.476l8.1 16.38 18.072 2.628q2.016.324 2.016 1.656z","USER":"M50.688-13.859q0 4.32-2.628 6.822t-6.984 2.502h-31.464q-4.356 0-6.984-2.502t-2.628-6.822q0-1.908.126-3.726t.504-3.924.954-3.906 1.548-3.51 2.232-2.916 3.078-1.926 4.014-.72q.324 0 1.512.774t2.682 1.728 3.888 1.728 4.806.774 4.806-.774 3.888-1.728 2.682-1.728 1.512-.774q2.196 0 4.014.72t3.078 1.926 2.232 2.916 1.548 3.51.954 3.906.504 3.924.126 3.726zm-11.52-32.148q0 5.724-4.05 9.774t-9.774 4.05-9.774-4.05-4.05-9.774 4.05-9.774 9.774-4.05 9.774 4.05 4.05 9.774z","FILM":"M13.824-6.839v-4.608q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62zm0-13.824v-4.608q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62zm0-13.824v-4.608q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62zm36.864 27.648v-18.432q0-.936-.684-1.62t-1.62-.684h-27.648q-.936 0-1.62.684t-.684 1.62v18.432q0 .936.684 1.62t1.62.684h27.648q.936 0 1.62-.684t.684-1.62zm-36.864-41.472v-4.608q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62zm50.688 41.472v-4.608q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62zm-13.824-27.648v-18.432q0-.936-.684-1.62t-1.62-.684h-27.648q-.936 0-1.62.684t-.684 1.62v18.432q0 .936.684 1.62t1.62.684h27.648q.936 0 1.62-.684t.684-1.62zm13.824 13.824v-4.608q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62zm0-13.824v-4.608q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62zm0-13.824v-4.608q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62zm4.608-5.76v48.384q0 2.376-1.692 4.068t-4.068 1.692h-57.6q-2.376 0-4.068-1.692t-1.692-4.068v-48.384q0-2.376 1.692-4.068t4.068-1.692h57.6q2.376 0 4.068 1.692t1.692 4.068z","TH_LARGE":"M27.648-27.575v13.824q0 1.872-1.368 3.24t-3.24 1.368h-18.432q-1.872 0-3.24-1.368t-1.368-3.24v-13.824q0-1.872 1.368-3.24t3.24-1.368h18.432q1.872 0 3.24 1.368t1.368 3.24zm0-27.648v13.824q0 1.872-1.368 3.24t-3.24 1.368h-18.432q-1.872 0-3.24-1.368t-1.368-3.24v-13.824q0-1.872 1.368-3.24t3.24-1.368h18.432q1.872 0 3.24 1.368t1.368 3.24zm32.256 27.648v13.824q0 1.872-1.368 3.24t-3.24 1.368h-18.432q-1.872 0-3.24-1.368t-1.368-3.24v-13.824q0-1.872 1.368-3.24t3.24-1.368h18.432q1.872 0 3.24 1.368t1.368 3.24zm0-27.648v13.824q0 1.872-1.368 3.24t-3.24 1.368h-18.432q-1.872 0-3.24-1.368t-1.368-3.24v-13.824q0-1.872 1.368-3.24t3.24-1.368h18.432q1.872 0 3.24 1.368t1.368 3.24z","TH":"M18.432-19.511v6.912q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448zm0-18.432v6.912q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448zm23.04 18.432v6.912q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448zm-23.04-36.864v6.912q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448zm23.04 18.432v6.912q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448zm23.04 18.432v6.912q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448zm-23.04-36.864v6.912q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448zm23.04 18.432v6.912q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448zm0-18.432v6.912q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448z","TH_LIST":"M18.432-19.511v6.912q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448zm0-18.432v6.912q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448zm46.08 18.432v6.912q0 1.44-1.008 2.448t-2.448 1.008h-34.56q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h34.56q1.44 0 2.448 1.008t1.008 2.448zm-46.08-36.864v6.912q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448zm46.08 18.432v6.912q0 1.44-1.008 2.448t-2.448 1.008h-34.56q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h34.56q1.44 0 2.448 1.008t1.008 2.448zm0-18.432v6.912q0 1.44-1.008 2.448t-2.448 1.008h-34.56q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h34.56q1.44 0 2.448 1.008t1.008 2.448z","CHECK":"M60.156-44.063q0 1.44-1.008 2.448l-26.064 26.064-4.896 4.896q-1.008 1.008-2.448 1.008t-2.448-1.008l-4.896-4.896-13.032-13.032q-1.008-1.008-1.008-2.448t1.008-2.448l4.896-4.896q1.008-1.008 2.448-1.008t2.448 1.008l10.584 10.62 23.616-23.652q1.008-1.008 2.448-1.008t2.448 1.008l4.896 4.896q1.008 1.008 1.008 2.448z","TIMES":"M46.728-16.847q0 1.44-1.008 2.448l-4.896 4.896q-1.008 1.008-2.448 1.008t-2.448-1.008l-10.584-10.584-10.584 10.584q-1.008 1.008-2.448 1.008t-2.448-1.008l-4.896-4.896q-1.008-1.008-1.008-2.448t1.008-2.448l10.584-10.584-10.584-10.584q-1.008-1.008-1.008-2.448t1.008-2.448l4.896-4.896q1.008-1.008 2.448-1.008t2.448 1.008l10.584 10.584 10.584-10.584q1.008-1.008 2.448-1.008t2.448 1.008l4.896 4.896q1.008 1.008 1.008 2.448t-1.008 2.448l-10.584 10.584 10.584 10.584q1.008 1.008 1.008 2.448z","SEARCH_PLUS":"M36.864-35.639v2.304q0 .468-.342.81t-.81.342h-8.064v8.064q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-8.064h-8.064q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h8.064v-8.064q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81v8.064h8.064q.468 0 .81.342t.342.81zm4.608 1.152q0-6.66-4.734-11.394t-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734 11.394-4.734 4.734-11.394zm18.432 29.952q0 1.908-1.35 3.258t-3.258 1.35q-1.944 0-3.24-1.368l-12.348-12.312q-6.444 4.464-14.364 4.464-5.148 0-9.846-1.998t-8.1-5.4-5.4-8.1-1.998-9.846 1.998-9.846 5.4-8.1 8.1-5.4 9.846-1.998 9.846 1.998 8.1 5.4 5.4 8.1 1.998 9.846q0 7.92-4.464 14.364l12.348 12.348q1.332 1.332 1.332 3.24z","SEARCH_MINUS":"M36.864-35.639v2.304q0 .468-.342.81t-.81.342h-20.736q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h20.736q.468 0 .81.342t.342.81zm4.608 1.152q0-6.66-4.734-11.394t-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734 11.394-4.734 4.734-11.394zm18.432 29.952q0 1.908-1.35 3.258t-3.258 1.35q-1.944 0-3.24-1.368l-12.348-12.312q-6.444 4.464-14.364 4.464-5.148 0-9.846-1.998t-8.1-5.4-5.4-8.1-1.998-9.846 1.998-9.846 5.4-8.1 8.1-5.4 9.846-1.998 9.846 1.998 8.1 5.4 5.4 8.1 1.998 9.846q0 7.92-4.464 14.364l12.348 12.348q1.332 1.332 1.332 3.24z","POWER_OFF":"M55.296-32.183q0 5.616-2.196 10.728t-5.904 8.82-8.82 5.904-10.728 2.196-10.728-2.196-8.82-5.904-5.904-8.82-2.196-10.728q0-6.552 2.898-12.348t8.154-9.72q1.548-1.152 3.438-.9t3.006 1.8q1.152 1.512.882 3.402t-1.782 3.042q-3.528 2.664-5.454 6.516t-1.926 8.208q0 3.744 1.458 7.146t3.942 5.886 5.886 3.942 7.146 1.458 7.146-1.458 5.886-3.942 3.942-5.886 1.458-7.146q0-4.356-1.926-8.208t-5.454-6.516q-1.512-1.152-1.782-3.042t.882-3.402q1.116-1.548 3.024-1.8t3.42.9q5.256 3.924 8.154 9.72t2.898 12.348zm-23.04-27.648v23.04q0 1.872-1.368 3.24t-3.24 1.368-3.24-1.368-1.368-3.24v-23.04q0-1.872 1.368-3.24t3.24-1.368 3.24 1.368 1.368 3.24z","SIGNAL":"M9.216-12.599v6.912q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm13.824-4.608v11.52q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-11.52q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm13.824-9.216v20.736q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-20.736q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm13.824-13.824v34.56q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-34.56q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm13.824-18.432v52.992q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-52.992q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828z","GEAR":"M36.864-32.183q0-3.816-2.7-6.516t-6.516-2.7-6.516 2.7-2.7 6.516 2.7 6.516 6.516 2.7 6.516-2.7 2.7-6.516zm18.432-3.924v7.992q0 .432-.288.828t-.72.468l-6.66 1.008q-.684 1.944-1.404 3.276 1.26 1.8 3.852 4.968.36.432.36.9t-.324.828q-.972 1.332-3.564 3.888t-3.384 2.556q-.432 0-.936-.324l-4.968-3.888q-1.584.828-3.276 1.368-.576 4.896-1.044 6.696-.252 1.008-1.296 1.008h-7.992q-.504 0-.882-.306t-.414-.774l-1.008-6.624q-1.764-.576-3.24-1.332l-5.076 3.852q-.36.324-.9.324-.504 0-.9-.396-4.536-4.104-5.94-6.048-.252-.36-.252-.828 0-.432.288-.828.54-.756 1.836-2.394t1.944-2.538q-.972-1.8-1.476-3.564l-6.588-.972q-.468-.072-.756-.45t-.288-.846v-7.992q0-.432.288-.828t.684-.468l6.696-1.008q.504-1.656 1.404-3.312-1.44-2.052-3.852-4.968-.36-.432-.36-.864 0-.36.324-.828.936-1.296 3.546-3.87t3.402-2.574q.468 0 .936.36l4.968 3.852q1.584-.828 3.276-1.368.576-4.896 1.044-6.696.252-1.008 1.296-1.008h7.992q.504 0 .882.306t.414.774l1.008 6.624q1.764.576 3.24 1.332l5.112-3.852q.324-.324.864-.324.468 0 .9.36 4.644 4.284 5.94 6.12.252.288.252.792 0 .432-.288.828-.54.756-1.836 2.394t-1.944 2.538q.936 1.8 1.476 3.528l6.588 1.008q.468.072.756.45t.288.846z","TRASH_O":"M18.432-37.943v20.736q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-20.736q0-.504.324-.828t.828-.324h2.304q.504 0 .828.324t.324.828zm9.216 0v20.736q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-20.736q0-.504.324-.828t.828-.324h2.304q.504 0 .828.324t.324.828zm9.216 0v20.736q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-20.736q0-.504.324-.828t.828-.324h2.304q.504 0 .828.324t.324.828zm4.608 26.064v-34.128h-32.256v34.128q0 .792.252 1.458t.522.972.378.306h29.952q.108 0 .378-.306t.522-.972.252-1.458zm-24.192-38.736h16.128l-1.728-4.212q-.252-.324-.612-.396h-11.412q-.36.072-.612.396zm33.408 1.152v2.304q0 .504-.324.828t-.828.324h-3.456v34.128q0 2.988-1.692 5.166t-4.068 2.178h-29.952q-2.376 0-4.068-2.106t-1.692-5.094v-34.272h-3.456q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h11.124l2.52-6.012q.54-1.332 1.944-2.268t2.844-.936h11.52q1.44 0 2.844.936t1.944 2.268l2.52 6.012h11.124q.504 0 .828.324t.324.828z","HOME":"M50.688-28.727v17.28q0 .936-.684 1.62t-1.62.684h-13.824v-13.824h-9.216v13.824h-13.824q-.936 0-1.62-.684t-.684-1.62v-17.28l.018-.108.018-.108 20.7-17.064 20.7 17.064q.036.072.036.216zm8.028-2.484l-2.232 2.664q-.288.324-.756.396h-.108q-.468 0-.756-.252l-24.912-20.772-24.912 20.772q-.432.288-.864.252-.468-.072-.756-.396l-2.232-2.664q-.288-.36-.252-.846t.396-.774l25.884-21.564q1.152-.936 2.736-.936t2.736.936l8.784 7.344v-7.02q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828v14.688l7.884 6.552q.36.288.396.774t-.252.846z","FILE_O":"M52.848-50.759q1.008 1.008 1.728 2.736t.72 3.168v41.472q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h32.256q1.44 0 3.168.72t2.736 1.728zm-15.984-8.784v13.536h13.536q-.36-1.044-.792-1.476l-11.268-11.268q-.432-.432-1.476-.792zm13.824 55.008v-36.864h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-27.648v55.296h46.08z","CLOCK_O":"M32.256-44.855v16.128q0 .504-.324.828t-.828.324h-11.52q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h8.064v-12.672q0-.504.324-.828t.828-.324h2.304q.504 0 .828.324t.324.828zm14.976 12.672q0-5.328-2.628-9.828t-7.128-7.128-9.828-2.628-9.828 2.628-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628 9.828-2.628 7.128-7.128 2.628-9.828zm8.064 0q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","ROAD":"M39.996-28.583v-.144l-.864-11.52q-.036-.468-.396-.81t-.828-.342h-6.696q-.468 0-.828.342t-.396.81l-.864 11.52v.144q-.036.432.288.72t.756.288h8.784q.432 0 .756-.288t.288-.72zm27.324 16.812q0 2.628-1.656 2.628h-25.344q.468 0 .792-.342t.288-.81l-.72-9.216q-.036-.468-.396-.81t-.828-.342h-9.792q-.468 0-.828.342t-.396.81l-.72 9.216q-.036.468.288.81t.792.342h-25.344q-1.656 0-1.656-2.628 0-1.944.936-4.176l15.012-37.584q.288-.684.936-1.188t1.368-.504h12.204q-.468 0-.828.342t-.396.81l-.54 6.912q-.036.504.288.828t.792.324h5.976q.468 0 .792-.324t.288-.828l-.54-6.912q-.036-.468-.396-.81t-.828-.342h12.204q.72 0 1.368.504t.936 1.188l15.012 37.584q.936 2.232.936 4.176z","DOWNLOAD":"M46.08-16.055q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm9.216 0q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm4.608-8.064v11.52q0 1.44-1.008 2.448t-2.448 1.008h-52.992q-1.44 0-2.448-1.008t-1.008-2.448v-11.52q0-1.44 1.008-2.448t2.448-1.008h16.74l4.86 4.896q2.088 2.016 4.896 2.016t4.896-2.016l4.896-4.896h16.704q1.44 0 2.448 1.008t1.008 2.448zm-11.7-20.484q.612 1.476-.504 2.52l-16.128 16.128q-.648.684-1.62.684t-1.62-.684l-16.128-16.128q-1.116-1.044-.504-2.52.612-1.404 2.124-1.404h9.216v-16.128q0-.936.684-1.62t1.62-.684h9.216q.936 0 1.62.684t.684 1.62v16.128h9.216q1.512 0 2.124 1.404z","ARROW_CIRCLE_O_DOWN":"M40.32-31.031q0 .432-.36.864l-11.484 11.484q-.396.324-.828.324t-.828-.324l-11.52-11.52q-.54-.576-.252-1.26.288-.72 1.08-.72h6.912v-12.672q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828v12.672h6.912q.504 0 .828.324t.324.828zm-12.672-20.736q-5.328 0-9.828 2.628t-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628 9.828-2.628 7.128-7.128 2.628-9.828-2.628-9.828-7.128-7.128-9.828-2.628zm27.648 19.584q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","ARROW_CIRCLE_O_UP":"M40.248-32.903q-.288.72-1.08.72h-6.912v12.672q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-12.672h-6.912q-.504 0-.828-.324t-.324-.828q0-.432.36-.864l11.484-11.484q.396-.324.828-.324t.828.324l11.52 11.52q.54.576.252 1.26zm-12.6-18.864q-5.328 0-9.828 2.628t-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628 9.828-2.628 7.128-7.128 2.628-9.828-2.628-9.828-7.128-7.128-9.828-2.628zm27.648 19.584q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","INBOX":"M36.828-29.879h11.376l-.09-.288-.09-.288-7.632-17.856h-25.488l-7.632 17.856-.09.288-.09.288h11.376l3.42 6.912h11.52zm18.468 1.08v17.352q0 .936-.684 1.62t-1.62.684h-50.688q-.936 0-1.62-.684t-.684-1.62v-17.352q0-2.232.9-4.428l8.568-19.872q.36-.9 1.314-1.512t1.89-.612h29.952q.936 0 1.89.612t1.314 1.512l8.568 19.872q.9 2.196.9 4.428z","PLAY_CIRCLE_O":"M42.624-32.183q0 1.332-1.152 1.98l-19.584 11.52q-.54.324-1.152.324-.576 0-1.152-.288-1.152-.684-1.152-2.016v-23.04q0-1.332 1.152-2.016 1.188-.648 2.304.036l19.584 11.52q1.152.648 1.152 1.98zm4.608 0q0-5.328-2.628-9.828t-7.128-7.128-9.828-2.628-9.828 2.628-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628 9.828-2.628 7.128-7.128 2.628-9.828zm8.064 0q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","ROTATE_RIGHT":"M55.296-55.223v16.128q0 .936-.684 1.62t-1.62.684h-16.128q-1.512 0-2.124-1.44-.612-1.404.504-2.484l4.968-4.968q-5.328-4.932-12.564-4.932-3.744 0-7.146 1.458t-5.886 3.942-3.942 5.886-1.458 7.146 1.458 7.146 3.942 5.886 5.886 3.942 7.146 1.458q4.284 0 8.1-1.872t6.444-5.292q.252-.36.828-.432.504 0 .9.324l4.932 4.968q.324.288.342.738t-.27.81q-3.924 4.752-9.504 7.362t-11.772 2.61q-5.616 0-10.728-2.196t-8.82-5.904-5.904-8.82-2.196-10.728 2.196-10.728 5.904-8.82 8.82-5.904 10.728-2.196q5.292 0 10.242 1.998t8.802 5.634l4.68-4.644q1.044-1.116 2.52-.504 1.404.612 1.404 2.124z","REFRESH":"M54.396-26.423q0 .18-.036.252-2.304 9.648-9.648 15.642t-17.208 5.994q-5.256 0-10.17-1.98t-8.766-5.652l-4.644 4.644q-.684.684-1.62.684t-1.62-.684-.684-1.62v-16.128q0-.936.684-1.62t1.62-.684h16.128q.936 0 1.62.684t.684 1.62-.684 1.62l-4.932 4.932q2.556 2.376 5.796 3.672t6.732 1.296q4.824 0 9-2.34t6.696-6.444q.396-.612 1.908-4.212.288-.828 1.08-.828h6.912q.468 0 .81.342t.342.81zm.9-28.8v16.128q0 .936-.684 1.62t-1.62.684h-16.128q-.936 0-1.62-.684t-.684-1.62.684-1.62l4.968-4.968q-5.328-4.932-12.564-4.932-4.824 0-9 2.34t-6.696 6.444q-.396.612-1.908 4.212-.288.828-1.08.828h-7.164q-.468 0-.81-.342t-.342-.81v-.252q2.34-9.648 9.72-15.642t17.28-5.994q5.256 0 10.224 1.998t8.82 5.634l4.68-4.644q.684-.684 1.62-.684t1.62.684.684 1.62z","LIST_ALT":"M13.824-21.815v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm0-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm0-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm41.472 18.432v2.304q0 .468-.342.81t-.81.342h-34.56q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h34.56q.468 0 .81.342t.342.81zm0-9.216v2.304q0 .468-.342.81t-.81.342h-34.56q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h34.56q.468 0 .81.342t.342.81zm0-9.216v2.304q0 .468-.342.81t-.81.342h-34.56q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h34.56q.468 0 .81.342t.342.81zm4.608 25.344v-29.952q0-.468-.342-.81t-.81-.342h-52.992q-.468 0-.81.342t-.342.81v29.952q0 .468.342.81t.81.342h52.992q.468 0 .81-.342t.342-.81zm4.608-39.168v39.168q0 2.376-1.692 4.068t-4.068 1.692h-52.992q-2.376 0-4.068-1.692t-1.692-4.068v-39.168q0-2.376 1.692-4.068t4.068-1.692h52.992q2.376 0 4.068 1.692t1.692 4.068z","LOCK":"M11.52-36.791h18.432v-6.912q0-3.816-2.7-6.516t-6.516-2.7-6.516 2.7-2.7 6.516v6.912zm29.952 3.456v20.736q0 1.44-1.008 2.448t-2.448 1.008h-34.56q-1.44 0-2.448-1.008t-1.008-2.448v-20.736q0-1.44 1.008-2.448t2.448-1.008h1.152v-6.912q0-6.624 4.752-11.376t11.376-4.752 11.376 4.752 4.752 11.376v6.912h1.152q1.44 0 2.448 1.008t1.008 2.448z","FLAG":"M11.52-55.223q0 2.592-2.304 3.96v45.576q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-45.576q-2.304-1.368-2.304-3.96 0-1.908 1.35-3.258t3.258-1.35 3.258 1.35 1.35 3.258zm52.992 2.304v27.468q0 .9-.45 1.386t-1.422.99q-7.74 4.176-13.284 4.176-2.196 0-4.446-.792t-3.906-1.728-4.158-1.728-5.13-.792q-6.912 0-16.704 5.256-.612.324-1.188.324-.936 0-1.62-.684t-.684-1.62v-26.712q0-1.152 1.116-1.98.756-.504 2.844-1.548 8.496-4.32 15.156-4.32 3.852 0 7.2 1.044t7.884 3.168q1.368.684 3.168.684 1.944 0 4.23-.756t3.96-1.692 3.168-1.692 1.962-.756q.936 0 1.62.684t.684 1.62z","HEADPHONES":"M59.904-32.543q0 5.976-2.16 11.304l-.72 1.764-6.66 1.188q-.792 2.988-3.258 4.914t-5.634 1.926v1.152q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-20.736q0-.504.324-.828t.828-.324h2.304q.504 0 .828.324t.324.828v1.152q2.556 0 4.68 1.278t3.348 3.438l2.448-.432q1.044-3.42 1.044-6.948 0-5.328-3.168-10.044t-8.514-7.524-11.358-2.808-11.358 2.808-8.514 7.524-3.168 10.044q0 3.528 1.044 6.948l2.448.432q1.224-2.16 3.348-3.438t4.68-1.278v-1.152q0-.504.324-.828t.828-.324h2.304q.504 0 .828.324t.324.828v20.736q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-1.152q-3.168 0-5.634-1.926t-3.258-4.914l-6.66-1.188-.72-1.764q-2.16-5.328-2.16-11.304 0-5.436 2.412-10.476t6.444-8.73 9.576-5.886 11.52-2.196 11.52 2.196 9.576 5.886 6.444 8.73 2.412 10.476z","VOLUME_OFF":"M27.648-51.767v39.168q0 .936-.684 1.62t-1.62.684-1.62-.684l-11.988-11.988h-9.432q-.936 0-1.62-.684t-.684-1.62v-13.824q0-.936.684-1.62t1.62-.684h9.432l11.988-11.988q.684-.684 1.62-.684t1.62.684.684 1.62z","VOLUME_DOWN":"M27.648-51.767v39.168q0 .936-.684 1.62t-1.62.684-1.62-.684l-11.988-11.988h-9.432q-.936 0-1.62-.684t-.684-1.62v-13.824q0-.936.684-1.62t1.62-.684h9.432l11.988-11.988q.684-.684 1.62-.684t1.62.684.684 1.62zm13.824 19.584q0 2.736-1.53 5.094t-4.05 3.366q-.36.18-.9.18-.936 0-1.62-.666t-.684-1.638q0-.756.432-1.278t1.044-.9 1.224-.828 1.044-1.278.432-2.052-.432-2.052-1.044-1.278-1.224-.828-1.044-.9-.432-1.278q0-.972.684-1.638t1.62-.666q.54 0 .9.18 2.52.972 4.05 3.348t1.53 5.112z","VOLUME_UP":"M27.648-51.767v39.168q0 .936-.684 1.62t-1.62.684-1.62-.684l-11.988-11.988h-9.432q-.936 0-1.62-.684t-.684-1.62v-13.824q0-.936.684-1.62t1.62-.684h9.432l11.988-11.988q.684-.684 1.62-.684t1.62.684.684 1.62zm13.824 19.584q0 2.736-1.53 5.094t-4.05 3.366q-.36.18-.9.18-.936 0-1.62-.666t-.684-1.638q0-.756.432-1.278t1.044-.9 1.224-.828 1.044-1.278.432-2.052-.432-2.052-1.044-1.278-1.224-.828-1.044-.9-.432-1.278q0-.972.684-1.638t1.62-.666q.54 0 .9.18 2.52.972 4.05 3.348t1.53 5.112zm9.216 0q0 5.508-3.06 10.17t-8.1 6.786q-.468.18-.9.18-.972 0-1.656-.684t-.684-1.62q0-1.404 1.404-2.124 2.016-1.044 2.736-1.584 2.664-1.944 4.158-4.878t1.494-6.246-1.494-6.246-4.158-4.878q-.72-.54-2.736-1.584-1.404-.72-1.404-2.124 0-.936.684-1.62t1.62-.684q.468 0 .936.18 5.04 2.124 8.1 6.786t3.06 10.17zm9.216 0q0 8.28-4.572 15.21t-12.168 10.206q-.468.18-.936.18-.936 0-1.62-.684t-.684-1.62q0-1.296 1.404-2.124.252-.144.81-.378t.81-.378q1.656-.9 2.952-1.836 4.428-3.276 6.912-8.172t2.484-10.404-2.484-10.404-6.912-8.172q-1.296-.936-2.952-1.836-.252-.144-.81-.378t-.81-.378q-1.404-.828-1.404-2.124 0-.936.684-1.62t1.62-.684q.468 0 .936.18 7.596 3.276 12.168 10.206t4.572 15.21z","QRCODE":"M13.824-22.967v4.608h-4.608v-4.608h4.608zm0-27.648v4.608h-4.608v-4.608h4.608zm27.648 0v4.608h-4.608v-4.608h4.608zm-36.864 36.828h13.824v-13.788h-13.824v13.788zm0-27.612h13.824v-13.824h-13.824v13.824zm27.648 0h13.824v-13.824h-13.824v13.824zm-9.216 9.216v23.04h-23.04v-23.04h23.04zm18.432 18.432v4.608h-4.608v-4.608h4.608zm9.216 0v4.608h-4.608v-4.608h4.608zm0-18.432v13.824h-13.824v-4.608h-4.608v13.824h-4.608v-23.04h13.824v4.608h4.608v-4.608h4.608zm-27.648-27.648v23.04h-23.04v-23.04h23.04zm27.648 0v23.04h-23.04v-23.04h23.04z","BARCODE":"M2.268-9.143h-2.268v-50.688h2.268v50.688zm2.268-.036h-1.152v-50.652h1.152v50.652zm3.384 0h-1.116v-50.652h1.116v50.652zm5.652 0h-1.116v-50.652h1.116v50.652zm5.652 0h-2.232v-50.652h2.232v50.652zm4.536 0h-1.116v-50.652h1.116v50.652zm2.268 0h-1.116v-50.652h1.116v50.652zm2.268 0h-1.116v-50.652h1.116v50.652zm5.652 0h-2.268v-50.652h2.268v50.652zm5.652 0h-2.268v-50.652h2.268v50.652zm4.536 0h-2.268v-50.652h2.268v50.652zm4.536 0h-2.268v-50.652h2.268v50.652zm3.384 0h-2.268v-50.652h2.268v50.652zm6.804 0h-3.384v-50.652h3.384v50.652zm2.268 0h-1.152v-50.652h1.152v50.652zm3.384.036h-2.268v-50.688h2.268v50.688z","TAG":"M16.128-48.311q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm38.412 20.736q0 1.908-1.332 3.24l-17.676 17.712q-1.404 1.332-3.276 1.332-1.908 0-3.24-1.332l-25.74-25.776q-1.368-1.332-2.322-3.636t-.954-4.212v-14.976q0-1.872 1.368-3.24t3.24-1.368h14.976q1.908 0 4.212.954t3.672 2.322l25.74 25.704q1.332 1.404 1.332 3.276z","TAGS":"M16.128-48.311q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm38.412 20.736q0 1.908-1.332 3.24l-17.676 17.712q-1.404 1.332-3.276 1.332-1.908 0-3.24-1.332l-25.74-25.776q-1.368-1.332-2.322-3.636t-.954-4.212v-14.976q0-1.872 1.368-3.24t3.24-1.368h14.976q1.908 0 4.212.954t3.672 2.322l25.74 25.704q1.332 1.404 1.332 3.276zm13.824 0q0 1.908-1.332 3.24l-17.676 17.712q-1.404 1.332-3.276 1.332-1.296 0-2.124-.504t-1.908-1.62l16.92-16.92q1.332-1.332 1.332-3.24 0-1.872-1.332-3.276l-25.74-25.704q-1.368-1.368-3.672-2.322t-4.212-.954h8.064q1.908 0 4.212.954t3.672 2.322l25.74 25.704q1.332 1.404 1.332 3.276z","BOOK":"M59.004-47.231q1.44 2.052.648 4.644l-9.9 32.616q-.684 2.304-2.754 3.87t-4.41 1.566h-33.228q-2.772 0-5.346-1.926t-3.582-4.734q-.864-2.412-.072-4.572 0-.144.108-.972t.144-1.332q.036-.288-.108-.774t-.108-.702q.072-.396.288-.756t.594-.846.594-.846q.828-1.368 1.62-3.294t1.08-3.294q.108-.36.018-1.08t-.018-1.008q.108-.396.612-1.008t.612-.828q.756-1.296 1.512-3.312t.9-3.24q.036-.324-.09-1.152t.018-1.008q.144-.468.792-1.098t.792-.81q.684-.936 1.53-3.042t.99-3.474q.036-.288-.108-.918t-.072-.954q.072-.288.324-.648t.648-.828.612-.756q.288-.432.594-1.098t.54-1.26.576-1.296.702-1.152.954-.846 1.296-.414 1.71.198l-.036.108q1.368-.324 1.836-.324h27.396q2.664 0 4.104 2.016t.648 4.68l-9.864 32.616q-1.296 4.284-2.574 5.526t-4.626 1.242h-31.284q-.972 0-1.368.54-.396.576-.036 1.548.864 2.52 5.184 2.52h33.228q1.044 0 2.016-.558t1.26-1.494l10.8-35.532q.252-.792.18-2.052 1.368.54 2.124 1.548zm-38.304.072q-.144.468.072.81t.72.342h21.888q.468 0 .918-.342t.594-.81l.756-2.304q.144-.468-.072-.81t-.72-.342h-21.888q-.468 0-.918.342t-.594.81zm-2.988 9.216q-.144.468.072.81t.72.342h21.888q.468 0 .918-.342t.594-.81l.756-2.304q.144-.468-.072-.81t-.72-.342h-21.888q-.468 0-.918.342t-.594.81z","BOOKMARK":"M41.904-59.831q.828 0 1.584.324 1.188.468 1.89 1.476t.702 2.232v46.404q0 1.224-.702 2.232t-1.89 1.476q-.684.288-1.584.288-1.728 0-2.988-1.152l-15.876-15.264-15.876 15.264q-1.296 1.188-2.988 1.188-.828 0-1.584-.324-1.188-.468-1.89-1.476t-.702-2.232v-46.404q0-1.224.702-2.232t1.89-1.476q.756-.324 1.584-.324h37.728z","PRINT":"M13.824-9.143h32.256v-9.216h-32.256v9.216zm0-23.04h32.256v-13.824h-5.76q-1.44 0-2.448-1.008t-1.008-2.448v-5.76h-23.04v23.04zm41.472 2.304q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm4.608 0v14.976q0 .468-.342.81t-.81.342h-8.064v5.76q0 1.44-1.008 2.448t-2.448 1.008h-34.56q-1.44 0-2.448-1.008t-1.008-2.448v-5.76h-8.064q-.468 0-.81-.342t-.342-.81v-14.976q0-2.844 2.034-4.878t4.878-2.034h2.304v-19.584q0-1.44 1.008-2.448t2.448-1.008h24.192q1.44 0 3.168.72t2.736 1.728l5.472 5.472q1.008 1.008 1.728 2.736t.72 3.168v9.216h2.304q2.844 0 4.878 2.034t2.034 4.878z","CAMERA":"M34.56-40.247q4.284 0 7.326 3.042t3.042 7.326-3.042 7.326-7.326 3.042-7.326-3.042-3.042-7.326 3.042-7.326 7.326-3.042zm25.344-14.976q3.816 0 6.516 2.7t2.7 6.516v32.256q0 3.816-2.7 6.516t-6.516 2.7h-50.688q-3.816 0-6.516-2.7t-2.7-6.516v-32.256q0-3.816 2.7-6.516t6.516-2.7h8.064l1.836-4.896q.684-1.764 2.502-3.042t3.726-1.278h18.432q1.908 0 3.726 1.278t2.502 3.042l1.836 4.896h8.064zm-25.344 41.472q6.66 0 11.394-4.734t4.734-11.394-4.734-11.394-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734z","FONT":"M26.1-44.315l-6.12 16.2q1.188 0 4.914.072t5.778.072q.684 0 2.052-.072-3.132-9.108-6.624-16.272zm-26.1 39.78l.072-2.844q.828-.252 2.016-.45t2.052-.378 1.782-.522 1.602-1.044 1.116-1.818l8.532-22.176 10.08-26.064h4.6080000000000005q.288.504.396.756l7.38 17.28q1.188 2.808 3.816 9.27t4.104 9.882q.54 1.224 2.088 5.202t2.592 6.066q.72 1.62 1.26 2.052.684.54 3.168 1.062t3.024.738q.216 1.368.216 2.052l-.018.468-.018.468q-2.268 0-6.84-.288t-6.876-.288q-2.736 0-7.74.252t-6.408.288q0-1.548.144-2.808l4.716-1.008q.036 0 .45-.09t.558-.126.522-.162.54-.234.396-.288.324-.396.09-.504q0-.576-1.116-3.474t-2.592-6.39-1.512-3.6l-16.2-.072q-.936 2.088-2.754 7.038t-1.818 5.85q0 .792.504 1.35t1.566.882 1.746.486 2.052.306 1.476.144q.036.684.036 2.088 0 .324-.072.972-2.088 0-6.282-.36t-6.282-.36q-.288 0-.954.144t-.774.144q-2.88.504-6.768.504z","BOLD":"M19.98-9.683q2.664 1.152 5.04 1.152 13.536 0 13.536-12.06 0-4.104-1.476-6.48-.972-1.584-2.214-2.664t-2.43-1.674-2.898-.9-3.024-.378-3.402-.072q-2.628 0-3.636.36 0 1.908-.018 5.724t-.018 5.688q0 .288-.036 2.43t-.018 3.474.162 3.006.432 2.394zm-.504-26.856q1.512.252 3.924.252 2.952 0 5.148-.468t3.96-1.602 2.682-3.222.918-5.112q0-2.52-1.044-4.41t-2.844-2.952-3.888-1.566-4.464-.504q-1.8 0-4.68.468 0 1.8.144 5.436t.144 5.472q0 .972-.018 2.88t-.018 2.844q0 1.656.036 2.484zm-19.476 32.004l.072-3.384q.54-.144 3.06-.576t3.816-.972q.252-.432.45-.972t.306-1.206.198-1.17.108-1.35.018-1.224v-2.358q0-35.352-.792-36.9-.144-.288-.792-.522t-1.602-.396-1.782-.252-1.746-.162-1.098-.108l-.144-2.988q3.528-.072 12.24-.414t13.428-.342q.828 0 2.466.018t2.43.018q2.52 0 4.914.468t4.626 1.512 3.888 2.556 2.664 3.762 1.008 4.95q0 1.872-.594 3.438t-1.404 2.592-2.322 2.07-2.628 1.62-3.024 1.44q5.544 1.26 9.234 4.824t3.69 8.928q0 3.6-1.26 6.462t-3.366 4.698-4.968 3.078-5.886 1.746-6.336.504q-1.584 0-4.752-.108t-4.752-.108q-3.816 0-11.052.396t-8.316.432z","ITALIC":"M0-4.607l.612-3.06q.216-.072 2.934-.774t4.014-1.35q1.008-1.26 1.476-3.636.036-.252 2.232-10.404t4.104-19.566 1.872-10.674v-.9q-.864-.468-1.962-.666t-2.502-.288-2.088-.198l.684-3.708q1.188.072 4.32.234t5.382.252 4.338.09q1.728 0 3.546-.09t4.356-.252 3.546-.234q-.18 1.404-.684 3.204-1.08.36-3.654 1.026t-3.906 1.206q-.288.684-.504 1.53t-.324 1.44-.27 1.638-.234 1.512q-.972 5.328-3.15 15.102t-2.79 12.798q-.072.324-.468 2.088t-.72 3.24-.576 3.006-.216 2.07l.036.648q.612.144 6.66 1.116-.108 1.584-.576 3.564-.396 0-1.17.054t-1.17.054q-1.044 0-3.132-.36t-3.096-.36q-4.968-.072-7.416-.072-1.836 0-5.148.324t-4.356.396z","TEXT_HEIGHT":"M62.784-13.751q1.188 0 1.512.666t-.396 1.602l-4.536 5.832q-.72.936-1.764.936t-1.764-.936l-4.536-5.832q-.72-.936-.396-1.602t1.512-.666h2.88v-36.864h-2.88q-1.188 0-1.512-.666t.396-1.602l4.536-5.832q.72-.936 1.764-.936t1.764.936l4.536 5.832q.72.936.396 1.602t-1.512.666h-2.88v36.864h2.88zm-59.868-46.044l1.944.972q.432.18 7.596.18 1.584 0 4.752-.072t4.752-.072q1.296 0 3.87.018t3.87.018h10.548q.216 0 .756.018t.738 0 .576-.108.63-.324.54-.63l1.512-.036.504.018.504.018q.072 4.032.072 12.096 0 2.88-.18 3.924-1.404.504-2.448.648-.9-1.584-1.944-4.608-.108-.324-.396-1.728t-.522-2.646-.27-1.278q-.216-.288-.432-.45t-.558-.216-.468-.09-.648-.018-.594.018q-.612 0-2.394-.018t-2.682-.018-2.304.072-2.556.216q-.324 2.916-.288 4.896 0 3.384.072 13.968t.072 16.38q0 .576-.09 2.574t0 3.294.45 2.484q1.44.756 4.464 1.53t4.32 1.35q.18 1.44.18 1.8 0 .504-.108 1.044l-1.224.036q-2.736.072-7.848-.288t-7.452-.36q-1.8 0-5.436.324t-5.472.324l-.108-1.872v-.324q.612-.972 2.214-1.548t3.546-1.044 2.808-.972q.684-1.512.684-13.788 0-3.636-.108-10.908t-.108-10.908v-4.212q0-.072.018-.558t.018-.9-.036-.918-.108-.864-.18-.504q-.396-.432-5.832-.432-1.188 0-3.348.432t-2.88.936q-.684.468-1.224 2.61t-1.134 3.996-1.53 1.926q-1.512-.936-2.016-1.584v-13.788z","TEXT_WIDTH":"M2.916-59.795l1.944.972q.432.18 7.596.18 1.584 0 4.752-.072t4.752-.072q2.52 0 8.874-.036t10.962-.018 8.892.162q1.188.036 2.016-1.116l1.512-.036.504.018.504.018q.072 4.032.072 12.096 0 2.88-.18 3.924-1.404.504-2.448.648-.9-1.584-1.944-4.608-.108-.324-.396-1.71t-.54-2.646-.252-1.296q-.36-.468-.972-.684-.18-.072-2.376-.072-1.08 0-3.348-.036t-3.708-.036-3.384.072-3.456.252q-.324 2.916-.288 4.896l.036 5.472v-1.872q0 1.98.036 5.544t.054 6.48.018 5.508q0 .576-.09 2.574t0 3.294.45 2.484q1.44.756 4.464 1.53t4.32 1.35q.18 1.44.18 1.8 0 .504-.108 1.044l-1.224.036q-2.736.072-7.848-.288t-7.452-.36q-1.8 0-5.436.324t-5.472.324l-.108-1.872v-.324q.612-.972 2.214-1.548t3.546-1.044 2.808-.972q.252-.576.414-2.664t.216-5.238.054-5.58-.018-5.526-.018-3.204q0-.252-.09-.774t-.09-.81q0-.252.018-1.584t.036-2.628 0-2.754-.108-2.43-.234-1.152q-.396-.432-5.832-.432-1.476 0-5.868.486t-4.968.882q-.684.432-1.224 2.574t-1.134 4.014-1.53 1.944q-1.512-.936-2.016-1.584v-13.788zm44.244 46.152q.432 0 1.512.702t2.07 1.494 2.142 1.764 1.296 1.08q.936.756.936 1.764t-.936 1.764q-.144.108-1.296 1.08t-2.142 1.764-2.07 1.494-1.512.702q-.468 0-.738-.378t-.36-1.026-.09-1.206.054-1.188.054-.702h-36.864q0 .072.054.702t.054 1.188-.09 1.206-.36 1.026-.738.378q-.432 0-1.512-.702t-2.07-1.494-2.142-1.764-1.296-1.08q-.936-.756-.936-1.764t.936-1.764q.144-.108 1.296-1.08t2.142-1.764 2.07-1.494 1.512-.702q.468 0 .738.378t.36 1.026.09 1.206-.054 1.188-.054.702h36.864q0-.072-.054-.702t-.054-1.188.09-1.206.36-1.026.738-.378z","ALIGN_LEFT":"M64.512-16.055v4.608q0 .936-.684 1.62t-1.62.684h-59.904q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h59.904q.936 0 1.62.684t.684 1.62zm-13.824-13.824v4.608q0 .936-.684 1.62t-1.62.684h-46.08q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h46.08q.936 0 1.62.684t.684 1.62zm9.216-13.824v4.608q0 .936-.684 1.62t-1.62.684h-55.296q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h55.296q.936 0 1.62.684t.684 1.62zm-13.824-13.824v4.608q0 .936-.684 1.62t-1.62.684h-41.472q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h41.472q.936 0 1.62.684t.684 1.62z","ALIGN_CENTER":"M64.512-16.055v4.608q0 .936-.684 1.62t-1.62.684h-59.904q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h59.904q.936 0 1.62.684t.684 1.62zm-13.824-13.824v4.608q0 .936-.684 1.62t-1.62.684h-32.256q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h32.256q.936 0 1.62.684t.684 1.62zm9.216-13.824v4.608q0 .936-.684 1.62t-1.62.684h-50.688q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h50.688q.936 0 1.62.684t.684 1.62zm-13.824-13.824v4.608q0 .936-.684 1.62t-1.62.684h-23.04q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h23.04q.936 0 1.62.684t.684 1.62z","ALIGN_RIGHT":"M64.512-16.055v4.608q0 .936-.684 1.62t-1.62.684h-59.904q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h59.904q.936 0 1.62.684t.684 1.62zm0-13.824v4.608q0 .936-.684 1.62t-1.62.684h-46.08q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h46.08q.936 0 1.62.684t.684 1.62zm0-13.824v4.608q0 .936-.684 1.62t-1.62.684h-55.296q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h55.296q.936 0 1.62.684t.684 1.62zm0-13.824v4.608q0 .936-.684 1.62t-1.62.684h-41.472q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h41.472q.936 0 1.62.684t.684 1.62z","ALIGN_JUSTIFY":"M64.512-16.055v4.608q0 .936-.684 1.62t-1.62.684h-59.904q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h59.904q.936 0 1.62.684t.684 1.62zm0-13.824v4.608q0 .936-.684 1.62t-1.62.684h-59.904q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h59.904q.936 0 1.62.684t.684 1.62zm0-13.824v4.608q0 .936-.684 1.62t-1.62.684h-59.904q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h59.904q.936 0 1.62.684t.684 1.62zm0-13.824v4.608q0 .936-.684 1.62t-1.62.684h-59.904q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h59.904q.936 0 1.62.684t.684 1.62z","LIST":"M9.216-17.207v6.912q0 .468-.342.81t-.81.342h-6.912q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h6.912q.468 0 .81.342t.342.81zm0-13.824v6.912q0 .468-.342.81t-.81.342h-6.912q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h6.912q.468 0 .81.342t.342.81zm0-13.824v6.912q0 .468-.342.81t-.81.342h-6.912q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h6.912q.468 0 .81.342t.342.81zm55.296 27.648v6.912q0 .468-.342.81t-.81.342h-48.384q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h48.384q.468 0 .81.342t.342.81zm-55.296-41.472v6.912q0 .468-.342.81t-.81.342h-6.912q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h6.912q.468 0 .81.342t.342.81zm55.296 27.648v6.912q0 .468-.342.81t-.81.342h-48.384q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h48.384q.468 0 .81.342t.342.81zm0-13.824v6.912q0 .468-.342.81t-.81.342h-48.384q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h48.384q.468 0 .81.342t.342.81zm0-13.824v6.912q0 .468-.342.81t-.81.342h-48.384q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h48.384q.468 0 .81.342t.342.81z","OUTDENT":"M13.824-44.855v20.736q0 .468-.342.81t-.81.342q-.504 0-.828-.324l-10.368-10.368q-.324-.324-.324-.828t.324-.828l10.368-10.368q.324-.324.828-.324.468 0 .81.342t.342.81zm50.688 27.648v6.912q0 .468-.342.81t-.81.342h-62.208q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h62.208q.468 0 .81.342t.342.81zm0-13.824v6.912q0 .468-.342.81t-.81.342h-39.168q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h39.168q.468 0 .81.342t.342.81zm0-13.824v6.912q0 .468-.342.81t-.81.342h-39.168q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h39.168q.468 0 .81.342t.342.81zm0-13.824v6.912q0 .468-.342.81t-.81.342h-62.208q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h62.208q.468 0 .81.342t.342.81z","INDENT":"M12.672-34.487q0 .504-.324.828l-10.368 10.368q-.324.324-.828.324-.468 0-.81-.342t-.342-.81v-20.736q0-.468.342-.81t.81-.342q.504 0 .828.324l10.368 10.368q.324.324.324.828zm51.84 17.28v6.912q0 .468-.342.81t-.81.342h-62.208q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h62.208q.468 0 .81.342t.342.81zm0-13.824v6.912q0 .468-.342.81t-.81.342h-39.168q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h39.168q.468 0 .81.342t.342.81zm0-13.824v6.912q0 .468-.342.81t-.81.342h-39.168q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h39.168q.468 0 .81.342t.342.81zm0-13.824v6.912q0 .468-.342.81t-.81.342h-62.208q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h62.208q.468 0 .81.342t.342.81z","VIDEO_CAMERA":"M64.512-51.767v39.168q0 1.512-1.404 2.124-.468.18-.9.18-.972 0-1.62-.684l-14.508-14.508v5.976q0 4.284-3.042 7.326t-7.326 3.042h-25.344q-4.284 0-7.326-3.042t-3.042-7.326v-25.344q0-4.284 3.042-7.326t7.326-3.042h25.344q4.284 0 7.326 3.042t3.042 7.326v5.94l14.508-14.472q.648-.684 1.62-.684.432 0 .9.18 1.404.612 1.404 2.124z","PICTURE_O":"M23.04-43.703q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm36.864 13.824v16.128h-50.688v-6.912l11.52-11.52 5.76 5.76 18.432-18.432zm3.456-25.344h-57.6q-.468 0-.81.342t-.342.81v43.776q0 .468.342.81t.81.342h57.6q.468 0 .81-.342t.342-.81v-43.776q0-.468-.342-.81t-.81-.342zm5.76 1.152v43.776q0 2.376-1.692 4.068t-4.068 1.692h-57.6q-2.376 0-4.068-1.692t-1.692-4.068v-43.776q0-2.376 1.692-4.068t4.068-1.692h57.6q2.376 0 4.068 1.692t1.692 4.068z","PENCIL":"M13.068-9.143l3.276-3.276-8.46-8.46-3.276 3.276v3.852h4.608v4.608h3.852zm18.828-33.408q0-.792-.792-.792-.36 0-.612.252l-19.512 19.512q-.252.252-.252.612 0 .792.792.792.36 0 .612-.252l19.512-19.512q.252-.252.252-.612zm-1.944-6.912l14.976 14.976-29.952 29.952h-14.976v-14.976zm24.588 3.456q0 1.908-1.332 3.24l-5.976 5.976-14.976-14.976 5.976-5.94q1.296-1.368 3.24-1.368 1.908 0 3.276 1.368l8.46 8.424q1.332 1.404 1.332 3.276z","MAP_MARKER":"M27.648-41.399q0-3.816-2.7-6.516t-6.516-2.7-6.516 2.7-2.7 6.516 2.7 6.516 6.516 2.7 6.516-2.7 2.7-6.516zm9.216 0q0 3.924-1.188 6.444l-13.104 27.864q-.576 1.188-1.71 1.872t-2.43.684-2.43-.684-1.674-1.872l-13.14-27.864q-1.188-2.52-1.188-6.444 0-7.632 5.4-13.032t13.032-5.4 13.032 5.4 5.4 13.032z","ADJUST":"M27.648-12.599v-39.168q-5.328 0-9.828 2.628t-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628zm27.648-19.584q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","TINT":"M18.432-22.967q0-1.296-.72-2.484-.036-.036-.558-.81t-.918-1.368-.9-1.584-.756-1.818q-.144-.576-.756-.576t-.756.576q-.252.828-.756 1.818t-.9 1.584-.918 1.368-.558.81q-.72 1.188-.72 2.484 0 1.908 1.35 3.258t3.258 1.35 3.258-1.35 1.35-3.258zm18.432-4.608q0 7.632-5.4 13.032t-13.032 5.4-13.032-5.4-5.4-13.032q0-5.22 2.916-9.9.216-.324 2.25-3.258t3.636-5.436 3.582-6.408 2.988-7.254q.324-1.08 1.224-1.692t1.836-.612 1.854.612 1.206 1.692q1.008 3.348 2.988 7.254t3.582 6.408 3.636 5.436 2.25 3.258q2.916 4.572 2.916 9.9z","PENCIL_SQUARE_O":"M31.968-21.815l4.176-4.176-5.472-5.472-4.176 4.176v2.016h3.456v3.456h2.016zm15.84-25.92q-.576-.576-1.188.036l-12.6 12.6q-.612.612-.036 1.188t1.188-.036l12.6-12.6q.612-.612.036-1.188zm2.88 21.384v6.84q0 4.284-3.042 7.326t-7.326 3.042h-29.952q-4.284 0-7.326-3.042t-3.042-7.326v-29.952q0-4.284 3.042-7.326t7.326-3.042h29.952q2.268 0 4.212.9.54.252.648.828.108.612-.324 1.044l-1.764 1.764q-.504.504-1.152.288-.828-.216-1.62-.216h-29.952q-2.376 0-4.068 1.692t-1.692 4.068v29.952q0 2.376 1.692 4.068t4.068 1.692h29.952q2.376 0 4.068-1.692t1.692-4.068v-4.536q0-.468.324-.792l2.304-2.304q.54-.54 1.26-.252t.72 1.044zm-3.456-26.568l10.368 10.368-24.192 24.192h-10.368v-10.368zm15.984 4.752l-3.312 3.312-10.368-10.368 3.312-3.312q1.008-1.008 2.448-1.008t2.448 1.008l5.472 5.472q1.008 1.008 1.008 2.448t-1.008 2.448z","SHARE_SQUARE_O":"M50.688-28.835v9.324q0 4.284-3.042 7.326t-7.326 3.042h-29.952q-4.284 0-7.326-3.042t-3.042-7.326v-29.952q0-4.284 3.042-7.326t7.326-3.042h9.18q.468 0 .81.342t.342.81q0 .972-.936 1.152-2.772.936-4.788 2.16-.36.144-.576.144h-4.032q-2.376 0-4.068 1.692t-1.692 4.068v29.952q0 2.376 1.692 4.068t4.068 1.692h29.952q2.376 0 4.068-1.692t1.692-4.068v-7.704q0-.684.648-1.044 1.008-.468 1.944-1.332.576-.576 1.26-.288.756.324.756 1.044zm8.532-17.856l-13.824 13.824q-.648.684-1.62.684-.432 0-.9-.18-1.404-.612-1.404-2.124v-6.912h-5.76q-11.628 0-15.768 4.716-4.284 4.932-2.664 17.028.108.828-.72 1.224-.288.072-.432.072-.576 0-.936-.468-.36-.504-.756-1.116t-1.422-2.466-1.782-3.582-1.386-4.104-.63-4.392q0-1.764.126-3.276t.504-3.24 1.008-3.168 1.692-2.934 2.466-2.664 3.402-2.214 4.482-1.746 5.742-1.098 7.074-.396h5.76v-6.912q0-1.512 1.404-2.124.468-.18.9-.18.936 0 1.62.684l13.824 13.824q.684.684.684 1.62t-.684 1.62z","CHECK_SQUARE_O":"M50.688-30.959v11.448q0 4.284-3.042 7.326t-7.326 3.042h-29.952q-4.284 0-7.326-3.042t-3.042-7.326v-29.952q0-4.284 3.042-7.326t7.326-3.042h29.952q2.268 0 4.212.9.54.252.648.828.108.612-.324 1.044l-1.764 1.764q-.36.36-.828.36-.108 0-.324-.072-.828-.216-1.62-.216h-29.952q-2.376 0-4.068 1.692t-1.692 4.068v29.952q0 2.376 1.692 4.068t4.068 1.692h29.952q2.376 0 4.068-1.692t1.692-4.068v-9.144q0-.468.324-.792l2.304-2.304q.36-.36.828-.36.216 0 .432.108.72.288.72 1.044zm8.316-17.604l-29.304 29.304q-.864.864-2.052.864t-2.052-.864l-15.48-15.48q-.864-.864-.864-2.052t.864-2.052l3.96-3.96q.864-.864 2.052-.864t2.052.864l9.468 9.468 23.292-23.292q.864-.864 2.052-.864t2.052.864l3.96 3.96q.864.864.864 2.052t-.864 2.052z","ARROWS":"M64.512-32.183q0 .936-.684 1.62l-9.216 9.216q-.684.684-1.62.684t-1.62-.684-.684-1.62v-4.608h-13.824v13.824h4.608q.936 0 1.62.684t.684 1.62-.684 1.62l-9.216 9.216q-.684.684-1.62.684t-1.62-.684l-9.216-9.216q-.684-.684-.684-1.62t.684-1.62 1.62-.684h4.608v-13.824h-13.824v4.608q0 .936-.684 1.62t-1.62.684-1.62-.684l-9.216-9.216q-.684-.684-.684-1.62t.684-1.62l9.216-9.216q.684-.684 1.62-.684t1.62.684.684 1.62v4.608h13.824v-13.824h-4.608q-.936 0-1.62-.684t-.684-1.62.684-1.62l9.216-9.216q.684-.684 1.62-.684t1.62.684l9.216 9.216q.684.684.684 1.62t-.684 1.62-1.62.684h-4.608v13.824h13.824v-4.608q0-.936.684-1.62t1.62-.684 1.62.684l9.216 9.216q.684.684.684 1.62z","STEP_BACKWARD":"M35.244-59.363q.684-.684 1.152-.468t.468 1.152v52.992q0 .936-.468 1.152t-1.152-.468l-25.56-25.56q-.324-.324-.468-.684v24.408q0 .936-.684 1.62t-1.62.684h-4.608q-.936 0-1.62-.684t-.684-1.62v-50.688q0-.936.684-1.62t1.62-.684h4.608q.936 0 1.62.684t.684 1.62v24.408q.144-.396.468-.684z","FAST_BACKWARD":"M62.892-59.363q.684-.684 1.152-.468t.468 1.152v52.992q0 .936-.468 1.152t-1.152-.468l-25.56-25.56q-.324-.324-.468-.684v25.56q0 .936-.468 1.152t-1.152-.468l-25.56-25.56q-.324-.324-.468-.684v24.408q0 .936-.684 1.62t-1.62.684h-4.608q-.936 0-1.62-.684t-.684-1.62v-50.688q0-.936.684-1.62t1.62-.684h4.608q.936 0 1.62.684t.684 1.62v24.408q.144-.396.468-.684l25.56-25.56q.684-.684 1.152-.468t.468 1.152v25.56q.144-.396.468-.684z","BACKWARD":"M58.284-59.363q.684-.684 1.152-.468t.468 1.152v52.992q0 .936-.468 1.152t-1.152-.468l-25.56-25.56q-.288-.324-.468-.684v25.56q0 .936-.468 1.152t-1.152-.468l-25.56-25.56q-.684-.684-.684-1.62t.684-1.62l25.56-25.56q.684-.684 1.152-.468t.468 1.152v25.56q.18-.396.468-.684z","PLAY":"M49.824-31.067l-47.808 26.568q-.828.468-1.422.108t-.594-1.296v-52.992q0-.936.594-1.296t1.422.108l47.808 26.568q.828.468.828 1.116t-.828 1.116z","PAUSE":"M55.296-57.527v50.688q0 .936-.684 1.62t-1.62.684h-18.432q-.936 0-1.62-.684t-.684-1.62v-50.688q0-.936.684-1.62t1.62-.684h18.432q.936 0 1.62.684t.684 1.62zm-32.256 0v50.688q0 .936-.684 1.62t-1.62.684h-18.432q-.936 0-1.62-.684t-.684-1.62v-50.688q0-.936.684-1.62t1.62-.684h18.432q.936 0 1.62.684t.684 1.62z","STOP":"M55.296-57.527v50.688q0 .936-.684 1.62t-1.62.684h-50.688q-.936 0-1.62-.684t-.684-1.62v-50.688q0-.936.684-1.62t1.62-.684h50.688q.936 0 1.62.684t.684 1.62z","FORWARD":"M1.62-5.003q-.684.684-1.152.468t-.468-1.152v-52.992q0-.936.468-1.152t1.152.468l25.56 25.56q.288.288.468.684v-25.56q0-.936.468-1.152t1.152.468l25.56 25.56q.684.684.684 1.62t-.684 1.62l-25.56 25.56q-.684.684-1.152.468t-.468-1.152v-25.56q-.18.36-.468.684z","FAST_FORWARD":"M1.62-5.003q-.684.684-1.152.468t-.468-1.152v-52.992q0-.936.468-1.152t1.152.468l25.56 25.56q.288.288.468.684v-25.56q0-.936.468-1.152t1.152.468l25.56 25.56q.288.288.468.684v-24.408q0-.936.684-1.62t1.62-.684h4.608q.936 0 1.62.684t.684 1.62v50.688q0 .936-.684 1.62t-1.62.684h-4.608q-.936 0-1.62-.684t-.684-1.62v-24.408q-.18.36-.468.684l-25.56 25.56q-.684.684-1.152.468t-.468-1.152v-25.56q-.18.36-.468.684z","STEP_FORWARD":"M1.62-5.003q-.684.684-1.152.468t-.468-1.152v-52.992q0-.936.468-1.152t1.152.468l25.56 25.56q.288.288.468.684v-24.408q0-.936.684-1.62t1.62-.684h4.608q.936 0 1.62.684t.684 1.62v50.688q0 .936-.684 1.62t-1.62.684h-4.608q-.936 0-1.62-.684t-.684-1.62v-24.408q-.18.36-.468.684z","EJECT":"M.504-29.195l25.56-25.56q.684-.684 1.62-.684t1.62.684l25.56 25.56q.684.684.468 1.152t-1.152.468h-52.992q-.936 0-1.152-.468t.468-1.152zm52.524 20.052h-50.688q-.936 0-1.62-.684t-.684-1.62v-9.216q0-.936.684-1.62t1.62-.684h50.688q.936 0 1.62.684t.684 1.62v9.216q0 .936-.684 1.62t-1.62.684z","CHEVRON_LEFT":"M42.156-53.603l-19.116 19.116 19.116 19.116q.684.684.684 1.62t-.684 1.62l-5.976 5.976q-.684.684-1.62.684t-1.62-.684l-26.712-26.712q-.684-.684-.684-1.62t.684-1.62l26.712-26.712q.684-.684 1.62-.684t1.62.684l5.976 5.976q.684.684.684 1.62t-.684 1.62z","CHEVRON_RIGHT":"M39.852-32.867l-26.712 26.712q-.684.684-1.62.684t-1.62-.684l-5.976-5.976q-.684-.684-.684-1.62t.684-1.62l19.116-19.116-19.116-19.116q-.684-.684-.684-1.62t.684-1.62l5.976-5.976q.684-.684 1.62-.684t1.62.684l26.712 26.712q.684.684.684 1.62t-.684 1.62z","PLUS_CIRCLE":"M43.776-29.879v-4.608q0-.936-.684-1.62t-1.62-.684h-9.216v-9.216q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v9.216h-9.216q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h9.216v9.216q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62v-9.216h9.216q.936 0 1.62-.684t.684-1.62zm11.52-2.304q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","MINUS_CIRCLE":"M43.776-29.879v-4.608q0-.936-.684-1.62t-1.62-.684h-27.648q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h27.648q.936 0 1.62-.684t.684-1.62zm11.52-2.304q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","TIMES_CIRCLE":"M41.364-24.047q0-.936-.684-1.62l-6.516-6.516 6.516-6.516q.684-.684.684-1.62 0-.972-.684-1.656l-3.24-3.24q-.684-.684-1.656-.684-.936 0-1.62.684l-6.516 6.516-6.516-6.516q-.684-.684-1.62-.684-.972 0-1.656.684l-3.24 3.24q-.684.684-.684 1.656 0 .936.684 1.62l6.516 6.516-6.516 6.516q-.684.684-.684 1.62 0 .972.684 1.656l3.24 3.24q.684.684 1.656.684.936 0 1.62-.684l6.516-6.516 6.516 6.516q.684.684 1.62.684.972 0 1.656-.684l3.24-3.24q.684-.684.684-1.656zm13.932-8.136q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","CHECK_CIRCLE":"M46.224-38.015q0-1.008-.648-1.656l-3.276-3.24q-.684-.684-1.62-.684t-1.62.684l-14.688 14.652-8.136-8.136q-.684-.684-1.62-.684t-1.62.684l-3.276 3.24q-.648.648-.648 1.656 0 .972.648 1.62l13.032 13.032q.684.684 1.62.684.972 0 1.656-.684l19.548-19.548q.648-.648.648-1.62zm9.072 5.832q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","QUESTION_CIRCLE":"M32.256-14.903v-6.912q0-.504-.324-.828t-.828-.324h-6.912q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h6.912q.504 0 .828-.324t.324-.828zm9.216-24.192q0-3.168-1.998-5.868t-4.986-4.176-6.12-1.476q-8.748 0-13.356 7.668-.54.864.288 1.512l4.752 3.6q.252.216.684.216.576 0 .9-.432 1.908-2.448 3.096-3.312 1.224-.864 3.096-.864 1.728 0 3.078.936t1.35 2.124q0 1.368-.72 2.196t-2.448 1.62q-2.268 1.008-4.158 3.114t-1.89 4.518v1.296q0 .504.324.828t.828.324h6.912q.504 0 .828-.324t.324-.828q0-.684.774-1.782t1.962-1.782q1.152-.648 1.764-1.026t1.656-1.26 1.602-1.728 1.008-2.178.45-2.916zm13.824 6.912q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","INFO_CIRCLE":"M36.864-14.903v-5.76q0-.504-.324-.828t-.828-.324h-3.456v-18.432q0-.504-.324-.828t-.828-.324h-11.52q-.504 0-.828.324t-.324.828v5.76q0 .504.324.828t.828.324h3.456v11.52h-3.456q-.504 0-.828.324t-.324.828v5.76q0 .504.324.828t.828.324h16.128q.504 0 .828-.324t.324-.828zm-4.608-32.256v-5.76q0-.504-.324-.828t-.828-.324h-6.912q-.504 0-.828.324t-.324.828v5.76q0 .504.324.828t.828.324h6.912q.504 0 .828-.324t.324-.828zm23.04 14.976q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","CROSSHAIRS":"M43.092-27.575h-3.924q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h3.924q-1.152-3.888-4.05-6.786t-6.786-4.05v3.924q0 .936-.684 1.62t-1.62.684h-4.608q-.936 0-1.62-.684t-.684-1.62v-3.924q-3.888 1.152-6.786 4.05t-4.05 6.786h3.924q.936 0 1.62.684t.684 1.62v4.608q0 .936-.684 1.62t-1.62.684h-3.924q1.152 3.888 4.05 6.786t6.786 4.05v-3.924q0-.936.684-1.62t1.62-.684h4.608q.936 0 1.62.684t.684 1.62v3.924q3.888-1.152 6.786-4.05t4.05-6.786zm12.204-6.912v4.608q0 .936-.684 1.62t-1.62.684h-5.148q-1.332 5.796-5.562 10.026t-10.026 5.562v5.148q0 .936-.684 1.62t-1.62.684h-4.608q-.936 0-1.62-.684t-.684-1.62v-5.148q-5.796-1.332-10.026-5.562t-5.562-10.026h-5.148q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h5.148q1.332-5.796 5.562-10.026t10.026-5.562v-5.148q0-.936.684-1.62t1.62-.684h4.608q.936 0 1.62.684t.684 1.62v5.148q5.796 1.332 10.026 5.562t5.562 10.026h5.148q.936 0 1.62.684t.684 1.62z","TIMES_CIRCLE_O":"M39.492-25.595l-5.256 5.256q-.36.36-.828.36t-.828-.36l-4.932-4.932-4.932 4.932q-.36.36-.828.36t-.828-.36l-5.256-5.256q-.36-.36-.36-.828t.36-.828l4.932-4.932-4.932-4.932q-.36-.36-.36-.828t.36-.828l5.256-5.256q.36-.36.828-.36t.828.36l4.932 4.932 4.932-4.932q.36-.36.828-.36t.828.36l5.256 5.256q.36.36.36.828t-.36.828l-4.932 4.932 4.932 4.932q.36.36.36.828t-.36.828zm7.74-6.588q0-5.328-2.628-9.828t-7.128-7.128-9.828-2.628-9.828 2.628-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628 9.828-2.628 7.128-7.128 2.628-9.828zm8.064 0q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","CHECK_CIRCLE_O":"M42.156-35.171l-15.192 15.192q-.684.684-1.62.684t-1.62-.684l-10.584-10.584q-.684-.684-.684-1.62t.684-1.62l3.672-3.672q.684-.684 1.62-.684t1.62.684l5.292 5.292 9.9-9.9q.684-.684 1.62-.684t1.62.684l3.672 3.672q.684.684.684 1.62t-.684 1.62zm5.076 2.988q0-5.328-2.628-9.828t-7.128-7.128-9.828-2.628-9.828 2.628-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628 9.828-2.628 7.128-7.128 2.628-9.828zm8.064 0q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","BAN":"M47.232-32.291q0-5.796-3.132-10.62l-27.144 27.108q4.932 3.204 10.692 3.204 3.996 0 7.614-1.566t6.246-4.194 4.176-6.282 1.548-7.65zm-35.964 10.764l27.18-27.144q-4.86-3.276-10.8-3.276-5.328 0-9.828 2.628t-7.128 7.164-2.628 9.864q0 5.832 3.204 10.764zm44.028-10.764q0 5.652-2.196 10.8t-5.886 8.856-8.82 5.904-10.746 2.196-10.746-2.196-8.82-5.904-5.886-8.856-2.196-10.8 2.196-10.782 5.886-8.838 8.82-5.904 10.746-2.196 10.746 2.196 8.82 5.904 5.886 8.838 2.196 10.782z","ARROW_LEFT":"M55.296-32.183v4.608q0 1.908-1.17 3.258t-3.042 1.35h-25.344l10.548 10.584q1.368 1.296 1.368 3.24t-1.368 3.24l-2.7 2.736q-1.332 1.332-3.24 1.332-1.872 0-3.276-1.332l-23.436-23.472q-1.332-1.332-1.332-3.24 0-1.872 1.332-3.276l23.436-23.4q1.368-1.368 3.276-1.368 1.872 0 3.24 1.368l2.7 2.664q1.368 1.368 1.368 3.276t-1.368 3.276l-10.548 10.548h25.344q1.872 0 3.042 1.35t1.17 3.258z","ARROW_RIGHT":"M52.992-29.879q0 1.944-1.332 3.276l-23.436 23.436q-1.404 1.332-3.276 1.332-1.836 0-3.24-1.332l-2.7-2.7q-1.368-1.368-1.368-3.276t1.368-3.276l10.548-10.548h-25.344q-1.872 0-3.042-1.35t-1.17-3.258v-4.608q0-1.908 1.17-3.258t3.042-1.35h25.344l-10.548-10.584q-1.368-1.296-1.368-3.24t1.368-3.24l2.7-2.7q1.368-1.368 3.24-1.368 1.908 0 3.276 1.368l23.436 23.436q1.332 1.26 1.332 3.24z","ARROW_UP":"M57.996-29.483q0 1.836-1.332 3.24l-2.7 2.7q-1.368 1.368-3.276 1.368-1.944 0-3.24-1.368l-10.584-10.548v25.344q0 1.872-1.35 3.042t-3.258 1.17h-4.608q-1.908 0-3.258-1.17t-1.35-3.042v-25.344l-10.584 10.548q-1.296 1.368-3.24 1.368t-3.24-1.368l-2.7-2.7q-1.368-1.368-1.368-3.24 0-1.908 1.368-3.276l23.436-23.436q1.26-1.332 3.24-1.332 1.944 0 3.276 1.332l23.436 23.436q1.332 1.404 1.332 3.276z","ARROW_DOWN":"M57.996-34.487q0 1.908-1.332 3.24l-23.436 23.472q-1.404 1.332-3.276 1.332-1.908 0-3.24-1.332l-23.436-23.472q-1.368-1.296-1.368-3.24 0-1.908 1.368-3.276l2.664-2.7q1.404-1.332 3.276-1.332 1.908 0 3.24 1.332l10.584 10.584v-25.344q0-1.872 1.368-3.24t3.24-1.368h4.608q1.872 0 3.24 1.368t1.368 3.24v25.344l10.584-10.584q1.332-1.332 3.24-1.332 1.872 0 3.276 1.332l2.7 2.7q1.332 1.404 1.332 3.276z","SHARE":"M64.512-41.399q0 .936-.684 1.62l-18.432 18.432q-.684.684-1.62.684t-1.62-.684-.684-1.62v-9.216h-8.064q-3.528 0-6.318.216t-5.544.774-4.788 1.53-3.798 2.502-2.88 3.636-1.746 4.986-.63 6.516q0 1.98.18 4.428 0 .216.09.846t.09.954q0 .54-.306.9t-.846.36q-.576 0-1.008-.612-.252-.324-.468-.792t-.486-1.08-.378-.864q-4.572-10.26-4.572-16.236 0-7.164 1.908-11.988 5.832-14.508 31.5-14.508h8.064v-9.216q0-.936.684-1.62t1.62-.684 1.62.684l18.432 18.432q.684.684.684 1.62z","EXPAND":"M27.18-26.423q0 .468-.36.828l-11.952 11.952 5.184 5.184q.684.684.684 1.62t-.684 1.62-1.62.684h-16.128q-.936 0-1.62-.684t-.684-1.62v-16.128q0-.936.684-1.62t1.62-.684 1.62.684l5.184 5.184 11.952-11.952q.36-.36.828-.36t.828.36l4.104 4.104q.36.36.36.828zm28.116-31.104v16.128q0 .936-.684 1.62t-1.62.684-1.62-.684l-5.184-5.184-11.952 11.952q-.36.36-.828.36t-.828-.36l-4.104-4.104q-.36-.36-.36-.828t.36-.828l11.952-11.952-5.184-5.184q-.684-.684-.684-1.62t.684-1.62 1.62-.684h16.128q.936 0 1.62.684t.684 1.62z","COMPRESS":"M27.648-29.879v16.128q0 .936-.684 1.62t-1.62.684-1.62-.684l-5.184-5.184-11.952 11.952q-.36.36-.828.36t-.828-.36l-4.104-4.104q-.36-.36-.36-.828t.36-.828l11.952-11.952-5.184-5.184q-.684-.684-.684-1.62t.684-1.62 1.62-.684h16.128q.936 0 1.62.684t.684 1.62zm27.18-24.192q0 .468-.36.828l-11.952 11.952 5.184 5.184q.684.684.684 1.62t-.684 1.62-1.62.684h-16.128q-.936 0-1.62-.684t-.684-1.62v-16.128q0-.936.684-1.62t1.62-.684 1.62.684l5.184 5.184 11.952-11.952q.36-.36.828-.36t.828.36l4.104 4.104q.36.36.36.828z","PLUS":"M50.688-37.943v6.912q0 1.44-1.008 2.448t-2.448 1.008h-14.976v14.976q0 1.44-1.008 2.448t-2.448 1.008h-6.912q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h14.976v-14.976q0-1.44 1.008-2.448t2.448-1.008h6.912q1.44 0 2.448 1.008t1.008 2.448v14.976h14.976q1.44 0 2.448 1.008t1.008 2.448z","MINUS":"M50.688-37.943v6.912q0 1.44-1.008 2.448t-2.448 1.008h-43.776q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h43.776q1.44 0 2.448 1.008t1.008 2.448z","ASTERISK":"M53.352-26.639q1.656.936 2.142 2.79t-.45 3.51l-2.304 3.96q-.936 1.656-2.79 2.142t-3.51-.45l-9.576-5.508v11.052q0 1.872-1.368 3.24t-3.24 1.368h-4.608q-1.872 0-3.24-1.368t-1.368-3.24v-11.052l-9.576 5.508q-1.656.936-3.51.45t-2.79-2.142l-2.304-3.96q-.936-1.656-.45-3.51t2.142-2.79l9.576-5.544-9.576-5.544q-1.656-.936-2.142-2.79t.45-3.51l2.304-3.96q.936-1.656 2.79-2.142t3.51.45l9.576 5.508v-11.052q0-1.872 1.368-3.24t3.24-1.368h4.608q1.872 0 3.24 1.368t1.368 3.24v11.052l9.576-5.508q1.656-.936 3.51-.45t2.79 2.142l2.304 3.96q.936 1.656.45 3.51t-2.142 2.79l-9.576 5.544z","EXCLAMATION_CIRCLE":"M27.648-59.831q7.524 0 13.878 3.708t10.062 10.062 3.708 13.878-3.708 13.878-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708zm4.608 44.892v-6.84q0-.504-.324-.846t-.792-.342h-6.912q-.468 0-.828.36t-.36.828v6.84q0 .468.36.828t.828.36h6.912q.468 0 .792-.342t.324-.846zm-.072-12.384l.648-22.356q0-.432-.36-.648-.36-.288-.864-.288h-7.92q-.504 0-.864.288-.36.216-.36.648l.612 22.356q0 .36.36.63t.864.27h6.66q.504 0 .846-.27t.378-.63z","GIFT":"M33.408-15.623v-25.775999999999996h-11.52v25.775999999999996q0 .9.648 1.386t1.656.486h6.912q1.008 0 1.656-.486t.648-1.386zm-16.416-30.384h7.02l-4.536-5.796q-.936-1.116-2.484-1.116-1.44 0-2.448 1.008t-1.008 2.448 1.008 2.448 2.448 1.008zm24.768-3.456q0-1.44-1.008-2.448t-2.448-1.008q-1.548 0-2.484 1.116l-4.5 5.796h6.984q1.44 0 2.448-1.008t1.008-2.448zm13.536 9.216v11.52q0 .504-.324.828t-.828.324h-3.456v14.976q0 1.44-1.008 2.448t-2.448 1.008h-39.168q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-3.456q-.504 0-.828-.324t-.324-.828v-11.52q0-.504.324-.828t.828-.324h15.84q-3.348 0-5.706-2.358t-2.358-5.706 2.358-5.706 5.706-2.358q3.852 0 6.048 2.772l4.608 5.94 4.608-5.94q2.196-2.772 6.048-2.772 3.348 0 5.706 2.358t2.358 5.706-2.358 5.706-5.706 2.358h15.84q.504 0 .828.324t.324.828z","LEAF":"M46.08-39.095q0-.936-.684-1.62t-1.62-.684q-6.192 0-11.448 1.782t-9.342 4.824-8.478 7.902q-.684.756-.684 1.62 0 .936.684 1.62t1.62.684q.864 0 1.62-.684.972-.864 2.664-2.556t2.412-2.376q4.932-4.464 9.666-6.336t11.286-1.872q.936 0 1.62-.684t.684-1.62zm18.432-7.128q0 3.42-.72 6.948-1.656 8.064-6.642 13.788t-12.87 9.648q-7.704 3.888-15.768 3.888-5.328 0-10.296-1.692-.54-.18-3.168-1.512t-3.456-1.332q-.576 0-1.422 1.152t-1.62 2.52-1.89 2.52-2.16 1.152q-1.08 0-1.836-.396t-1.116-.864-.972-1.512l-.216-.396-.198-.36-.108-.342-.054-.486q0-1.26 1.116-2.646t2.448-2.358 2.448-2.016 1.116-1.728q0-.144-.504-1.368t-.576-1.584q-.324-1.836-.324-3.744 0-4.14 1.566-7.92t4.284-6.642 6.138-5.004 7.344-3.438q1.98-.648 5.22-.918t6.462-.324 6.426-.216 5.886-.864 4.086-2.034l1.062-1.062 1.062-1.008.972-.72 1.314-.576 1.566-.162q1.404 0 2.538 1.656t1.71 4.032.864 4.464.288 3.456z","FIRE":"M50.688-3.383v2.304q0 .468-.342.81t-.81.342h-48.384q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h48.384q.468 0 .81.342t.342.81zm-9.216-38.016q0 2.808-.882 5.184t-2.304 4.05-3.15 3.168-3.456 2.79-3.15 2.592-2.304 2.934-.882 3.474q0 3.456 2.412 8.064l-.144-.036.036.036q-3.24-1.476-5.76-2.988t-4.986-3.6-4.086-4.41-2.61-5.418-.99-6.624q0-2.808.882-5.184t2.304-4.05 3.15-3.168 3.456-2.79 3.15-2.592 2.304-2.934.882-3.474q0-3.384-2.376-8.064l.108.036-.036-.036q3.24 1.476 5.76 2.988t4.986 3.6 4.086 4.41 2.61 5.418.99 6.624z","EYE":"M59.904-29.879q-5.472-8.496-13.716-12.708 2.196 3.744 2.196 8.1 0 6.66-4.734 11.394t-11.394 4.734-11.394-4.734-4.734-11.394q0-4.356 2.196-8.1-8.244 4.212-13.716 12.708 4.788 7.38 12.006 11.754t15.642 4.374 15.642-4.374 12.006-11.754zm-25.92-13.824q0-.72-.504-1.224t-1.224-.504q-4.5 0-7.722 3.222t-3.222 7.722q0 .72.504 1.224t1.224.504 1.224-.504.504-1.224q0-3.096 2.196-5.292t5.292-2.196q.72 0 1.224-.504t.504-1.224zm30.528 13.824q0 1.224-.72 2.484-5.04 8.28-13.554 13.266t-17.982 4.986-17.982-5.004-13.554-13.248q-.72-1.26-.72-2.484t.72-2.484q5.04-8.244 13.554-13.248t17.982-5.004 17.982 5.004 13.554 13.248q.72 1.26.72 2.484z","EYE_SLASH":"M19.98-16.379l2.808-5.076q-3.132-2.268-4.896-5.724t-1.764-7.308q0-4.356 2.196-8.1-8.244 4.212-13.716 12.708 6.012 9.288 15.372 13.5zm14.004-27.324q0-.72-.504-1.224t-1.224-.504q-4.5 0-7.722 3.222t-3.222 7.722q0 .72.504 1.224t1.224.504 1.224-.504.504-1.224q0-3.096 2.196-5.292t5.292-2.196q.72 0 1.224-.504t.504-1.224zm13.068-6.876q0 .252-.036.324-3.78 6.768-11.34 20.376t-11.376 20.412l-1.764 3.204q-.36.576-1.008.576-.432 0-4.824-2.52-.576-.36-.576-1.008 0-.432 1.584-3.132-5.148-2.34-9.486-6.228t-7.506-8.82q-.72-1.116-.72-2.484t.72-2.484q5.508-8.46 13.68-13.356t17.856-4.896q3.204 0 6.48.612l1.944-3.492q.36-.576 1.008-.576.18 0 .648.216t1.116.558 1.188.666 1.134.666.702.414q.576.36.576.972zm1.332 16.092q0 5.004-2.844 9.126t-7.524 5.922l10.08-18.072q.288 1.62.288 3.024zm16.128 4.608q0 1.26-.72 2.484-1.404 2.304-3.924 5.22-5.4 6.192-12.51 9.612t-15.102 3.42l2.664-4.752q7.632-.648 14.13-4.932t10.854-11.052q-4.14-6.444-10.152-10.584l2.268-4.032q3.42 2.304 6.57 5.508t5.202 6.624q.72 1.224.72 2.484z","WARNING":"M36.864-14.939v-6.84q0-.504-.342-.846t-.81-.342h-6.912q-.468 0-.81.342t-.342.846v6.84q0 .504.342.846t.81.342h6.912q.468 0 .81-.342t.342-.846zm-.072-13.464l.648-16.524q0-.432-.36-.684-.468-.396-.864-.396h-7.92q-.396 0-.864.396-.36.252-.36.756l.612 16.452q0 .36.36.594t.864.234h6.66q.504 0 .846-.234t.378-.594zm-.504-33.624l27.648 50.688q1.26 2.268-.072 4.536-.612 1.044-1.674 1.656t-2.286.612h-55.296q-1.224 0-2.286-.612t-1.674-1.656q-1.332-2.268-.072-4.536l27.648-50.688q.612-1.116 1.692-1.764t2.34-.648 2.34.648 1.692 1.764z","PLANE":"M49.536-58.679q1.584 1.872.432 5.328t-3.888 6.192l-5.796 5.796 5.76 25.056q.18.684-.432 1.188l-4.608 3.456q-.252.216-.684.216-.144 0-.252-.036-.54-.108-.756-.576l-10.044-18.288-9.324 9.324 1.908 6.984q.18.612-.288 1.116l-3.456 3.456q-.324.324-.828.324h-.072q-.54-.072-.864-.468l-6.804-9.072-9.072-6.804q-.396-.252-.468-.828-.036-.468.324-.9l3.456-3.492q.324-.324.828-.324.216 0 .288.036l6.984 1.908 9.324-9.324-18.288-10.044q-.504-.288-.612-.864-.072-.576.324-.972l4.608-4.608q.504-.468 1.08-.288l23.94 5.724 5.76-5.76q2.736-2.736 6.192-3.888t5.328.432z","CALENDAR":"M4.608-4.535h10.368v-10.368h-10.368v10.368zm12.672 0h11.52v-10.368h-11.52v10.368zm-12.672-12.672h10.368v-11.52h-10.368v11.52zm12.672 0h11.52v-11.52h-11.52v11.52zm-12.672-13.824h10.368v-10.368h-10.368v10.368zm26.496 26.496h11.52v-10.368h-11.52v10.368zm-13.824-26.496h11.52v-10.368h-11.52v10.368zm27.648 26.496h10.368v-10.368h-10.368v10.368zm-13.824-12.672h11.52v-11.52h-11.52v11.52zm-12.672-31.104v-10.368q0-.468-.342-.81t-.81-.342h-2.304q-.468 0-.81.342t-.342.81v10.368q0 .468.342.81t.81.342h2.304q.468 0 .81-.342t.342-.81zm26.496 31.104h10.368v-11.52h-10.368v11.52zm-13.824-13.824h11.52v-10.368h-11.52v10.368zm13.824 0h10.368v-10.368h-10.368v10.368zm1.152-17.28v-10.368q0-.468-.342-.81t-.81-.342h-2.304q-.468 0-.81.342t-.342.81v10.368q0 .468.342.81t.81.342h2.304q.468 0 .81-.342t.342-.81zm13.824-2.304v46.08q0 1.872-1.368 3.24t-3.24 1.368h-50.688q-1.872 0-3.24-1.368t-1.368-3.24v-46.08q0-1.872 1.368-3.24t3.24-1.368h4.608v-3.456q0-2.376 1.692-4.068t4.068-1.692h2.304q2.376 0 4.068 1.692t1.692 4.068v3.456h13.824v-3.456q0-2.376 1.692-4.068t4.068-1.692h2.304q2.376 0 4.068 1.692t1.692 4.068v3.456h4.608q1.872 0 3.24 1.368t1.368 3.24z","RANDOM":"M23.976-47.123q-2.16 3.312-4.932 9.828-.792-1.62-1.332-2.61t-1.458-2.286-1.836-2.034-2.268-1.26-2.934-.522h-8.064q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h8.064q9 0 14.76 8.1zm40.536 28.764q0 .504-.324.828l-11.52 11.52q-.324.324-.828.324-.468 0-.81-.342t-.342-.81v-6.912q-1.152 0-3.06.018t-2.916.036-2.628-.036-2.556-.18-2.304-.378-2.268-.666-2.088-1.026-2.124-1.44-1.98-1.926-2.016-2.502q2.124-3.348 4.896-9.828.792 1.62 1.332 2.61t1.458 2.286 1.836 2.034 2.268 1.26 2.934.522h9.216v-6.912q0-.504.324-.828t.828-.324q.432 0 .864.36l11.484 11.484q.324.324.324.828zm0-32.256q0 .504-.324.828l-11.52 11.52q-.324.324-.828.324-.468 0-.81-.342t-.342-.81v-6.912h-9.216q-1.728 0-3.132.54t-2.484 1.62-1.836 2.214-1.62 2.79q-1.152 2.232-2.808 6.156-1.044 2.376-1.782 3.996t-1.944 3.78-2.304 3.6-2.664 2.988-3.24 2.466-3.834 1.512-4.608.594h-8.064q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h8.064q1.728 0 3.132-.54t2.484-1.62 1.836-2.214 1.62-2.79q1.152-2.232 2.808-6.156 1.044-2.376 1.782-3.996t1.944-3.78 2.304-3.6 2.664-2.988 3.24-2.466 3.834-1.512 4.608-.594h9.216v-6.912q0-.504.324-.828t.828-.324q.432 0 .864.36l11.484 11.484q.324.324.324.828z","COMMENT":"M64.512-32.183q0 6.264-4.32 11.574t-11.736 8.388-16.2 3.078q-2.52 0-5.22-.288-7.128 6.3-16.56 8.712-1.764.504-4.104.792-.612.072-1.098-.324t-.63-1.044v-.036q-.108-.144-.018-.432t.072-.36.162-.342l.216-.324.252-.306.288-.324q.252-.288 1.116-1.242t1.242-1.368 1.116-1.422 1.17-1.836.972-2.124.936-2.736q-5.652-3.204-8.91-7.92t-3.258-10.116q0-4.68 2.556-8.946t6.876-7.362 10.296-4.914 12.528-1.818q8.784 0 16.2 3.078t11.736 8.388 4.32 11.574z","MAGNET":"M55.296-34.487v4.608q0 7.236-3.546 13.032t-9.864 9.054-14.238 3.258-14.238-3.258-9.864-9.054-3.546-13.032v-4.608q0-.936.684-1.62t1.62-.684h13.824q.936 0 1.62.684t.684 1.62v4.608q0 1.872.846 3.24t1.926 2.052 2.556 1.08 2.304.468 1.584.072 1.584-.072 2.304-.468 2.556-1.08 1.926-2.052.846-3.24v-4.608q0-.936.684-1.62t1.62-.684h13.824q.936 0 1.62.684t.684 1.62zm-36.864-23.04v13.824q0 .936-.684 1.62t-1.62.684h-13.824q-.936 0-1.62-.684t-.684-1.62v-13.824q0-.936.684-1.62t1.62-.684h13.824q.936 0 1.62.684t.684 1.62zm36.864 0v13.824q0 .936-.684 1.62t-1.62.684h-13.824q-.936 0-1.62-.684t-.684-1.62v-13.824q0-.936.684-1.62t1.62-.684h13.824q.936 0 1.62.684t.684 1.62z","CHEVRON_UP":"M60.588-16.523l-5.976 5.94q-.684.684-1.62.684t-1.62-.684l-19.116-19.116-19.116 19.116q-.684.684-1.62.684t-1.62-.684l-5.976-5.94q-.684-.684-.684-1.638t.684-1.638l26.712-26.676q.684-.684 1.62-.684t1.62.684l26.712 26.676q.684.684.684 1.638t-.684 1.638z","CHEVRON_DOWN":"M60.588-35.351l-26.712 26.676q-.684.684-1.62.684t-1.62-.684l-26.712-26.676q-.684-.684-.684-1.638t.684-1.638l5.976-5.94q.684-.684 1.62-.684t1.62.684l19.116 19.116 19.116-19.116q.684-.684 1.62-.684t1.62.684l5.976 5.94q.684.684.684 1.638t-.684 1.638z","RETWEET":"M46.08-10.295q0 .468-.342.81t-.81.342h-34.56q-.288 0-.486-.072t-.324-.252-.198-.288-.108-.414-.036-.414v-21.6h-6.912q-.936 0-1.62-.684t-.684-1.62q0-.864.54-1.476l11.52-13.824q.684-.792 1.764-.792t1.764.792l11.52 13.824q.54.612.54 1.476 0 .936-.684 1.62t-1.62.684h-6.912v13.824h20.736q.576 0 .9.396l5.76 6.912q.252.396.252.756zm23.04-14.976q0 .864-.54 1.476l-11.52 13.824q-.72.828-1.764.828t-1.764-.828l-11.52-13.824q-.54-.612-.54-1.476 0-.936.684-1.62t1.62-.684h6.912v-13.824h-20.736q-.576 0-.9-.432l-5.76-6.912q-.252-.324-.252-.72 0-.468.342-.81t.81-.342h34.56q.288 0 .486.072t.324.252.198.288.108.414.036.414v21.6h6.912q.936 0 1.62.684t.684 1.62z","SHOPPING_CART":"M23.04-9.143q0 1.872-1.368 3.24t-3.24 1.368-3.24-1.368-1.368-3.24 1.368-3.24 3.24-1.368 3.24 1.368 1.368 3.24zm32.256 0q0 1.872-1.368 3.24t-3.24 1.368-3.24-1.368-1.368-3.24 1.368-3.24 3.24-1.368 3.24 1.368 1.368 3.24zm4.608-39.168v18.432q0 .864-.594 1.53t-1.458.774l-37.584 4.392q.468 2.16.468 2.52 0 .576-.864 2.304h33.12q.936 0 1.62.684t.684 1.62-.684 1.62-1.62.684h-36.864q-.936 0-1.62-.684t-.684-1.62q0-.396.288-1.134t.576-1.296.774-1.44.558-1.062l-6.372-29.628h-7.344q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684h9.216q.576 0 1.026.234t.702.558.468.882.288.936.198 1.062.162.936h43.236q.936 0 1.62.684t.684 1.62z","FOLDER":"M59.904-42.551v25.344q0 3.312-2.376 5.688t-5.688 2.376h-43.776q-3.312 0-5.688-2.376t-2.376-5.688v-34.56q0-3.312 2.376-5.688t5.688-2.376h11.52q3.312 0 5.688 2.376t2.376 5.688v1.152h24.192q3.312 0 5.688 2.376t2.376 5.688z","FOLDER_OPEN":"M67.644-30.167q0 1.116-1.116 2.376l-12.096 14.256q-1.548 1.836-4.338 3.114t-5.166 1.278h-39.168q-1.224 0-2.178-.468t-.954-1.548q0-1.116 1.116-2.376l12.096-14.256q1.548-1.836 4.338-3.114t5.166-1.278h39.168q1.224 0 2.178.468t.954 1.548zm-12.348-12.384v5.76h-29.952q-3.384 0-7.092 1.71t-5.904 4.302l-12.132 14.256-.18.216-.018-.45-.018-.45v-34.56q0-3.312 2.376-5.688t5.688-2.376h11.52q3.312 0 5.688 2.376t2.376 5.688v1.152h19.584q3.312 0 5.688 2.376t2.376 5.688z","ARROWS_V":"M25.344-52.919q0 .936-.684 1.62t-1.62.684h-4.608v36.864h4.608q.936 0 1.62.684t.684 1.62-.684 1.62l-9.216 9.216q-.684.684-1.62.684t-1.62-.684l-9.216-9.216q-.684-.684-.684-1.62t.684-1.62 1.62-.684h4.608v-36.864h-4.608q-.936 0-1.62-.684t-.684-1.62.684-1.62l9.216-9.216q.684-.684 1.62-.684t1.62.684l9.216 9.216q.684.684.684 1.62z","ARROWS_H":"M64.512-32.183q0 .936-.684 1.62l-9.216 9.216q-.684.684-1.62.684t-1.62-.684-.684-1.62v-4.608h-36.864v4.608q0 .936-.684 1.62t-1.62.684-1.62-.684l-9.216-9.216q-.684-.684-.684-1.62t.684-1.62l9.216-9.216q.684-.684 1.62-.684t1.62.684.684 1.62v4.608h36.864v-4.608q0-.936.684-1.62t1.62-.684 1.62.684l9.216 9.216q.684.684.684 1.62z","BAR_CHART_O":"M23.04-32.183v18.432h-9.216v-18.432h9.216zm13.824-18.432v36.864h-9.216v-36.864h9.216zm36.864 41.472v4.608h-73.728v-55.296h4.608v50.688h69.12zm-23.04-32.256v27.648h-9.216v-27.648h9.216zm13.824-13.824v41.472h-9.216v-41.472h9.216z","TWITTER_SQUARE":"M46.08-42.479q-2.016.9-4.356 1.224 2.448-1.44 3.348-4.212-2.34 1.368-4.824 1.836-2.196-2.376-5.508-2.376-3.132 0-5.346 2.214t-2.214 5.346q0 1.044.18 1.728-4.644-.252-8.712-2.34t-6.912-5.58q-1.044 1.8-1.044 3.816 0 4.104 3.276 6.3-1.692-.036-3.6-.936v.072q0 2.7 1.8 4.806t4.428 2.61q-1.044.288-1.836.288-.468 0-1.404-.144.756 2.268 2.682 3.744t4.374 1.512q-4.176 3.24-9.396 3.24-.936 0-1.8-.108 5.328 3.384 11.592 3.384 4.032 0 7.56-1.278t6.048-3.42 4.338-4.932 2.7-5.832.882-6.066q0-.648-.036-.972 2.268-1.62 3.78-3.924zm9.216-6.984v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","FACEBOOK_SQUARE":"M44.928-59.831q4.284 0 7.326 3.042t3.042 7.326v34.56q0 4.284-3.042 7.326t-7.326 3.042h-6.768v-21.42h7.164l1.08-8.352h-8.244v-5.328q0-2.016.846-3.024t3.294-1.008l4.392-.036v-7.452q-2.268-.324-6.408-.324-4.896 0-7.83 2.88t-2.934 8.136v6.156h-7.2v8.352h7.2v21.42h-19.152q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56z","CAMERA_RETRO":"M33.408-34.487q0-.504-.324-.828t-.828-.324q-2.376 0-4.068 1.692t-1.692 4.068q0 .504.324.828t.828.324.828-.324.324-.828q0-1.44 1.008-2.448t2.448-1.008q.504 0 .828-.324t.324-.828zm8.064 4.68q0 3.816-2.7 6.516t-6.516 2.7-6.516-2.7-2.7-6.516 2.7-6.516 6.516-2.7 6.516 2.7 2.7 6.516zm-36.864 20.664h55.296v-4.608h-55.296v4.608zm41.472-20.664q0-5.724-4.05-9.774t-9.774-4.05-9.774 4.05-4.05 9.774 4.05 9.774 9.774 4.05 9.774-4.05 4.05-9.774zm-36.864-23.112h13.824v-4.608h-13.824v4.608zm-4.608 6.912h55.296v-9.216000000000001h-29.808l-2.304 4.608h-23.184v4.608zm59.904-9.216v46.08q0 1.908-1.35 3.258t-3.258 1.35h-55.296q-1.908 0-3.258-1.35t-1.35-3.258v-46.08q0-1.908 1.35-3.258t3.258-1.35h55.296q1.908 0 3.258 1.35t1.35 3.258z","KEY":"M29.952-46.007q0-2.88-2.016-4.896t-4.896-2.016-4.896 2.016-2.016 4.896q0 1.512.684 2.988-1.476-.684-2.988-.684-2.88 0-4.896 2.016t-2.016 4.896 2.016 4.896 4.896 2.016 4.896-2.016 2.016-4.896q0-1.512-.684-2.988 1.476.684 2.988.684 2.88 0 4.896-2.016t2.016-4.896zm30.636 25.344q0 .612-1.764 2.376t-2.376 1.764q-.324 0-1.026-.576t-1.314-1.188-1.386-1.44-.882-.936l-3.456 3.456 7.92 7.92q1.008 1.008 1.008 2.448 0 1.512-1.404 2.916t-2.916 1.404q-1.44 0-2.448-1.008l-24.156-24.156q-6.336 4.716-13.14 4.716-5.868 0-9.558-3.69t-3.69-9.558q0-5.76 3.42-11.268t8.928-8.928 11.268-3.42q5.868 0 9.558 3.69t3.69 9.558q0 6.804-4.716 13.14l12.78 12.78 3.456-3.456q-.108-.108-.936-.882t-1.44-1.386-1.188-1.314-.576-1.026q0-.612 1.764-2.376t2.376-1.764q.468 0 .828.36.216.216 1.656 1.602t2.952 2.862 3.114 3.096 2.628 2.808 1.026 1.476z","GEARS":"M32.256-32.183q0-3.816-2.7-6.516t-6.516-2.7-6.516 2.7-2.7 6.516 2.7 6.516 6.516 2.7 6.516-2.7 2.7-6.516zm27.648 18.432q0-1.872-1.368-3.24t-3.24-1.368-3.24 1.368-1.368 3.24q0 1.908 1.35 3.258t3.258 1.35 3.258-1.35 1.35-3.258zm0-36.864q0-1.872-1.368-3.24t-3.24-1.368-3.24 1.368-1.368 3.24q0 1.908 1.35 3.258t3.258 1.35 3.258-1.35 1.35-3.258zm-13.824 15.156v6.66q0 .36-.252.702t-.576.378l-5.58.864q-.396 1.26-1.152 2.736 1.224 1.728 3.24 4.14.252.36.252.72 0 .432-.252.684-.828 1.08-2.97 3.222t-2.826 2.142q-.396 0-.756-.252l-4.14-3.24q-1.332.684-2.772 1.116-.396 3.888-.828 5.58-.252.864-1.08.864h-6.696q-.396 0-.72-.27t-.36-.63l-.828-5.508q-1.224-.36-2.7-1.116l-4.248 3.204q-.252.252-.72.252-.396 0-.756-.288-5.184-4.788-5.184-5.76 0-.324.252-.684.36-.504 1.476-1.908t1.692-2.196q-.828-1.584-1.26-2.952l-5.472-.864q-.36-.036-.612-.342t-.252-.702v-6.66q0-.36.252-.702t.576-.378l5.58-.864q.396-1.26 1.152-2.736-1.224-1.728-3.24-4.14-.252-.396-.252-.72 0-.432.252-.72.792-1.08 2.952-3.204t2.844-2.124q.396 0 .756.252l4.14 3.24q1.224-.648 2.772-1.152.396-3.888.828-5.544.252-.864 1.08-.864h6.696q.396 0 .72.27t.36.63l.828 5.508q1.224.36 2.7 1.116l4.248-3.204q.288-.252.72-.252.396 0 .756.288 5.184 4.788 5.184 5.76 0 .324-.252.684-.432.576-1.512 1.944t-1.62 2.16q.828 1.728 1.224 2.952l5.472.828q.36.072.612.378t.252.702zm23.04 19.188v5.04q0 .576-5.364 1.116-.432.972-1.08 1.872 1.836 4.068 1.836 4.968 0 .144-.144.252-4.392 2.556-4.464 2.556-.288 0-1.656-1.692t-1.872-2.448q-.72.072-1.08.072t-1.08-.072q-.504.756-1.872 2.448t-1.656 1.692q-.072 0-4.464-2.556-.144-.108-.144-.252 0-.9 1.836-4.968-.648-.9-1.08-1.872-5.364-.54-5.364-1.116v-5.04q0-.576 5.364-1.116.468-1.044 1.08-1.872-1.836-4.068-1.836-4.968 0-.144.144-.252.144-.072 1.26-.72t2.124-1.224 1.08-.576q.288 0 1.656 1.674t1.872 2.43q.72-.072 1.08-.072t1.08.072q1.836-2.556 3.312-4.032l.216-.072q.144 0 4.464 2.52.144.108.144.252 0 .9-1.836 4.968.612.828 1.08 1.872 5.364.54 5.364 1.116zm0-36.864v5.04q0 .576-5.364 1.116-.432.972-1.08 1.872 1.836 4.068 1.836 4.968 0 .144-.144.252-4.392 2.556-4.464 2.556-.288 0-1.656-1.692t-1.872-2.448q-.72.072-1.08.072t-1.08-.072q-.504.756-1.872 2.448t-1.656 1.692q-.072 0-4.464-2.556-.144-.108-.144-.252 0-.9 1.836-4.968-.648-.9-1.08-1.872-5.364-.54-5.364-1.116v-5.04q0-.576 5.364-1.116.468-1.044 1.08-1.872-1.836-4.068-1.836-4.968 0-.144.144-.252.144-.072 1.26-.72t2.124-1.224 1.08-.576q.288 0 1.656 1.674t1.872 2.43q.72-.072 1.08-.072t1.08.072q1.836-2.556 3.312-4.032l.216-.072q.144 0 4.464 2.52.144.108.144.252 0 .9-1.836 4.968.612.828 1.08 1.872 5.364.54 5.364 1.116z","COMMENTS":"M50.688-36.791q0 5.004-3.384 9.252t-9.234 6.714-12.726 2.466q-3.096 0-6.336-.576-4.464 3.168-10.008 4.608-1.296.324-3.096.576h-.108q-.396 0-.738-.288t-.414-.756q-.036-.108-.036-.234t.018-.234.072-.216l.09-.18.126-.198.144-.18.162-.18.144-.162q.18-.216.828-.9t.936-1.062.81-1.044.9-1.386.738-1.584q-4.464-2.592-7.02-6.372t-2.556-8.064q0-5.004 3.384-9.252t9.234-6.714 12.726-2.466 12.726 2.466 9.234 6.714 3.384 9.252zm13.824 9.216q0 4.32-2.556 8.082t-7.02 6.354q.36.864.738 1.584t.9 1.386.81 1.044.936 1.062.828.9l.144.162.162.18.144.18.126.198.09.18.072.216.018.234-.036.234q-.108.504-.468.792t-.792.252q-1.8-.252-3.096-.576-5.544-1.44-10.008-4.608-3.24.576-6.336.576-9.756 0-16.992-4.752 2.088.144 3.168.144 5.796 0 11.124-1.62t9.504-4.644q4.5-3.312 6.912-7.632t2.412-9.144q0-2.772-.828-5.472 4.644 2.556 7.344 6.408t2.7 8.28z","THUMBS_O_UP":"M9.216-16.055q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm41.472-20.736q0-1.836-1.404-3.222t-3.204-1.386h-12.672q0-2.088 1.728-5.742t1.728-5.778q0-3.528-1.152-5.22t-4.608-1.692q-.936.936-1.368 3.06t-1.098 4.518-2.142 3.942q-.792.828-2.772 3.276-.144.18-.828 1.08t-1.134 1.476-1.242 1.53-1.44 1.584-1.386 1.278-1.44.972-1.278.324h-1.152v23.04h1.152q.468 0 1.134.108t1.188.234 1.368.396 1.26.414 1.278.45 1.044.378q7.596 2.628 12.312 2.628h4.356q6.912 0 6.912-6.012 0-.936-.18-2.016 1.08-.576 1.71-1.89t.63-2.646-.648-2.484q1.908-1.8 1.908-4.284 0-.9-.36-1.998t-.9-1.71q1.152-.036 1.926-1.692t.774-2.916zm4.608-.036q0 3.204-1.764 5.868.324 1.188.324 2.484 0 2.772-1.368 5.184.108.756.108 1.548 0 3.636-2.16 6.408.036 5.004-3.06 7.902t-8.172 2.898h-4.644q-3.456 0-6.822-.81t-7.794-2.358q-4.176-1.44-4.968-1.44h-10.368q-1.908 0-3.258-1.35t-1.35-3.258v-23.04q0-1.908 1.35-3.258t3.258-1.35h9.864q1.296-.864 4.932-5.58 2.088-2.7 3.852-4.608.864-.9 1.278-3.078t1.098-4.554 2.232-3.888q1.404-1.332 3.24-1.332 3.024 0 5.436 1.17t3.672 3.654 1.26 6.696q0 3.348-1.728 6.912h6.336q3.744 0 6.48 2.736t2.736 6.444z","THUMBS_O_DOWN":"M9.216-48.311q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm41.472 20.736q0-1.26-.774-2.916t-1.926-1.692q.54-.612.9-1.71t.36-1.998q0-2.484-1.908-4.284.648-1.152.648-2.484t-.63-2.646-1.71-1.89q.18-1.08.18-2.016 0-3.06-1.764-4.536t-4.896-1.476h-4.608q-4.716 0-12.312 2.628-.18.072-1.044.378t-1.278.45-1.26.414-1.368.396-1.188.234-1.134.108h-1.152v23.04h1.152q.576 0 1.278.324t1.44.972 1.386 1.278 1.44 1.584 1.242 1.53 1.134 1.476.828 1.08q1.98 2.448 2.772 3.276 1.476 1.548 2.142 3.942t1.098 4.518 1.368 3.06q3.456 0 4.608-1.692t1.152-5.22q0-2.124-1.728-5.778t-1.728-5.742h12.672q1.8 0 3.204-1.386t1.404-3.222zm4.608.036q0 3.708-2.736 6.444t-6.48 2.736h-6.336q1.728 3.564 1.728 6.912 0 4.248-1.26 6.696-1.26 2.484-3.672 3.654t-5.436 1.17q-1.836 0-3.24-1.332-1.224-1.188-1.944-2.952t-.918-3.258-.63-3.042-1.116-2.304q-1.728-1.8-3.852-4.572-3.636-4.716-4.932-5.58h-9.864q-1.908 0-3.258-1.35t-1.35-3.258v-23.04q0-1.908 1.35-3.258t3.258-1.35h10.368q.792 0 4.968-1.44 4.608-1.584 8.028-2.376t7.2-.792h4.032q5.04 0 8.154 2.844t3.078 7.776v.18q2.16 2.772 2.16 6.408 0 .792-.108 1.548 1.368 2.412 1.368 5.184 0 1.296-.324 2.484 1.764 2.664 1.764 5.868z","STAR_HALF":"M29.952-63.287v48.204l-16.164 8.496q-.792.432-1.44.432-.756 0-1.134-.522t-.378-1.278q0-.216.072-.72l3.096-18-13.104-12.744q-.9-.972-.9-1.728 0-1.332 2.016-1.656l18.072-2.628 8.1-16.38q.684-1.476 1.764-1.476z","HEART_O":"M59.904-42.983q0-2.916-.774-5.148t-1.98-3.546-2.934-2.142-3.384-1.116-3.528-.288-4.032.918-3.978 2.304-3.114 2.592-2.16 2.214q-.648.792-1.764.792t-1.764-.792q-.864-1.008-2.16-2.214t-3.114-2.592-3.978-2.304-4.032-.918-3.528.288-3.384 1.116-2.934 2.142-1.98 3.546-.774 5.148q0 6.048 6.732 12.78l20.916 20.16 20.88-20.124q6.768-6.768 6.768-12.816zm4.608 0q0 7.956-8.244 16.2l-22.428 21.6q-.648.648-1.584.648t-1.584-.648l-22.464-21.672q-.36-.288-.99-.936t-1.998-2.358-2.448-3.51-1.926-4.356-.846-4.968q0-7.92 4.572-12.384t12.636-4.464q2.232 0 4.554.774t4.32 2.088 3.438 2.466 2.736 2.448q1.296-1.296 2.736-2.448t3.438-2.466 4.32-2.088 4.554-.774q8.064 0 12.636 4.464t4.572 12.384z","SIGN_OUT":"M23.04-12.599q0 .144.036.72t.018.954-.108.846-.36.702-.738.234h-11.52q-4.284 0-7.326-3.042t-3.042-7.326v-25.344q0-4.284 3.042-7.326t7.326-3.042h11.52q.468 0 .81.342t.342.81q0 .144.036.72t.018.954-.108.846-.36.702-.738.234h-11.52q-2.376 0-4.068 1.692t-1.692 4.068v25.344q0 2.376 1.692 4.068t4.068 1.692h11.232000000000001l.414.036.414.108.288.198.252.324.072.486zm33.408-19.584q0 .936-.684 1.62l-19.584 19.584q-.684.684-1.62.684t-1.62-.684-.684-1.62v-10.368h-16.128q-.936 0-1.62-.684t-.684-1.62v-13.824q0-.936.684-1.62t1.62-.684h16.128v-10.368q0-.936.684-1.62t1.62-.684 1.62.684l19.584 19.584q.684.684.684 1.62z","LINKEDIN_SQUARE":"M8.532-13.535h8.316v-24.984h-8.316v24.984zm8.856-32.688q-.036-1.872-1.296-3.096t-3.348-1.224-3.402 1.224-1.314 3.096q0 1.836 1.278 3.078t3.33 1.242h.036q2.124 0 3.42-1.242t1.296-3.078zm21.06 32.688h8.316v-14.328q0-5.544-2.628-8.388t-6.948-2.844q-4.896 0-7.524 4.212h.072v-3.636h-8.316q.108 2.376 0 24.984h8.316v-13.968q0-1.368.252-2.016.54-1.26 1.62-2.142t2.664-.882q4.176 0 4.176 5.652v13.356zm16.848-35.928v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","THUMB_TACK":"M17.28-33.335v-16.128q0-.504-.324-.828t-.828-.324-.828.324-.324.828v16.128q0 .504.324.828t.828.324.828-.324.324-.828zm24.192 12.672q0 .936-.684 1.62t-1.62.684h-15.444l-1.836 17.388q-.072.432-.378.738t-.738.306h-.036q-.972 0-1.152-.972l-2.736-17.46h-14.544q-.936 0-1.62-.684t-.684-1.62q0-4.428 2.826-7.974t6.39-3.546v-18.432q-1.872 0-3.24-1.368t-1.368-3.24 1.368-3.24 3.24-1.368h23.04q1.872 0 3.24 1.368t1.368 3.24-1.368 3.24-3.24 1.368v18.432q3.564 0 6.39 3.546t2.826 7.974z","EXTERNAL_LINK":"M50.688-31.031v11.52q0 4.284-3.042 7.326t-7.326 3.042h-29.952q-4.284 0-7.326-3.042t-3.042-7.326v-29.952q0-4.284 3.042-7.326t7.326-3.042h25.344q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-25.344q-2.376 0-4.068 1.692t-1.692 4.068v29.952q0 2.376 1.692 4.068t4.068 1.692h29.952q2.376 0 4.068-1.692t1.692-4.068v-11.52q0-.504.324-.828t.828-.324h2.304q.504 0 .828.324t.324.828zm13.824-31.104v18.432q0 .936-.684 1.62t-1.62.684-1.62-.684l-6.336-6.336-23.472 23.472q-.36.36-.828.36t-.828-.36l-4.104-4.104q-.36-.36-.36-.828t.36-.828l23.472-23.472-6.336-6.336q-.684-.684-.684-1.62t.684-1.62 1.62-.684h18.432q.936 0 1.62.684t.684 1.62z","SIGN_IN":"M42.624-32.183q0 .936-.684 1.62l-19.584 19.584q-.684.684-1.62.684t-1.62-.684-.684-1.62v-10.368h-16.128q-.936 0-1.62-.684t-.684-1.62v-13.824q0-.936.684-1.62t1.62-.684h16.128v-10.368q0-.936.684-1.62t1.62-.684 1.62.684l19.584 19.584q.684.684.684 1.62zm12.672-12.672v25.344q0 4.284-3.042 7.326t-7.326 3.042h-11.52q-.468 0-.81-.342t-.342-.81q0-.144-.036-.72t-.018-.954.108-.846.36-.702.738-.234h11.52q2.376 0 4.068-1.692t1.692-4.068v-25.344q0-2.376-1.692-4.068t-4.068-1.692h-11.232000000000001l-.414-.036-.414-.108-.288-.198-.252-.324-.072-.486q0-.144-.036-.72t-.018-.954.108-.846.36-.702.738-.234h11.52q4.284 0 7.326 3.042t3.042 7.326z","TROPHY":"M16.488-32.651q-2.664-5.832-2.664-13.356h-9.216v3.456q0 2.808 3.402 5.832t8.478 4.068zm38.808-9.9v-3.456h-9.216q0 7.524-2.664 13.356 5.076-1.044 8.478-4.068t3.402-5.832zm4.608-4.608v4.608q0 2.556-1.494 5.148t-4.032 4.68-6.228 3.51-7.758 1.602q-1.512 1.944-3.42 3.42-1.368 1.224-1.89 2.61t-.522 3.222q0 1.944 1.098 3.276t3.51 1.332q2.7 0 4.806 1.638t2.106 4.122v2.304q0 .504-.324.828t-.828.324h-29.952q-.504 0-.828-.324t-.324-.828v-2.304q0-2.484 2.106-4.122t4.806-1.638q2.412 0 3.51-1.332t1.098-3.276q0-1.836-.522-3.222t-1.89-2.61q-1.908-1.476-3.42-3.42-4.068-.18-7.758-1.602t-6.228-3.51-4.032-4.68-1.494-5.148v-4.608q0-1.44 1.008-2.448t2.448-1.008h10.368v-3.456q0-2.376 1.692-4.068t4.068-1.692h20.736q2.376 0 4.068 1.692t1.692 4.068v3.456h10.368q1.44 0 2.448 1.008t1.008 2.448z","GITHUB_SQUARE":"M18.684-21.239q.144-.216-.108-.468-.324-.252-.504-.072-.144.216.108.468.324.252.504.072zm-1.008-1.476q-.18-.252-.432-.144-.216.144 0 .432.252.288.432.18.216-.144 0-.468zm-1.476-1.44q.072-.144-.18-.288-.252-.072-.288.072-.108.18.144.288.288.072.324-.072zm.756.828q.072-.036.054-.162t-.126-.198q-.216-.252-.36-.108t.036.396q.216.216.396.072zm3.096 2.7q.072-.252-.324-.396-.324-.108-.468.144-.072.252.324.396.324.108.468-.144zm1.512.108q0-.288-.432-.288-.36 0-.36.288t.396.288.396-.288zm1.404-.252q-.072-.252-.468-.18t-.324.324q.072.288.432.216t.36-.36zm23.112-11.412q0-7.632-5.4-13.032t-13.032-5.4-13.032 5.4-5.4 13.032q0 6.012 3.528 10.818t9.072 6.678q.648.108.954-.18t.306-.72q0-1.872-.036-3.42-.216.036-.558.09t-1.278.072-1.728-.144-1.566-.72-1.062-1.494q-.828-2.124-2.052-2.664l-.162-.126-.288-.288-.252-.342.144-.27.702-.126q.216 0 .54.072t1.08.558 1.188 1.278q.576 1.008 1.35 1.512t1.566.504 1.368-.126 1.08-.342q.252-1.692 1.188-2.484-1.764-.216-3.096-.666t-2.628-1.404-1.998-2.736-.702-4.302q0-2.844 1.908-4.932-.864-2.232.18-4.896.684-.216 1.962.27t2.178 1.062l.936.576q2.088-.612 4.608-.612t4.608.612q.396-.252 1.026-.648t1.998-.936 2.052-.324q1.044 2.664.18 4.896 1.908 2.088 1.908 4.932 0 2.052-.504 3.618t-1.278 2.52-1.926 1.602-2.25.936-2.466.432q1.26 1.116 1.26 3.42 0 1.44-.018 3.204t-.018 1.836q0 .432.306.72t.954.18q5.544-1.872 9.072-6.678t3.528-10.818zm9.216-17.28v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","UPLOAD":"M46.08-11.447q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm9.216 0q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm4.608-8.064v11.52q0 1.44-1.008 2.448t-2.448 1.008h-52.992q-1.44 0-2.448-1.008t-1.008-2.448v-11.52q0-1.44 1.008-2.448t2.448-1.008h15.372q.756 2.016 2.538 3.312t3.978 1.296h9.216q2.196 0 3.978-1.296t2.538-3.312h15.372q1.44 0 2.448 1.008t1.008 2.448zm-11.7-23.328q-.612 1.44-2.124 1.44h-9.216v16.128q0 .936-.684 1.62t-1.62.684h-9.216q-.936 0-1.62-.684t-.684-1.62v-16.128h-9.216q-1.512 0-2.124-1.44-.612-1.404.504-2.484l16.128-16.128q.648-.684 1.62-.684t1.62.684l16.128 16.128q1.116 1.08.504 2.484z","LEMON_O":"M50.652-34.703q0-1.584-.252-4.086t-.648-3.474q-.432-1.08-.612-1.584t-.324-1.314-.144-1.746q0-.828.18-2.466t.18-2.43q0-1.332-.36-1.98-.144-.036-.468-.036-.684 0-2.088.162t-2.124.162q-2.16 0-6.336-.864t-6.3-.864q-1.548 0-3.402.414t-3.06.846-3.222 1.224q-4.932 1.944-7.272 3.708-3.456 2.628-5.742 6.822t-3.168 8.496-.882 8.946q0 1.44.45 4.32t.45 4.356q0 .828-.396 2.394t-.396 2.358.432 1.314 1.224.522q.864 0 2.61-.396t2.646-.396q2.052 0 6.102.558t6.102.558q6.516 0 10.224-1.296 4.644-1.62 8.478-5.49t5.976-8.838 2.142-9.9zm4.608-.072q0 5.94-2.52 11.79t-7.056 10.368-10.116 6.498q-4.464 1.584-11.736 1.584-2.052 0-6.12-.522t-6.084-.522q-.864 0-2.61.522t-2.646.522q-2.628 0-4.446-1.998t-1.818-4.626q0-.864.396-2.448t.396-2.412q0-1.44-.45-4.338t-.45-4.374q0-3.996.648-7.83t1.962-7.542 3.618-6.984 5.4-5.616q2.808-2.124 8.352-4.32 6.984-2.808 11.376-2.808 2.16 0 6.318.864t6.246.864q.684 0 2.052-.18t2.088-.18q2.916 0 4.248 1.818t1.332 4.842q0 .828-.18 2.448t-.18 2.448q0 .36.036.666t.108.612.144.486.234.576.234.612q.576 1.44.9 4.266t.324 4.914z","PHONE":"M50.688-19.799q0 .972-.36 2.538t-.756 2.466q-.756 1.8-4.392 3.816-3.384 1.836-6.696 1.836-.972 0-1.89-.126t-2.07-.45-1.71-.522-1.998-.738-1.764-.648q-3.528-1.26-6.3-2.988-4.608-2.844-9.522-7.758t-7.758-9.522q-1.728-2.772-2.988-6.3-.108-.324-.648-1.764t-.738-1.998-.522-1.71-.45-2.07-.126-1.89q0-3.312 1.836-6.696 2.016-3.636 3.816-4.392.9-.396 2.466-.756t2.538-.36q.504 0 .756.108.648.216 1.908 2.736.396.684 1.08 1.944t1.26 2.286 1.116 1.926q.108.144.63.9t.774 1.278.252 1.026q0 .72-1.026 1.8t-2.232 1.98-2.232 1.908-1.026 1.656q0 .324.18.81t.306.738.504.864.414.684q2.736 4.932 6.264 8.46t8.46 6.264q.072.036.684.414t.864.504.738.306.81.18q.648 0 1.656-1.026t1.908-2.232 1.98-2.232 1.8-1.026q.504 0 1.026.252t1.278.774.9.63q.9.54 1.926 1.116t2.286 1.26 1.944 1.08q2.52 1.26 2.736 1.908.108.252.108.756z","SQUARE_O":"M40.32-55.223h-29.952q-2.376 0-4.068 1.692t-1.692 4.068v29.952q0 2.376 1.692 4.068t4.068 1.692h29.952q2.376 0 4.068-1.692t1.692-4.068v-29.952q0-2.376-1.692-4.068t-4.068-1.692zm10.368 5.76v29.952q0 4.284-3.042 7.326t-7.326 3.042h-29.952q-4.284 0-7.326-3.042t-3.042-7.326v-29.952q0-4.284 3.042-7.326t7.326-3.042h29.952q4.284 0 7.326 3.042t3.042 7.326z","BOOKMARK_O":"M41.472-55.223h-36.864v44.712l15.228-14.616 3.204-3.06 3.204 3.06 15.228 14.616v-44.712zm.432-4.608q.828 0 1.584.324 1.188.468 1.89 1.476t.702 2.232v46.404q0 1.224-.702 2.232t-1.89 1.476q-.684.288-1.584.288-1.728 0-2.988-1.152l-15.876-15.264-15.876 15.264q-1.296 1.188-2.988 1.188-.828 0-1.584-.324-1.188-.468-1.89-1.476t-.702-2.232v-46.404q0-1.224.702-2.232t1.89-1.476q.756-.324 1.584-.324h37.728z","PHONE_SQUARE":"M46.08-21.491q0-.396-.072-.576-.108-.288-1.386-1.062t-3.186-1.782l-1.908-1.044q-.18-.108-.684-.468t-.9-.54-.756-.18q-.648 0-1.692 1.17t-2.052 2.358-1.584 1.188q-.252 0-.594-.126t-.558-.234-.612-.342-.504-.306q-3.564-1.98-6.138-4.554t-4.554-6.138q-.072-.108-.306-.504t-.342-.612-.234-.558-.126-.594q0-.468.738-1.206t1.62-1.386 1.62-1.422.738-1.314q0-.36-.18-.756t-.54-.9-.468-.684q-.108-.216-.54-1.026t-.9-1.638-.954-1.71-.9-1.458-.594-.648-.576-.072q-1.728 0-3.636.792-1.656.756-2.88 3.402t-1.224 4.698q0 .576.09 1.224t.18 1.098.324 1.188.36 1.062.45 1.188.396 1.08q2.16 5.904 7.794 11.538t11.538 7.794q.216.072 1.08.396t1.188.45 1.062.36 1.188.324 1.098.18 1.224.09q2.052 0 4.698-1.224t3.402-2.88q.792-1.908.792-3.636zm9.216-27.972v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","TWITTER":"M58.32-49.751q-2.412 3.528-5.832 6.012.036.504.036 1.512 0 4.68-1.368 9.342t-4.158 8.946-6.642 7.578-9.288 5.256-11.628 1.962q-9.756 0-17.856-5.22 1.26.144 2.808.144 8.1 0 14.436-4.968-3.78-.072-6.768-2.322t-4.104-5.742q1.188.18 2.196.18 1.548 0 3.06-.396-4.032-.828-6.678-4.014t-2.646-7.398v-.144q2.448 1.368 5.256 1.476-2.376-1.584-3.78-4.14t-1.404-5.544q0-3.168 1.584-5.868 4.356 5.364 10.602 8.586t13.374 3.582q-.288-1.368-.288-2.664 0-4.824 3.402-8.226t8.226-3.402q5.04 0 8.496 3.672 3.924-.756 7.38-2.808-1.332 4.14-5.112 6.408 3.348-.36 6.696-1.8z","FACEBOOK_F":"M34.524-64.007v9.504h-5.652q-3.096 0-4.176 1.296t-1.08 3.888v6.804h10.548l-1.404 10.656h-9.144v27.324h-11.016v-27.324h-9.18v-10.656h9.18v-7.848q0-6.696 3.744-10.386t9.972-3.69q5.292 0 8.208.432z","GITHUB":"M27.648-59.831q7.524 0 13.878 3.708t10.062 10.062 3.708 13.878q0 9.036-5.274 16.254t-13.626 9.99q-.972.18-1.44-.252t-.468-1.08q0-.108.018-2.754t.018-4.842q0-3.492-1.872-5.112 2.052-.216 3.69-.648t3.384-1.404 2.916-2.394 1.908-3.78.738-5.418q0-4.284-2.844-7.416 1.332-3.276-.288-7.344-1.008-.324-2.916.396t-3.312 1.584l-1.368.864q-3.348-.936-6.912-.936t-6.912.936q-.576-.396-1.53-.972t-3.006-1.386-3.06-.486q-1.62 4.068-.288 7.344-2.844 3.132-2.844 7.416 0 3.06.738 5.4t1.89 3.78 2.898 2.412 3.384 1.404 3.69.648q-1.404 1.296-1.764 3.708-.756.36-1.62.54t-2.052.18-2.358-.774-1.998-2.25q-.684-1.152-1.746-1.872t-1.782-.864l-.72-.108q-.756 0-1.044.162t-.18.414.324.504.468.432l.252.18q.792.36 1.566 1.368t1.134 1.836l.36.828q.468 1.368 1.584 2.214t2.412 1.08 2.502.252 1.998-.126l.828-.144q0 1.368.018 3.186t.018 1.962q0 .648-.468 1.08t-1.44.252q-8.352-2.772-13.626-9.99t-5.274-16.254q0-7.524 3.708-13.878t10.062-10.062 13.878-3.708zm-17.172 39.708q.108-.252-.252-.432-.36-.108-.468.072-.108.252.252.432.324.216.468-.072zm1.116 1.224q.252-.18-.072-.576-.36-.324-.576-.108-.252.18.072.576.36.36.576.108zm1.08 1.62q.324-.252 0-.684-.288-.468-.612-.216-.324.18 0 .648t.612.252zm1.512 1.512q.288-.288-.144-.684-.432-.432-.72-.108-.324.288.144.684.432.432.72.108zm2.052.9q.108-.396-.468-.576-.54-.144-.684.252t.468.54q.54.216.684-.216zm2.268.18q0-.468-.612-.396-.576 0-.576.396 0 .468.612.396.576 0 .576-.396zm2.088-.36q-.072-.396-.648-.324-.576.108-.504.54t.648.288.504-.504z","UNLOCK":"M59.904-43.703v9.216q0 .936-.684 1.62t-1.62.684h-2.304q-.936 0-1.62-.684t-.684-1.62v-9.216q0-3.816-2.7-6.516t-6.516-2.7-6.516 2.7-2.7 6.516v6.912h3.456q1.44 0 2.448 1.008t1.008 2.448v20.736q0 1.44-1.008 2.448t-2.448 1.008h-34.56q-1.44 0-2.448-1.008t-1.008-2.448v-20.736q0-1.44 1.008-2.448t2.448-1.008h24.192v-6.912q0-6.66 4.734-11.394t11.394-4.734 11.394 4.734 4.734 11.394z","CREDIT_CARD":"M63.36-59.831q2.376 0 4.068 1.692t1.692 4.068v43.776q0 2.376-1.692 4.068t-4.068 1.692h-57.6q-2.376 0-4.068-1.692t-1.692-4.068v-43.776q0-2.376 1.692-4.068t4.068-1.692h57.6zm-57.6 4.608q-.468 0-.81.342t-.342.81v8.064h59.904v-8.064q0-.468-.342-.81t-.81-.342h-57.6zm57.6 46.08q.468 0 .81-.342t.342-.81v-21.888h-59.904v21.888q0 .468.342.81t.81.342h57.6zm-54.144-4.608v-4.608h9.216v4.608h-9.216zm13.824 0v-4.608h13.824v4.608h-13.824z","RSS":"M13.824-16.055q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm18.432 4.428q.072 1.008-.612 1.728-.648.756-1.692.756h-4.86q-.9 0-1.548-.594t-.72-1.494q-.792-8.244-6.642-14.094t-14.094-6.642q-.9-.072-1.494-.72t-.594-1.548v-4.86q0-1.044.756-1.692.612-.612 1.548-.612h.18q5.76.468 11.016 2.898t9.324 6.534q4.104 4.068 6.534 9.324t2.898 11.016zm18.432.072q.072.972-.648 1.692-.648.72-1.656.72h-5.148q-.936 0-1.602-.63t-.702-1.53q-.432-7.74-3.636-14.706t-8.334-12.096-12.096-8.334-14.706-3.672q-.9-.036-1.53-.702t-.63-1.566v-5.148q0-1.008.72-1.656.648-.648 1.584-.648h.108q9.432.468 18.054 4.32t15.318 10.584q6.732 6.696 10.584 15.318t4.32 18.054z","HDD_O":"M37.44-20.663q0 1.188-.846 2.034t-2.034.846-2.034-.846-.846-2.034.846-2.034 2.034-.846 2.034.846.846 2.034zm9.216 0q0 1.188-.846 2.034t-2.034.846-2.034-.846-.846-2.034.846-2.034 2.034-.846 2.034.846.846 2.034zm4.032 5.76v-11.52q0-.468-.342-.81t-.81-.342h-43.776q-.468 0-.81.342t-.342.81v11.52q0 .468.342.81t.81.342h43.776q.468 0 .81-.342t.342-.81zm-44.28-17.28h42.48l-5.652-17.352q-.144-.468-.576-.774t-.936-.306h-28.152q-.504 0-.936.306t-.576.774zm48.888 5.76v11.52q0 2.376-1.692 4.068t-4.068 1.692h-43.776q-2.376 0-4.068-1.692t-1.692-4.068v-11.52q0-.9.576-2.7l7.092-21.816q.612-1.908 2.268-3.096t3.636-1.188h28.152q1.98 0 3.636 1.188t2.268 3.096l7.092 21.816q.576 1.8.576 2.7z","BULLHORN":"M59.904-41.399q1.908 0 3.258 1.35t1.35 3.258-1.35 3.258-3.258 1.35v13.824q0 1.872-1.368 3.24t-3.24 1.368q-15.012-12.492-29.232-13.68-2.088.684-3.276 2.376t-1.116 3.618 1.44 3.33q-.72 1.188-.828 2.358t.216 2.088 1.206 1.98 1.728 1.8 2.214 1.818q-1.044 2.088-4.014 2.988t-6.066.414-4.752-1.998q-.252-.828-1.062-3.15t-1.152-3.402-.828-3.204-.54-3.636.126-3.546.792-3.978h-4.392q-2.376 0-4.068-1.692t-1.692-4.068v-6.912q0-2.376 1.692-4.068t4.068-1.692h17.28q15.66 0 32.256-13.824 1.872 0 3.24 1.368t1.368 3.24v13.824zm-4.608 21.744v-34.344q-14.184 10.872-27.648 12.348v9.72q13.572 1.512 27.648 12.276z","BELL_O":"M32.832-3.383q0-.576-.576-.576-2.124 0-3.654-1.53t-1.53-3.654q0-.576-.576-.576t-.576.576q0 2.628 1.854 4.482t4.482 1.854q.576 0 .576-.576zm-23.976-10.368h46.8q-9.576-10.8-9.576-29.952 0-1.836-.864-3.78t-2.484-3.708-4.374-2.898-6.102-1.134-6.102 1.134-4.374 2.898-2.484 3.708-.864 3.78q0 19.152-9.576 29.952zm53.352 0q0 1.872-1.368 3.24t-3.24 1.368h-16.128q0 3.816-2.7 6.516t-6.516 2.7-6.516-2.7-2.7-6.516h-16.128q-1.872 0-3.24-1.368t-1.368-3.24q1.8-1.512 3.276-3.168t3.06-4.302 2.682-5.706 1.8-7.416.702-9.36q0-5.472 4.212-10.17t11.052-5.706q-.288-.684-.288-1.404 0-1.44 1.008-2.448t2.448-1.008 2.448 1.008 1.008 2.448q0 .72-.288 1.404 6.84 1.008 11.052 5.706t4.212 10.17q0 5.004.702 9.36t1.8 7.416 2.682 5.706 3.06 4.302 3.276 3.168z","CERTIFICATE":"M49.536-32.183l4.968 4.86q1.08 1.008.72 2.52-.432 1.476-1.872 1.836l-6.768 1.728 1.908 6.696q.432 1.476-.684 2.52-1.044 1.116-2.52.684l-6.696-1.908-1.728 6.768q-.36 1.44-1.836 1.872-.432.072-.684.072-1.116 0-1.836-.792l-4.86-4.968-4.86 4.968q-1.008 1.08-2.52.72-1.476-.396-1.836-1.872l-1.728-6.768-6.696 1.908q-1.476.432-2.52-.684-1.116-1.044-.684-2.52l1.908-6.696-6.768-1.728q-1.44-.36-1.872-1.836-.36-1.512.72-2.52l4.968-4.86-4.968-4.86q-1.08-1.008-.72-2.52.432-1.476 1.872-1.836l6.768-1.728-1.908-6.696q-.432-1.476.684-2.52 1.044-1.116 2.52-.684l6.696 1.908 1.728-6.768q.36-1.476 1.836-1.836 1.476-.432 2.52.684l4.86 5.004 4.86-5.004q1.044-1.08 2.52-.684 1.476.36 1.836 1.836l1.728 6.768 6.696-1.908q1.476-.432 2.52.684 1.116 1.044.684 2.52l-1.908 6.696 6.768 1.728q1.44.36 1.872 1.836.36 1.512-.72 2.52z","HAND_O_RIGHT":"M9.216-16.055q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm50.688-20.736q0-1.836-1.404-3.222t-3.204-1.386h-20.736q0-.72.54-1.746t1.188-1.98 1.188-2.448.54-3.042q0-2.412-1.602-3.51t-4.158-1.098q-.864 0-3.24 5.004-.864 1.584-1.332 2.34-1.44 2.304-4.032 5.22-2.556 2.916-3.636 3.816-2.484 2.052-5.04 2.052h-1.152v23.04h1.152q2.592 0 6.012 1.152t6.966 2.304 6.462 1.152q6.804 0 6.804-6.012 0-.936-.18-2.016 1.08-.576 1.71-1.89t.63-2.646-.648-2.484q1.908-1.8 1.908-4.284 0-.9-.36-1.998t-.9-1.71h11.916q1.872 0 3.24-1.368t1.368-3.24zm4.608-.036q0 3.78-2.718 6.516t-6.498 2.736h-6.084q-.144 2.232-1.332 4.284.108.756.108 1.548 0 3.636-2.16 6.408.036 5.004-3.06 7.902t-8.172 2.898q-4.788 0-11.592-2.484-5.904-2.124-8.028-2.124h-10.368q-1.908 0-3.258-1.35t-1.35-3.258v-23.04q0-1.908 1.35-3.258t3.258-1.35h10.368q.36 0 .774-.162t.846-.504.81-.648.864-.81.738-.774.684-.774.504-.612q2.34-2.664 3.6-4.644.468-.756 1.188-2.232t1.332-2.592 1.458-2.268 1.98-1.782 2.502-.63q4.5 0 7.434 2.412t2.934 6.804q0 2.448-.792 4.608h13.464q3.744 0 6.48 2.736t2.736 6.444z","HAND_O_LEFT":"M49.536-13.751h1.152v-23.04h-1.152q-1.26 0-2.43-.432t-2.25-1.332-1.8-1.656-1.764-1.944l-.126-.162-.144-.162-.162-.18q-2.592-2.916-4.032-5.22-.504-.792-1.368-2.448-.036-.108-.378-.81t-.666-1.296-.72-1.278-.774-1.098-.666-.414q-2.556 0-4.158 1.098t-1.602 3.51q0 1.548.54 3.042t1.188 2.448 1.188 1.98.54 1.746h-20.736q-1.8 0-3.204 1.386t-1.404 3.222q0 1.872 1.368 3.24t3.24 1.368h11.916q-.54.612-.9 1.71t-.36 1.998q0 2.484 1.908 4.284-.648 1.152-.648 2.484t.63 2.646 1.71 1.89q-.144.864-.144 2.016 0 3.06 1.746 4.536t4.878 1.476q3.024 0 6.588-1.152t6.984-2.304 6.012-1.152zm10.368-2.304q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm4.608-20.736v23.04q0 1.908-1.35 3.258t-3.258 1.35h-10.368q-2.124 0-8.028 2.124-6.84 2.484-11.412 2.484-5.112 0-8.28-2.79t-3.132-7.83l.036-.18q-2.196-2.736-2.196-6.408 0-.792.108-1.548-1.188-2.052-1.332-4.284h-6.084q-3.78 0-6.498-2.736t-2.718-6.516q0-3.708 2.736-6.444t6.48-2.736h13.464q-.792-2.16-.792-4.608 0-4.392 2.934-6.804t7.434-2.412q1.368 0 2.502.63t1.98 1.782 1.458 2.268 1.332 2.592 1.188 2.232q1.26 1.98 3.6 4.644.072.108.504.612t.684.774.738.774.864.81.81.648.846.504.774.162h10.368q1.908 0 3.258 1.35t1.35 3.258z","HAND_O_UP":"M46.08-6.839q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm4.608-27.504q0-6.804-6.012-6.804-.936 0-2.016.18-.576-1.08-1.89-1.71t-2.646-.63-2.484.648q-1.8-1.908-4.284-1.908-.9 0-1.998.36t-1.71.9v-11.916q0-1.872-1.368-3.24t-3.24-1.368q-1.836 0-3.222 1.404t-1.386 3.204v20.736q-.72 0-1.746-.54t-1.98-1.188-2.448-1.188-3.042-.54q-2.412 0-3.51 1.602t-1.098 4.158q0 .864 5.004 3.24 1.584.864 2.34 1.332 2.304 1.44 5.22 4.032 2.916 2.556 3.816 3.636 2.052 2.484 2.052 5.04v1.152h23.04v-1.152q0-2.592 1.152-6.012t2.304-6.966 1.152-6.462zm4.608-.18q0 4.788-2.484 11.592-2.124 5.904-2.124 8.028v10.368q0 1.908-1.35 3.258t-3.258 1.35h-23.04q-1.908 0-3.258-1.35t-1.35-3.258v-10.368q0-.36-.162-.774t-.504-.846-.648-.81-.81-.864-.774-.738-.774-.684-.612-.504q-2.664-2.34-4.644-3.6-.756-.468-2.232-1.188t-2.592-1.332-2.268-1.458-1.782-1.98-.63-2.502q0-4.5 2.412-7.434t6.804-2.934q2.448 0 4.608.792v-13.464q0-3.744 2.736-6.48t6.444-2.736q3.78 0 6.516 2.718t2.736 6.498v6.084q2.232.144 4.284 1.332.756-.108 1.548-.108 3.636 0 6.408 2.16 5.004-.036 7.902 3.06t2.898 8.172z","HAND_O_DOWN":"M50.688-29.879q0-3.024-1.152-6.588t-2.304-6.984-1.152-6.012v-1.152h-23.04v1.152q0 1.26-.432 2.43t-1.332 2.25-1.656 1.8-1.944 1.764q-.324.288-.504.432-2.916 2.592-5.22 4.032-.792.504-2.448 1.368-.108.036-.81.378t-1.296.666-1.278.72-1.098.774-.414.666q0 2.556 1.098 4.158t3.51 1.602q1.548 0 3.042-.54t2.448-1.188 1.98-1.188 1.746-.54v20.736q0 1.8 1.386 3.204t3.222 1.404q1.872 0 3.24-1.368t1.368-3.24v-11.916q1.656 1.26 3.708 1.26 2.484 0 4.284-1.908 1.152.648 2.484.648t2.646-.63 1.89-1.71q.864.144 2.016.144 3.06 0 4.536-1.746t1.476-4.878zm-4.608-27.648q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm9.216 27.504q0 5.112-2.79 8.28t-7.83 3.132l-.18-.036q-2.736 2.196-6.408 2.196-.792 0-1.548-.108-1.944 1.08-4.284 1.332v6.084q0 3.78-2.736 6.498t-6.516 2.718q-3.708 0-6.444-2.736t-2.736-6.48v-13.464q-1.944.792-4.608.792-4.356 0-6.786-2.934t-2.43-7.434q0-1.368.63-2.502t1.782-1.98 2.268-1.458 2.592-1.332 2.232-1.188q1.98-1.26 4.644-3.6.108-.072.612-.504t.774-.684.774-.738.81-.864.648-.81.504-.846.162-.774v-10.368q0-1.908 1.35-3.258t3.258-1.35h23.04q1.908 0 3.258 1.35t1.35 3.258v10.368q0 2.124 2.124 8.028 2.484 6.84 2.484 11.412z","ARROW_CIRCLE_LEFT":"M46.08-29.879v-4.608q0-.936-.684-1.62t-1.62-.684h-18.072l6.804-6.804q.684-.684.684-1.62t-.684-1.62l-3.276-3.276q-.648-.648-1.62-.648t-1.62.648l-13.032 13.032-3.276 3.276q-.648.648-.648 1.62t.648 1.62l3.276 3.276 13.032 13.032q.648.648 1.62.648t1.62-.648l3.276-3.276q.648-.648.648-1.62t-.648-1.62l-6.804-6.804h18.072q.936 0 1.62-.684t.684-1.62zm9.216-2.304q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","ARROW_CIRCLE_RIGHT":"M46.26-32.183q0-.972-.648-1.62l-3.276-3.276-13.032-13.032q-.648-.648-1.62-.648t-1.62.648l-3.276 3.276q-.648.648-.648 1.62t.648 1.62l6.804 6.804h-18.072q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h18.072l-6.804 6.804q-.684.684-.684 1.62t.684 1.62l3.276 3.276q.648.648 1.62.648t1.62-.648l13.032-13.032 3.276-3.276q.648-.648.648-1.62zm9.036 0q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","ARROW_CIRCLE_UP":"M46.224-32.219q0-.972-.648-1.62l-13.032-13.032-3.276-3.276q-.648-.648-1.62-.648t-1.62.648l-3.276 3.276-13.032 13.032q-.648.648-.648 1.62t.648 1.62l3.276 3.276q.648.648 1.62.648t1.62-.648l6.804-6.804v18.072q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62v-18.072l6.804 6.804q.684.684 1.62.684t1.62-.684l3.276-3.276q.648-.648.648-1.62zm9.072.036q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","ARROW_CIRCLE_DOWN":"M46.224-32.147q0-.972-.648-1.62l-3.276-3.276q-.648-.648-1.62-.648t-1.62.648l-6.804 6.804v-18.072q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v18.072l-6.804-6.804q-.684-.684-1.62-.684t-1.62.684l-3.276 3.276q-.648.648-.648 1.62t.648 1.62l13.032 13.032 3.276 3.276q.648.648 1.62.648t1.62-.648l3.276-3.276 13.032-13.032q.648-.648.648-1.62zm9.072-.036q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","GLOBE":"M27.648-59.831q7.524 0 13.878 3.708t10.062 10.062 3.708 13.878-3.708 13.878-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708zm9.864 18.756q-.072.036-.342.342t-.486.342q.072 0 .162-.18t.18-.396.126-.252q.216-.252.792-.54.504-.216 1.872-.432 1.224-.288 1.836.396-.072-.072.342-.468t.522-.432q.108-.072.54-.162t.54-.27l.072-.792q-.432.036-.63-.252t-.234-.756q0 .072-.216.288 0-.252-.162-.288t-.414.036-.324.036q-.36-.108-.54-.27t-.288-.594-.144-.54q-.072-.18-.342-.378t-.342-.378l-.09-.198-.108-.234-.144-.198-.198-.09-.252.18-.27.36-.162.18q-.108-.072-.216-.054t-.162.036-.162.108-.18.126q-.108.072-.306.108t-.306.072q.54-.18-.036-.396-.36-.144-.576-.108.324-.144.27-.432t-.306-.504h.18q-.036-.144-.306-.306t-.63-.306-.468-.216q-.288-.18-1.224-.342t-1.188-.018q-.18.216-.162.378t.144.504.126.45q.036.216-.198.468t-.234.432q0 .252.504.558t.36.774q-.108.288-.576.576t-.576.432q-.18.288-.054.666t.378.594q.072.072.054.144t-.126.162-.198.144-.234.126l-.108.072q-.396.18-.738-.216t-.486-.936q-.252-.9-.576-1.08-.828-.288-1.044.036-.18-.468-1.476-.936-.9-.324-2.088-.144.216-.036 0-.54-.252-.54-.684-.432.108-.216.144-.63t.036-.486q.108-.468.432-.828.036-.036.252-.306t.342-.486.018-.216q1.26.144 1.8-.396.18-.18.414-.612t.378-.612q.324-.216.504-.198t.522.198.522.18q.504.036.558-.396t-.27-.72q.432.036.108-.612-.18-.252-.288-.324-.432-.144-.972.18-.288.144.072.288-.036-.036-.342.378t-.594.63-.576-.18q-.036-.036-.198-.486t-.342-.486q-.288 0-.576.54.108-.288-.396-.54t-.864-.288q.684-.432-.288-.972-.252-.144-.738-.18t-.702.144q-.18.252-.198.414t.18.288.378.198.414.144.306.108q.504.36.288.504l-.306.126-.414.162-.216.144q-.108.144 0 .504t-.072.504q-.18-.18-.324-.63t-.252-.594q.252.324-.9.216l-.36-.036q-.144 0-.576.072t-.738.036-.486-.288q-.144-.288 0-.72.036-.144.144-.072-.144-.108-.396-.342t-.36-.306q-1.656.54-3.384 1.476.216.036.432-.036.18-.072.468-.234t.36-.198q1.224-.504 1.512-.252l.18-.18q.504.576.72.9-.252-.144-1.08-.036-.72.216-.792.432.252.432.18.648-.144-.108-.414-.36t-.522-.396-.54-.18q-.576 0-.792.036-5.256 2.88-8.46 7.992.252.252.432.288.144.036.18.324t.09.396.414-.108q.324.288.108.684.036-.036 1.584.972.684.612.756.756.108.396-.36.648-.036-.072-.324-.324t-.324-.144q-.108.18.018.666t.378.45q-.252 0-.342.576t-.09 1.278-.036.846l.072.036q-.108.432.198 1.242t.774.702q-.468.108.72 1.548.216.288.288.324.108.072.432.27t.54.36.36.378q.144.18.36.81t.504.846q-.072.216.342.72t.378.828l-.09.036-.09.036q.108.252.558.504t.558.468q.036.108.072.36t.108.396.288.072q.072-.72-.864-2.232-.54-.9-.612-1.044-.108-.18-.198-.558t-.162-.522q.072 0 .216.054t.306.126.27.144.072.108q-.108.252.072.63t.432.666.612.684.432.468q.216.216.504.702t0 .486q.324 0 .72.36t.612.72q.18.288.288.936t.18.864q.072.252.306.486t.45.342l.576.288.468.252q.18.072.666.378t.774.414q.36.144.576.144t.522-.09.486-.126q.54-.072 1.044.54t.756.756q1.296.684 1.98.396-.072.036.018.27t.288.558.324.522.198.306q.18.216.648.54t.648.54q.216-.144.252-.324-.108.288.252.72t.648.36q.504-.108.504-1.152-1.116.54-1.764-.648l-.09-.198-.144-.306-.09-.306v-.27l.18-.108q.324 0 .36-.126t-.072-.45-.144-.468q-.036-.288-.396-.72t-.432-.54q-.18.324-.576.288t-.576-.324l-.054.198-.054.234q-.468 0-.54-.036.036-.108.09-.63t.126-.81q.036-.144.198-.432t.27-.522.144-.45-.162-.342-.63-.09q-.684.036-.936.72-.036.108-.108.378t-.18.414-.324.252q-.252.108-.864.072t-.864-.18q-.468-.288-.81-1.044t-.342-1.332q0-.36.09-.954t.108-.9-.198-.882q.108-.072.324-.342t.36-.378l.162-.054h.162l.144-.054.108-.216-.144-.108-.144-.108q.252.108 1.026-.054t.99.054q.54.396.792-.072 0-.036-.09-.342t-.018-.486q.18.972 1.044.324.108.108.558.18t.63.18l.252.198.198.162.18-.018.306-.234q.36.504.432.864.396 1.44.684 1.584.252.108.396.072t.162-.342 0-.504-.054-.45l-.036-.288v-.648l-.036-.288q-.54-.108-.666-.432t.054-.666.54-.666q.036-.036.288-.126t.558-.234.45-.288q.756-.684.54-1.26.252 0 .396-.324l-.18-.108-.27-.18-.162-.072q.324-.18.072-.576.18-.108.27-.396t.27-.36q.324.432.756.072.252-.288.036-.576.18-.252.738-.378t.666-.342q.252.072.288-.072t.036-.432.108-.432q.144-.18.54-.324t.468-.18l.612-.396q.108-.144 0-.144.648.072 1.116-.396.36-.396-.216-.72.108-.216-.108-.342t-.54-.198q.108-.036.414-.018t.378-.054q.54-.36-.252-.576-.612-.18-1.548.432zm-5.868 31.572q7.416-1.296 12.636-6.804-.108-.108-.45-.162t-.45-.126q-.648-.252-.864-.288.036-.252-.09-.468t-.288-.324-.45-.288-.396-.252l-.252-.216-.252-.198-.27-.162-.306-.072-.36.036-.108.036-.198.09-.198.108-.144.108v.09q-.756-.612-1.296-.792-.18-.036-.396-.198t-.378-.252-.36-.054-.414.252q-.18.18-.216.54t-.072.468q-.252-.18 0-.63t.072-.666q-.108-.216-.378-.162t-.432.162-.414.306-.324.234-.306.198-.306.27q-.108.144-.216.432t-.18.396q-.072-.144-.414-.234t-.342-.198q.072.36.144 1.26t.18 1.368q.252 1.116-.432 1.728-.972.9-1.044 1.44-.144.792.432.936 0 .252-.288.738t-.252.774q0 .216.072.576z","WRENCH":"M13.824-11.447q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm23.184-15.12l-24.552 24.552q-1.332 1.332-3.24 1.332-1.872 0-3.276-1.332l-3.816-3.888q-1.368-1.296-1.368-3.24 0-1.908 1.368-3.276l24.516-24.516q1.404 3.528 4.122 6.246t6.246 4.122zm22.824-15.66q0 1.404-.828 3.816-1.692 4.824-5.922 7.83t-9.306 3.006q-6.66 0-11.394-4.734t-4.734-11.394 4.734-11.394 11.394-4.734q2.088 0 4.374.594t3.87 1.674q.576.396.576 1.008t-.576 1.008l-10.548 6.084v8.064l6.948 3.852q.18-.108 2.844-1.746t4.878-2.916 2.538-1.278q.54 0 .846.36t.306.9z","TASKS":"M36.864-13.751h23.04v-4.608h-23.04v4.608zm-13.824-18.432h36.864v-4.608h-36.864v4.608zm23.04-18.432h13.824v-4.608h-13.824v4.608zm18.432 29.952v9.216q0 .936-.684 1.62t-1.62.684h-59.904q-.936 0-1.62-.684t-.684-1.62v-9.216q0-.936.684-1.62t1.62-.684h59.904q.936 0 1.62.684t.684 1.62zm0-18.432v9.216q0 .936-.684 1.62t-1.62.684h-59.904q-.936 0-1.62-.684t-.684-1.62v-9.216q0-.936.684-1.62t1.62-.684h59.904q.936 0 1.62.684t.684 1.62zm0-18.432v9.216q0 .936-.684 1.62t-1.62.684h-59.904q-.936 0-1.62-.684t-.684-1.62v-9.216q0-.936.684-1.62t1.62-.684h59.904q.936 0 1.62.684t.684 1.62z","FILTER":"M50.508-53.819q.612 1.476-.504 2.52l-17.748 17.748v26.712q0 1.512-1.404 2.124-.468.18-.9.18-.972 0-1.62-.684l-9.216-9.216q-.684-.684-.684-1.62v-17.496l-17.748-17.748q-1.116-1.044-.504-2.52.612-1.404 2.124-1.404h46.08q1.512 0 2.124 1.404z","BRIEFCASE":"M23.04-55.223h18.432v-4.608h-18.432v4.608zm41.472 23.04v17.28q0 2.376-1.692 4.068t-4.068 1.692h-52.992q-2.376 0-4.068-1.692t-1.692-4.068v-17.28h24.192v5.76q0 .936.684 1.62t1.62.684h11.52q.936 0 1.62-.684t.684-1.62v-5.76h24.192zm-27.648 0v4.608h-9.216v-4.608h9.216zm27.648-17.28v13.824h-64.512v-13.824q0-2.376 1.692-4.068t4.068-1.692h12.672v-5.76q0-1.44 1.008-2.448t2.448-1.008h20.736q1.44 0 2.448 1.008t1.008 2.448v5.76h12.672q2.376 0 4.068 1.692t1.692 4.068z","ARROWS_ALT":"M46.188-44.963l-12.78 12.78 12.78 12.78 5.184-5.184q1.044-1.116 2.52-.504 1.404.612 1.404 2.124v16.128q0 .936-.684 1.62t-1.62.684h-16.128q-1.512 0-2.124-1.44-.612-1.404.504-2.484l5.184-5.184-12.78-12.78-12.78 12.78 5.184 5.184q1.116 1.08.504 2.484-.612 1.44-2.124 1.44h-16.128q-.936 0-1.62-.684t-.684-1.62v-16.128q0-1.512 1.44-2.124 1.404-.612 2.484.504l5.184 5.184 12.78-12.78-12.78-12.78-5.184 5.184q-.684.684-1.62.684-.432 0-.864-.18-1.44-.612-1.44-2.124v-16.128q0-.936.684-1.62t1.62-.684h16.128q1.512 0 2.124 1.44.612 1.404-.504 2.484l-5.184 5.184 12.78 12.78 12.78-12.78-5.184-5.184q-1.116-1.08-.504-2.484.612-1.44 2.124-1.44h16.128q.936 0 1.62.684t.684 1.62v16.128q0 1.512-1.404 2.124-.468.18-.9.18-.936 0-1.62-.684z","USERS":"M21.348-32.183q-5.832.18-9.54 4.608h-4.824q-2.952 0-4.968-1.458t-2.016-4.266q0-12.708 4.464-12.708.216 0 1.566.756t3.51 1.53 4.284.774q2.412 0 4.788-.828-.18 1.332-.18 2.376 0 5.004 2.916 9.216zm38.556 22.932q0 4.32-2.628 6.822t-6.984 2.502h-31.464q-4.356 0-6.984-2.502t-2.628-6.822q0-1.908.126-3.726t.504-3.924.954-3.906 1.548-3.51 2.232-2.916 3.078-1.926 4.014-.72q.36 0 1.548.774t2.628 1.728 3.852 1.728 4.86.774 4.86-.774 3.852-1.728 2.628-1.728 1.548-.774q2.196 0 4.014.72t3.078 1.926 2.232 2.916 1.548 3.51.954 3.906.504 3.924.126 3.726zm-36.864-45.972q0 3.816-2.7 6.516t-6.516 2.7-6.516-2.7-2.7-6.516 2.7-6.516 6.516-2.7 6.516 2.7 2.7 6.516zm25.344 13.824q0 5.724-4.05 9.774t-9.774 4.05-9.774-4.05-4.05-9.774 4.05-9.774 9.774-4.05 9.774 4.05 4.05 9.774zm20.736 8.1q0 2.808-2.016 4.266t-4.968 1.458h-4.824q-3.708-4.428-9.54-4.608 2.916-4.212 2.916-9.216 0-1.044-.18-2.376 2.376.828 4.788.828 2.124 0 4.284-.774t3.51-1.53 1.566-.756q4.464 0 4.464 12.708zm-4.608-21.924q0 3.816-2.7 6.516t-6.516 2.7-6.516-2.7-2.7-6.516 2.7-6.516 6.516-2.7 6.516 2.7 2.7 6.516z","LINK":"M52.416-20.663q0-1.44-1.008-2.448l-7.488-7.488q-1.008-1.008-2.448-1.008-1.512 0-2.592 1.152.108.108.684.666t.774.774.54.684.468.918.126.99q0 1.44-1.008 2.448t-2.448 1.008q-.54 0-.99-.126t-.918-.468-.684-.54-.774-.774-.666-.684q-1.188 1.116-1.188 2.628 0 1.44 1.008 2.448l7.416 7.452q.972.972 2.448.972 1.44 0 2.448-.936l5.292-5.256q1.008-1.008 1.008-2.412zm-25.308-25.38q0-1.44-1.008-2.448l-7.416-7.452q-1.008-1.008-2.448-1.008-1.404 0-2.448.972l-5.292 5.256q-1.008 1.008-1.008 2.412 0 1.44 1.008 2.448l7.488 7.488q.972.972 2.448.972 1.512 0 2.592-1.116-.108-.108-.684-.666t-.774-.774-.54-.684-.468-.918-.126-.99q0-1.44 1.008-2.448t2.448-1.008q.54 0 .99.126t.918.468.684.54.774.774.666.684q1.188-1.116 1.188-2.628zm32.22 25.38q0 4.32-3.06 7.308l-5.292 5.256q-2.988 2.988-7.308 2.988-4.356 0-7.344-3.06l-7.416-7.452q-2.988-2.988-2.988-7.308 0-4.428 3.168-7.524l-3.168-3.168q-3.096 3.168-7.488 3.168-4.32 0-7.344-3.024l-7.488-7.488q-3.024-3.024-3.024-7.344t3.06-7.308l5.292-5.256q2.988-2.988 7.308-2.988 4.356 0 7.344 3.06l7.416 7.452q2.988 2.988 2.988 7.308 0 4.428-3.168 7.524l3.168 3.168q3.096-3.168 7.488-3.168 4.32 0 7.344 3.024l7.488 7.488q3.024 3.024 3.024 7.344z","CLOUD":"M69.12-22.967q0 5.724-4.05 9.774t-9.774 4.05h-39.168q-6.66 0-11.394-4.734t-4.734-11.394q0-4.752 2.556-8.694t6.732-5.886q-.072-1.008-.072-1.548 0-7.632 5.4-13.032t13.032-5.4q5.688 0 10.314 3.168t6.75 8.28q2.52-2.232 5.976-2.232 3.816 0 6.516 2.7t2.7 6.516q0 2.7-1.476 4.968 4.644 1.08 7.668 4.842t3.024 8.622z","FLASK":"M54.972-12.311q2.016 3.204.774 5.49t-5.058 2.286h-41.472q-3.816 0-5.058-2.286t.774-5.49l18.108-28.548v-14.364h-2.304q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684h18.432q.936 0 1.62.684t.684 1.62-.684 1.62-1.62.684h-2.304v14.364zm-28.044-26.1l-9.792 15.444h25.632l-9.792-15.444-.72-1.116v-15.696000000000002h-4.608v15.696000000000002z","SCISSORS":"M34.56-32.183q.936 0 1.62.684t.684 1.62-.684 1.62-1.62.684-1.62-.684-.684-1.62.684-1.62 1.62-.684zm10.8 2.304l18.252 14.328q1.008.72.9 2.016-.18 1.26-1.26 1.836l-4.608 2.304q-.468.252-1.044.252-.612 0-1.116-.288l-24.84-13.932-3.96 2.376q-.288.144-.432.18.504 1.764.36 3.492-.252 2.772-2.016 5.31t-4.752 4.446q-4.752 3.024-9.972 3.024-4.896 0-7.992-2.808-3.24-3.024-2.844-7.452.252-2.736 2.016-5.292t4.716-4.464q4.752-3.024 10.008-3.024 2.988 0 5.436 1.116.324-.468.792-.792l4.392-2.628-4.392-2.628q-.468-.324-.792-.792-2.448 1.116-5.436 1.116-5.256 0-10.008-3.024-2.952-1.908-4.716-4.464t-2.016-5.292q-.18-2.124.558-4.068t2.286-3.348q3.06-2.844 7.992-2.844 5.22 0 9.972 3.024 2.988 1.872 4.752 4.428t2.016 5.328q.144 1.728-.36 3.492.144.036.432.18l3.96 2.376 24.84-13.932q.504-.288 1.116-.288.576 0 1.044.252l4.608 2.304q1.08.576 1.26 1.836.108 1.296-.9 2.016zm-24.516-9.36q1.656-1.512.756-3.888t-3.816-4.212q-3.312-2.124-6.912-2.124-2.664 0-4.068 1.296-1.656 1.512-.756 3.888t3.816 4.212q3.312 2.124 6.912 2.124 2.664 0 4.068-1.296zm-3.06 26.82q2.916-1.836 3.816-4.212t-.756-3.888q-1.404-1.296-4.068-1.296-3.6 0-6.912 2.124-2.916 1.836-3.816 4.212t.756 3.888q1.404 1.296 4.068 1.296 3.6 0 6.912-2.124zm6.408-22.068l3.456 2.088v-.396q0-1.296 1.188-2.016l.504-.288-2.844-1.692-.936.936q-.108.108-.36.396t-.432.432l-.144.126-.108.09zm8.064 8.064l3.456 1.152 26.496-20.736-4.608-2.304-27.648 15.516v4.068l-5.76 3.456.324.288.252.216q.144.144.396.432t.396.432l.936.936zm25.344 14.976l4.608-2.304-18.72-14.688-6.372 4.968q-.072.108-.468.252z","FILES_O":"M61.056-50.615q1.44 0 2.448 1.008t1.008 2.448v43.776q0 1.44-1.008 2.448t-2.448 1.008h-34.56q-1.44 0-2.448-1.008t-1.008-2.448v-10.368h-19.584q-1.44 0-2.448-1.008t-1.008-2.448v-24.192q0-1.44.72-3.168t1.728-2.736l14.688-14.688q1.008-1.008 2.736-1.728t3.168-.72h14.976q1.44 0 2.448 1.008t1.008 2.448v11.808q2.448-1.44 4.608-1.44h14.976zm-19.584 7.668l-10.764 10.764h10.764v-10.764zm-23.04-13.824l-10.764 10.764h10.764v-10.764zm7.056 23.292l11.376-11.376v-14.976h-13.824v14.976q0 1.44-1.008 2.448t-2.448 1.008h-14.976v23.04h18.432v-9.216q0-1.44.72-3.168t1.728-2.736zm34.416 28.944v-41.472h-13.824v14.976q0 1.44-1.008 2.448t-2.448 1.008h-14.976v23.04h32.256z","PAPERCLIP":"M50.544-14.579q0 4.212-2.844 7.056t-7.056 2.844q-4.86 0-8.46-3.6l-27.972-27.936q-4.068-4.14-4.068-9.756 0-5.724 3.96-9.72t9.684-3.996q5.688 0 9.828 4.068l21.78 21.816q.36.36.36.792 0 .576-1.098 1.674t-1.674 1.098q-.468 0-.828-.36l-21.816-21.852q-2.844-2.772-6.516-2.772-3.816 0-6.444 2.7t-2.628 6.516q0 3.78 2.736 6.516l27.936 27.972q2.268 2.268 5.22 2.268 2.304 0 3.816-1.512t1.512-3.816q0-2.952-2.268-5.22l-20.916-20.916q-.936-.864-2.16-.864-1.044 0-1.728.684t-.684 1.728q0 1.152.9 2.124l14.76 14.76q.36.36.36.792 0 .576-1.116 1.692t-1.692 1.116q-.432 0-.792-.36l-14.76-14.76q-2.268-2.196-2.268-5.364 0-2.952 2.052-5.004t5.004-2.052q3.168 0 5.364 2.268l20.916 20.916q3.6 3.528 3.6 8.46z","SAVE":"M13.824-9.143h27.648v-13.824h-27.648v13.824zm32.256 0h4.608v-32.256q0-.504-.36-1.386t-.72-1.242l-10.116-10.116q-.36-.36-1.224-.72t-1.404-.36v14.976q0 1.44-1.008 2.448t-2.448 1.008h-20.736q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-4.608v46.08h4.608v-14.976q0-1.44 1.008-2.448t2.448-1.008h29.952q1.44 0 2.448 1.008t1.008 2.448v14.976zm-13.824-33.408v-11.52q0-.468-.342-.81t-.81-.342h-6.912q-.468 0-.81.342t-.342.81v11.52q0 .468.342.81t.81.342h6.912q.468 0 .81-.342t.342-.81zm23.04 1.152v33.408q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-48.384q0-1.44 1.008-2.448t2.448-1.008h33.408q1.44 0 3.168.72t2.736 1.728l10.08 10.08q1.008 1.008 1.728 2.736t.72 3.168z","SQUARE":"M55.296-49.463v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","REORDER":"M55.296-16.055v4.608q0 .936-.684 1.62t-1.62.684h-50.688q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h50.688q.936 0 1.62.684t.684 1.62zm0-18.432v4.608q0 .936-.684 1.62t-1.62.684h-50.688q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h50.688q.936 0 1.62.684t.684 1.62zm0-18.432v4.608q0 .936-.684 1.62t-1.62.684h-50.688q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h50.688q.936 0 1.62.684t.684 1.62z","LIST_UL":"M13.824-13.751q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm0-18.432q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm50.688 14.976v6.912q0 .468-.342.81t-.81.342h-43.776q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h43.776q.468 0 .81.342t.342.81zm-50.688-33.408q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm50.688 14.976v6.912q0 .468-.342.81t-.81.342h-43.776q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h43.776q.468 0 .81.342t.342.81zm0-18.432v6.912q0 .468-.342.81t-.81.342h-43.776q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h43.776q.468 0 .81.342t.342.81z","LIST_OL":"M13.716-6.119q0 2.88-1.962 4.536t-4.878 1.656q-3.816 0-6.192-2.376l2.052-3.168q1.764 1.62 3.816 1.62 1.044 0 1.818-.522t.774-1.53q0-2.304-3.78-2.016l-.936-2.016q.288-.36 1.17-1.566t1.53-1.944 1.332-1.386v-.036q-.576 0-1.746.036t-1.746.036v1.908h-3.816v-5.472h11.988v3.168l-3.42 4.14q1.836.432 2.916 1.764t1.08 3.168zm.072-22.572v5.724h-13.032q-.216-1.296-.216-1.944 0-1.836.846-3.348t2.034-2.448 2.376-1.71 2.034-1.566.846-1.62q0-.9-.522-1.386t-1.422-.486q-1.656 0-2.916 2.088l-3.06-2.124q.864-1.836 2.574-2.862t3.798-1.026q2.628 0 4.428 1.494t1.8 4.05q0 1.8-1.224 3.294t-2.7 2.322-2.718 1.818-1.278 1.89h4.572v-2.16h3.78zm50.724 11.484v6.912q0 .468-.342.81t-.81.342h-43.776q-.468 0-.81-.342t-.342-.81v-6.912q0-.504.324-.828t.828-.324h43.776q.468 0 .81.342t.342.81zm-50.688-32.364v3.564h-12.06v-3.564h3.852q0-1.476.018-4.392t.018-4.356v-.432h-.072q-.288.612-1.8 1.944l-2.556-2.736 4.896-4.572h3.816v14.544h3.888zm50.688 13.932v6.912q0 .468-.342.81t-.81.342h-43.776q-.468 0-.81-.342t-.342-.81v-6.912q0-.504.324-.828t.828-.324h43.776q.468 0 .81.342t.342.81zm0-18.432v6.912q0 .468-.342.81t-.81.342h-43.776q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h43.776q.468 0 .81.342t.342.81z","STRIKETHROUGH":"M63.36-32.183q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-62.208q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h62.208zm-45.972-2.304q-1.008-1.26-1.836-2.88-1.728-3.492-1.728-6.768 0-6.516 4.824-11.124 4.788-4.572 14.148-4.572 1.8 0 6.012.684 2.376.432 6.372 1.728.36 1.368.756 4.248.504 4.428.504 6.588 0 .648-.18 1.62l-.432.108-3.024-.216-.504-.072q-1.8-5.364-3.708-7.38-3.168-3.276-7.56-3.276-4.104 0-6.552 2.124-2.412 2.088-2.412 5.256 0 2.628 2.376 5.04t10.044 4.644q2.484.72 6.228 2.376 2.088 1.008 3.42 1.872h-26.748zm18.252 9.216h14.796q.252 1.404.252 3.312 0 3.996-1.476 7.632-.828 1.98-2.556 3.744-1.332 1.26-3.924 2.916-2.88 1.728-5.508 2.376-2.88.756-7.308.756-4.104 0-7.02-.828l-5.04-1.44q-2.052-.576-2.592-1.008-.288-.288-.288-.792v-.468q0-3.888-.072-5.616-.036-1.08 0-2.448l.072-1.332v-1.584l3.672-.072q.54 1.224 1.08 2.556t.81 2.016.45.972q1.26 2.052 2.88 3.384 1.548 1.296 3.78 2.052 2.124.792 4.752.792 2.304 0 5.004-.972 2.772-.936 4.392-3.096 1.692-2.196 1.692-4.644 0-3.024-2.916-5.652-1.224-1.044-4.932-2.556z","UNDERLINE":"M1.728-56.411q-1.332-.072-1.62-.144l-.108-3.168q.468-.036 1.44-.036 2.16 0 4.032.144 4.752.252 5.976.252 3.096 0 6.048-.108 4.176-.144 5.256-.18 2.016 0 3.096-.072l-.036.504.072 2.304v.324q-2.16.324-4.464.324-2.16 0-2.844.9-.468.504-.468 4.752 0 .468.018 1.17t.018.918l.036 8.244.504 10.08q.216 4.464 1.836 7.272 1.26 2.124 3.456 3.312 3.168 1.692 6.372 1.692 3.744 0 6.876-1.008 2.016-.648 3.564-1.836 1.728-1.296 2.34-2.304 1.296-2.016 1.908-4.104.756-2.628.756-8.244 0-2.844-.126-4.608t-.396-4.41-.486-5.742l-.144-2.124q-.18-2.412-.864-3.168-1.224-1.26-2.772-1.224l-3.6.072-.504-.108.072-3.096h3.024l7.38.36q2.736.108 7.056-.36l.648.072q.216 1.368.216 1.836 0 .252-.144 1.116-1.62.432-3.024.468-2.628.396-2.844.612-.54.54-.54 1.476 0 .252.054.972t.054 1.116q.288.684.792 14.256.216 7.02-.54 10.944-.54 2.736-1.476 4.392-1.368 2.34-4.032 4.428-2.7 2.052-6.552 3.204-3.924 1.188-9.18 1.188-6.012 0-10.224-1.656-4.284-1.692-6.444-4.392-2.196-2.736-2.988-7.02-.576-2.88-.576-8.532v-11.988q0-6.768-.612-7.668-.9-1.296-5.292-1.404zm53.568 50.724v-2.304q0-.504-.324-.828t-.828-.324h-52.992q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h52.992q.504 0 .828-.324t.324-.828z","TABLE":"M18.432-14.903v-6.912q0-.504-.324-.828t-.828-.324h-11.52q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h11.52q.504 0 .828-.324t.324-.828zm0-13.824v-6.912q0-.504-.324-.828t-.828-.324h-11.52q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h11.52q.504 0 .828-.324t.324-.828zm18.432 13.824v-6.912q0-.504-.324-.828t-.828-.324h-11.52q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h11.52q.504 0 .828-.324t.324-.828zm-18.432-27.648v-6.912q0-.504-.324-.828t-.828-.324h-11.52q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h11.52q.504 0 .828-.324t.324-.828zm18.432 13.824v-6.912q0-.504-.324-.828t-.828-.324h-11.52q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h11.52q.504 0 .828-.324t.324-.828zm18.432 13.824v-6.912q0-.504-.324-.828t-.828-.324h-11.52q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h11.52q.504 0 .828-.324t.324-.828zm-18.432-27.648v-6.912q0-.504-.324-.828t-.828-.324h-11.52q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h11.52q.504 0 .828-.324t.324-.828zm18.432 13.824v-6.912q0-.504-.324-.828t-.828-.324h-11.52q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h11.52q.504 0 .828-.324t.324-.828zm0-13.824v-6.912q0-.504-.324-.828t-.828-.324h-11.52q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h11.52q.504 0 .828-.324t.324-.828zm4.608-11.52v39.168q0 2.376-1.692 4.068t-4.068 1.692h-48.384q-2.376 0-4.068-1.692t-1.692-4.068v-39.168q0-2.376 1.692-4.068t4.068-1.692h48.384q2.376 0 4.068 1.692t1.692 4.068z","MAGIC":"M42.84-43.523l10.548-10.548-3.852-3.852-10.548 10.548zm16.092-10.548q0 .972-.648 1.62l-46.296 46.296q-.648.648-1.62.648t-1.62-.648l-7.128-7.128q-.648-.648-.648-1.62t.648-1.62l46.296-46.296q.648-.648 1.62-.648t1.62.648l7.128 7.128q.648.648.648 1.62zm-48.636-6.84l3.528 1.08-3.528 1.08-1.08 3.528-1.08-3.528-3.528-1.08 3.528-1.08 1.08-3.528zm12.6 5.832l7.056 2.16-7.056 2.16-2.16 7.056-2.16-7.056-7.056-2.16 7.056-2.16 2.16-7.056zm33.48 17.208l3.528 1.08-3.528 1.08-1.08 3.528-1.08-3.528-3.528-1.08 3.528-1.08 1.08-3.528zm-23.04-23.04l3.528 1.08-3.528 1.08-1.08 3.528-1.08-3.528-3.528-1.08 3.528-1.08 1.08-3.528z","TRUCK":"M23.04-13.751q0-1.872-1.368-3.24t-3.24-1.368-3.24 1.368-1.368 3.24 1.368 3.24 3.24 1.368 3.24-1.368 1.368-3.24zm-13.824-18.432h13.824v-9.216h-5.688q-.468 0-.792.324l-7.02 7.02q-.324.324-.324.792v1.08zm46.08 18.432q0-1.872-1.368-3.24t-3.24-1.368-3.24 1.368-1.368 3.24 1.368 3.24 3.24 1.368 3.24-1.368 1.368-3.24zm9.216-39.168v36.864q0 .54-.144.954t-.486.666-.594.414-.846.216-.81.072-.918 0-.81-.018q0 3.816-2.7 6.516t-6.516 2.7-6.516-2.7-2.7-6.516h-13.824q0 3.816-2.7 6.516t-6.516 2.7-6.516-2.7-2.7-6.516h-2.304q-.108 0-.81.018t-.918 0-.81-.072-.846-.216-.594-.414-.486-.666-.144-.954q0-.936.684-1.62t1.62-.684v-11.52q0-.288-.018-1.26t0-1.368.09-1.242.234-1.332.504-1.098.81-1.08l7.128-7.128q.684-.684 1.818-1.152t2.106-.468h5.76v-6.912q0-.936.684-1.62t1.62-.684h36.864q.936 0 1.62.684t.684 1.62z","PINTEREST":"M55.296-32.183q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708q-3.996 0-7.848-1.152 2.124-3.348 2.808-5.904.324-1.224 1.944-7.596.72 1.404 2.628 2.43t4.104 1.026q4.356 0 7.776-2.466t5.292-6.786 1.872-9.72q0-4.104-2.142-7.704t-6.21-5.868-9.18-2.268q-3.78 0-7.056 1.044t-5.562 2.772-3.924 3.978-2.412 4.662-.774 4.824q0 3.744 1.44 6.588t4.212 3.996q1.08.432 1.368-.72.072-.252.288-1.116t.288-1.08q.216-.828-.396-1.548-1.836-2.196-1.836-5.436 0-5.436 3.762-9.342t9.846-3.906q5.436 0 8.478 2.952t3.042 7.668q0 6.12-2.466 10.404t-6.318 4.284q-2.196 0-3.528-1.566t-.828-3.762q.288-1.26.954-3.366t1.08-3.708.414-2.718q0-1.8-.972-2.988t-2.772-1.188q-2.232 0-3.78 2.052t-1.548 5.112q0 2.628.9 4.392l-3.564 15.048q-.612 2.52-.468 6.372-7.416-3.276-11.988-10.116t-4.572-15.228q0-7.524 3.708-13.878t10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","PINTEREST_SQUARE":"M44.928-59.831q4.284 0 7.326 3.042t3.042 7.326v34.56q0 4.284-3.042 7.326t-7.326 3.042h-26.1q3.06-4.392 3.888-7.56.324-1.224 1.908-7.524.756 1.404 2.646 2.412t4.05 1.008q6.516 0 10.638-5.31t4.122-13.446q0-3.024-1.26-5.85t-3.474-5.004-5.49-3.492-7.092-1.314q-3.744 0-7.002 1.026t-5.508 2.754-3.87 3.942-2.394 4.608-.774 4.77q0 3.672 1.422 6.48t4.194 3.96q.468.18.846 0t.522-.684q.36-1.584.54-2.196.216-.828-.396-1.512-1.8-2.232-1.8-5.4 0-5.4 3.726-9.234t9.738-3.834q5.364 0 8.37 2.916t3.006 7.56q0 6.048-2.43 10.296t-6.246 4.248q-2.16 0-3.492-1.566t-.828-3.726q.288-1.224.954-3.33t1.062-3.672.396-2.682q0-1.764-.954-2.934t-2.718-1.17q-2.196 0-3.726 2.034t-1.53 5.022q0 2.592.864 4.356l-3.528 14.904q-.864 3.6-.252 9.144h-6.588q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56z","GOOGLE_PLUS_SQUARE":"M33.012-31.859q0-.936-.216-2.304h-13.032v4.752h7.812q-.108.864-.594 1.8t-1.35 1.908-2.394 1.602-3.474.63q-3.564 0-6.084-2.556t-2.52-6.156 2.52-6.156 6.084-2.556q3.312 0 5.508 2.124l3.744-3.636q-3.888-3.6-9.252-3.6-5.76 0-9.792 4.05t-4.032 9.774 4.032 9.774 9.792 4.05q5.94 0 9.594-3.78t3.654-9.72zm12.42 1.656h3.924v-3.96h-3.924v-3.96h-3.96v3.96h-3.96v3.96h3.96v3.96h3.96v-3.96zm9.864-19.26v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","GOOGLE_PLUS":"M51.732-31.571q0 7.488-3.132 13.338t-8.928 9.144-13.284 3.294q-5.364 0-10.26-2.088t-8.424-5.616-5.616-8.424-2.088-10.26 2.088-10.26 5.616-8.424 8.424-5.616 10.26-2.088q10.296 0 17.676 6.912l-7.164 6.876q-4.212-4.068-10.512-4.068-4.428 0-8.19 2.232t-5.958 6.066-2.196 8.37 2.196 8.37 5.958 6.066 8.19 2.232q2.988 0 5.49-.828t4.122-2.07 2.826-2.826 1.764-2.988.774-2.664h-14.976v-9.072h24.912q.432 2.268.432 4.392zm31.212-4.392v7.56h-7.524v7.524h-7.56v-7.524h-7.524v-7.56h7.524v-7.524h7.56v7.524h7.524z","MONEY":"M27.648-22.967h13.824v-3.456h-4.608v-16.128h-4.104l-5.328 4.932 2.772 2.88q1.512-1.332 1.98-2.052h.072v10.368h-4.608v3.456zm18.432-9.216q0 2.52-.756 5.112t-2.142 4.824-3.654 3.636-4.968 1.404-4.968-1.404-3.654-3.636-2.142-4.824-.756-5.112.756-5.112 2.142-4.824 3.654-3.636 4.968-1.404 4.968 1.404 3.654 3.636 2.142 4.824.756 5.112zm18.432 9.216v-18.432q-3.816 0-6.516-2.7t-2.7-6.516h-41.472q0 3.816-2.7 6.516t-6.516 2.7v18.432q3.816 0 6.516 2.7t2.7 6.516h41.472q0-3.816 2.7-6.516t6.516-2.7zm4.608-29.952v41.472q0 .936-.684 1.62t-1.62.684h-64.512q-.936 0-1.62-.684t-.684-1.62v-41.472q0-.936.684-1.62t1.62-.684h64.512q.936 0 1.62.684t.684 1.62z","CARET_DOWN":"M36.864-39.095q0 .936-.684 1.62l-16.128 16.128q-.684.684-1.62.684t-1.62-.684l-16.128-16.128q-.684-.684-.684-1.62t.684-1.62 1.62-.684h32.256q.936 0 1.62.684t.684 1.62z","CARET_UP":"M36.864-20.663q0 .936-.684 1.62t-1.62.684h-32.256q-.936 0-1.62-.684t-.684-1.62.684-1.62l16.128-16.128q.684-.684 1.62-.684t1.62.684l16.128 16.128q.684.684.684 1.62z","CARET_LEFT":"M23.04-48.311v32.256q0 .936-.684 1.62t-1.62.684-1.62-.684l-16.128-16.128q-.684-.684-.684-1.62t.684-1.62l16.128-16.128q.684-.684 1.62-.684t1.62.684.684 1.62z","CARET_RIGHT":"M20.736-32.183q0 .936-.684 1.62l-16.128 16.128q-.684.684-1.62.684t-1.62-.684-.684-1.62v-32.256q0-.936.684-1.62t1.62-.684 1.62.684l16.128 16.128q.684.684.684 1.62z","COLUMNS":"M5.76-9.143h21.888v-41.472h-23.04v40.32q0 .468.342.81t.81.342zm49.536-1.152v-40.32h-23.04v41.472h21.888q.468 0 .81-.342t.342-.81zm4.608-43.776v43.776q0 2.376-1.692 4.068t-4.068 1.692h-48.384q-2.376 0-4.068-1.692t-1.692-4.068v-43.776q0-2.376 1.692-4.068t4.068-1.692h48.384q2.376 0 4.068 1.692t1.692 4.068z","UNSORTED":"M36.864-25.271q0 .936-.684 1.62l-16.128 16.128q-.684.684-1.62.684t-1.62-.684l-16.128-16.128q-.684-.684-.684-1.62t.684-1.62 1.62-.684h32.256q.936 0 1.62.684t.684 1.62zm0-13.824q0 .936-.684 1.62t-1.62.684h-32.256q-.936 0-1.62-.684t-.684-1.62.684-1.62l16.128-16.128q.684-.684 1.62-.684t1.62.684l16.128 16.128q.684.684.684 1.62z","SORT_DOWN":"M36.864-25.271q0 .936-.684 1.62l-16.128 16.128q-.684.684-1.62.684t-1.62-.684l-16.128-16.128q-.684-.684-.684-1.62t.684-1.62 1.62-.684h32.256q.936 0 1.62.684t.684 1.62z","SORT_UP":"M36.864-39.095q0 .936-.684 1.62t-1.62.684h-32.256q-.936 0-1.62-.684t-.684-1.62.684-1.62l16.128-16.128q.684-.684 1.62-.684t1.62.684l16.128 16.128q.684.684.684 1.62z","ENVELOPE":"M64.512-38.879v28.584q0 2.376-1.692 4.068t-4.068 1.692h-52.992q-2.376 0-4.068-1.692t-1.692-4.068v-28.584q1.584 1.764 3.636 3.132 13.032 8.856 17.892 12.42 2.052 1.512 3.33 2.358t3.402 1.728 3.96.882h.072q1.836 0 3.96-.882t3.402-1.728 3.33-2.358q6.12-4.428 17.928-12.42 2.052-1.404 3.6-3.132zm0-10.584q0 2.844-1.764 5.436t-4.392 4.428q-13.536 9.396-16.848 11.7-.36.252-1.53 1.098t-1.944 1.368-1.872 1.17-2.07.972-1.8.324h-.072q-.828 0-1.8-.324t-2.07-.972-1.872-1.17-1.944-1.368-1.53-1.098q-3.276-2.304-9.432-6.57t-7.38-5.13q-2.232-1.512-4.212-4.158t-1.98-4.914q0-2.808 1.494-4.68t4.266-1.872h52.992q2.34 0 4.05 1.692t1.71 4.068z","LINKEDIN":"M12.564-41.939v35.676h-11.88v-35.676h11.88zm.756-11.016q.036 2.628-1.818 4.392t-4.878 1.764h-.072q-2.952 0-4.752-1.764t-1.8-4.392q0-2.664 1.854-4.41t4.842-1.746 4.788 1.746 1.836 4.41zm41.976 26.244v20.448h-11.844v-19.08q0-3.78-1.458-5.922t-4.554-2.142q-2.268 0-3.798 1.242t-2.286 3.078q-.396 1.08-.396 2.916v19.908h-11.844q.072-14.364.072-23.292t-.036-10.656l-.036-1.728h11.844v5.184h-.072q.72-1.152 1.476-2.016t2.034-1.872 3.132-1.566 4.122-.558q6.156 0 9.9 4.086t3.744 11.97z","UNDO":"M55.296-32.183q0 5.616-2.196 10.728t-5.904 8.82-8.82 5.904-10.728 2.196q-6.192 0-11.772-2.61t-9.504-7.362q-.252-.36-.234-.81t.306-.738l4.932-4.968q.36-.324.9-.324.576.072.828.432 2.628 3.42 6.444 5.292t8.1 1.872q3.744 0 7.146-1.458t5.886-3.942 3.942-5.886 1.458-7.146-1.458-7.146-3.942-5.886-5.886-3.942-7.146-1.458q-3.528 0-6.768 1.278t-5.76 3.654l4.932 4.968q1.116 1.08.504 2.484-.612 1.44-2.124 1.44h-16.128q-.936 0-1.62-.684t-.684-1.62v-16.128q0-1.512 1.44-2.124 1.404-.612 2.484.504l4.68 4.644q3.852-3.636 8.802-5.634t10.242-1.998q5.616 0 10.728 2.196t8.82 5.904 5.904 8.82 2.196 10.728z","LEGAL":"M63.756-9.143q0 1.908-1.332 3.24l-3.852 3.888q-1.404 1.332-3.276 1.332-1.908 0-3.24-1.332l-13.068-13.104q-1.368-1.296-1.368-3.24 0-1.908 1.548-3.456l-9.216-9.216-4.536 4.536q-.504.504-1.224.504t-1.224-.504q.072.072.45.432t.45.468.36.414.36.486.216.486.198.594.054.648q0 1.368-1.008 2.448-.108.108-.594.648t-.684.738-.666.594-.792.558-.792.324-.936.162q-1.44 0-2.448-1.008l-14.688-14.688q-1.008-1.008-1.008-2.448 0-.468.162-.936t.324-.792.558-.792.594-.666.738-.684.648-.594q1.08-1.008 2.448-1.008.36 0 .648.054t.594.198.486.216.486.36.414.36.468.45.432.45q-.504-.504-.504-1.224t.504-1.224l12.528-12.528q.504-.504 1.224-.504t1.224.504q-.072-.072-.45-.432t-.45-.468-.36-.414-.36-.486-.216-.486-.198-.594-.054-.648q0-1.368 1.008-2.448.108-.108.594-.648t.684-.738.666-.594.792-.558.792-.324.936-.162q1.44 0 2.448 1.008l14.688 14.688q1.008 1.008 1.008 2.448 0 .468-.162.936t-.324.792-.558.792-.594.666-.738.684-.648.594q-1.08 1.008-2.448 1.008-.36 0-.648-.054t-.594-.198-.486-.216-.486-.36-.414-.36-.468-.45-.432-.45q.504.504.504 1.224t-.504 1.224l-4.536 4.536 9.216 9.216q1.548-1.548 3.456-1.548 1.872 0 3.276 1.332l13.068 13.068q1.332 1.404 1.332 3.276z","TACHOMETER":"M13.824-22.967q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm6.912-16.128q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm15.408 17.316l3.636-13.752q.216-.936-.27-1.746t-1.386-1.062-1.728.234-1.08 1.422l-3.636 13.752q-2.16.18-3.852 1.566t-2.268 3.546q-.72 2.772.72 5.256t4.212 3.204 5.256-.72 3.204-4.212q.576-2.16-.216-4.212t-2.592-3.276zm23.76-1.188q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm-23.04-23.04q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm16.128 6.912q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm11.52 16.128q0 9.396-5.076 17.388-.684 1.044-1.944 1.044h-50.472q-1.26 0-1.944-1.044-5.076-7.956-5.076-17.388 0-6.552 2.556-12.528t6.876-10.296 10.296-6.876 12.528-2.556 12.528 2.556 10.296 6.876 6.876 10.296 2.556 12.528z","COMMENT_O":"M32.256-50.615q-7.344 0-13.734 2.502t-10.152 6.75-3.762 9.18q0 4.032 2.574 7.686t7.254 6.318l3.132 1.8-.972 3.456q-.864 3.276-2.52 6.192 5.472-2.268 9.9-6.156l1.548-1.368 2.052.216q2.484.288 4.68.288 7.344 0 13.734-2.502t10.152-6.75 3.762-9.18-3.762-9.18-10.152-6.75-13.734-2.502zm32.256 18.432q0 6.264-4.32 11.574t-11.736 8.388-16.2 3.078q-2.52 0-5.22-.288-7.128 6.3-16.56 8.712-1.764.504-4.104.792h-.18q-.54 0-.972-.378t-.576-.99v-.036q-.108-.144-.018-.432t.072-.36.162-.342l.216-.324.252-.306.288-.324q.252-.288 1.116-1.242t1.242-1.368 1.116-1.422 1.17-1.836.972-2.124.936-2.736q-5.652-3.204-8.91-7.92t-3.258-10.116q0-6.264 4.32-11.574t11.736-8.388 16.2-3.078 16.2 3.078 11.736 8.388 4.32 11.574z","COMMENTS_O":"M25.344-50.615q-5.508 0-10.296 1.872t-7.614 5.076-2.826 6.876q0 2.952 1.908 5.688t5.364 4.752l3.492 2.016-1.26 3.024q1.224-.72 2.232-1.404l1.584-1.116 1.908.36q2.808.504 5.508.504 5.508 0 10.296-1.872t7.614-5.076 2.826-6.876-2.826-6.876-7.614-5.076-10.296-1.872zm0-4.608q6.876 0 12.726 2.466t9.234 6.714 3.384 9.252-3.384 9.252-9.234 6.714-12.726 2.466q-3.096 0-6.336-.576-4.464 3.168-10.008 4.608-1.296.324-3.096.576h-.108q-.396 0-.738-.288t-.414-.756q-.036-.108-.036-.234t.018-.234.072-.216l.09-.18.126-.198.144-.18.162-.18.144-.162q.18-.216.828-.9t.936-1.062.81-1.044.9-1.386.738-1.584q-4.464-2.592-7.02-6.372t-2.556-8.064q0-5.004 3.384-9.252t9.234-6.714 12.726-2.466zm29.592 42.084q.36.864.738 1.584t.9 1.386.81 1.044.936 1.062.828.9l.144.162.162.18.144.18.126.198.09.18.072.216.018.234-.036.234q-.108.504-.468.792t-.792.252q-1.8-.252-3.096-.576-5.544-1.44-10.008-4.608-3.24.576-6.336.576-9.756 0-16.992-4.752 2.088.144 3.168.144 5.796 0 11.124-1.62t9.504-4.644q4.5-3.312 6.912-7.632t2.412-9.144q0-2.772-.828-5.472 4.644 2.556 7.344 6.408t2.7 8.28q0 4.32-2.556 8.082t-7.02 6.354z","FLASH":"M31.86-44.063q.648.72.252 1.584l-19.44 41.652q-.468.9-1.512.9-.144 0-.504-.072-.612-.18-.918-.684t-.162-1.08l7.092-29.088-14.616 3.636q-.144.036-.432.036-.648 0-1.116-.396-.648-.54-.468-1.404l7.236-29.7q.144-.504.576-.828t1.008-.324h11.808q.684 0 1.152.45t.468 1.062q0 .288-.18.648l-6.156 16.668 14.256-3.528q.288-.072.432-.072.684 0 1.224.54z","SITEMAP":"M64.512-19.511v11.52q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-11.52q0-1.44 1.008-2.448t2.448-1.008h3.456v-6.912h-18.432v6.912h3.456q1.44 0 2.448 1.008t1.008 2.448v11.52q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-11.52q0-1.44 1.008-2.448t2.448-1.008h3.456v-6.912h-18.432v6.912h3.456q1.44 0 2.448 1.008t1.008 2.448v11.52q0 1.44-1.008 2.448t-2.448 1.008h-11.52q-1.44 0-2.448-1.008t-1.008-2.448v-11.52q0-1.44 1.008-2.448t2.448-1.008h3.456v-6.912q0-1.872 1.368-3.24t3.24-1.368h18.432v-6.912h-3.456q-1.44 0-2.448-1.008t-1.008-2.448v-11.52q0-1.44 1.008-2.448t2.448-1.008h11.52q1.44 0 2.448 1.008t1.008 2.448v11.52q0 1.44-1.008 2.448t-2.448 1.008h-3.456v6.912h18.432q1.872 0 3.24 1.368t1.368 3.24v6.912h3.456q1.44 0 2.448 1.008t1.008 2.448z","UMBRELLA":"M32.256-34.631v20.88q0 3.744-2.736 6.48t-6.48 2.736-6.48-2.736-2.736-6.48q0-.936.684-1.62t1.62-.684 1.62.684.684 1.62q0 1.8 1.404 3.204t3.204 1.404 3.204-1.404 1.404-3.204v-20.88q1.188-.396 2.304-.396t2.304.396zm27.648.972q0 .468-.342.81t-.81.342q-.396 0-.828-.36-1.764-1.656-3.348-2.484t-3.672-.828q-2.448 0-4.608 1.332t-3.708 3.492q-.252.36-.63 1.008t-.522.864q-.396.612-1.008.612-.648 0-1.044-.612-.144-.216-.522-.864t-.63-1.008q-1.548-2.16-3.69-3.492t-4.59-1.332-4.59 1.332-3.69 3.492q-.252.36-.63 1.008t-.522.864q-.396.612-1.044.612-.612 0-1.008-.612-.144-.216-.522-.864t-.63-1.008q-1.548-2.16-3.708-3.492t-4.608-1.332q-2.088 0-3.672.828t-3.348 2.484q-.432.36-.828.36-.468 0-.81-.342t-.342-.81q0-.18.036-.252 1.62-6.588 6.21-11.502t10.728-7.362 12.978-2.448q5.04 0 9.882 1.44t8.874 4.086 7.002 6.732 4.158 9.054q.036.072.036.252zm-27.648-26.172v3.528q-1.512-.072-2.304-.072t-2.304.072v-3.528q0-.936.684-1.62t1.62-.684 1.62.684.684 1.62z","PASTE":"M27.648-4.535h32.256v-23.04h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-13.824v41.472zm9.216-51.84v-2.304q0-.468-.342-.81t-.81-.342h-25.344q-.468 0-.81.342t-.342.81v2.304q0 .468.342.81t.81.342h25.344q.468 0 .81-.342t.342-.81zm9.216 24.192h10.764l-10.764-10.764v10.764zm18.432 4.608v24.192q0 1.44-1.008 2.448t-2.448 1.008h-34.56q-1.44 0-2.448-1.008t-1.008-2.448v-5.76h-19.584q-1.44 0-2.448-1.008t-1.008-2.448v-48.384q0-1.44 1.008-2.448t2.448-1.008h39.168q1.44 0 2.448 1.008t1.008 2.448v11.808q.756.468 1.296 1.008l14.688 14.688q1.008 1.008 1.728 2.736t.72 3.168z","LIGHTBULB_O":"M26.496-43.703q0 .468-.342.81t-.81.342-.81-.342-.342-.81q0-1.656-1.944-2.556t-3.816-.9q-.468 0-.81-.342t-.342-.81.342-.81.81-.342q1.8 0 3.582.576t3.132 1.944 1.35 3.24zm5.76 0q0-2.592-1.242-4.824t-3.24-3.654-4.428-2.232-4.914-.81-4.914.81-4.428 2.232-3.24 3.654-1.242 4.824q0 3.636 2.448 6.48.36.396 1.098 1.188t1.098 1.188q4.608 5.508 5.076 10.728h8.208q.468-5.22 5.076-10.728.36-.396 1.098-1.188t1.098-1.188q2.448-2.844 2.448-6.48zm4.608 0q0 5.58-3.708 9.648-1.62 1.764-2.682 3.132t-2.142 3.438-1.224 3.87q1.692 1.008 1.692 2.952 0 1.332-.9 2.304.9.972.9 2.304 0 1.872-1.62 2.916.468.828.468 1.692 0 1.656-1.134 2.556t-2.79.9q-.72 1.584-2.16 2.52t-3.132.936-3.132-.936-2.16-2.52q-1.656 0-2.79-.9t-1.134-2.556q0-.864.468-1.692-1.62-1.044-1.62-2.916 0-1.332.9-2.304-.9-.972-.9-2.304 0-1.944 1.692-2.952-.144-1.8-1.224-3.87t-2.142-3.438-2.682-3.132q-3.708-4.068-3.708-9.648 0-3.564 1.602-6.642t4.212-5.112 5.904-3.204 6.714-1.17 6.714 1.17 5.904 3.204 4.212 5.112 1.602 6.642z","EXCHANGE":"M64.512-21.815v6.912q0 .468-.342.81t-.81.342h-49.536v6.912q0 .468-.342.81t-.81.342q-.432 0-.864-.36l-11.484-11.52q-.324-.324-.324-.792 0-.504.324-.828l11.52-11.52q.324-.324.828-.324.468 0 .81.342t.342.81v6.912h49.536q.468 0 .81.342t.342.81zm0-19.584q0 .504-.324.828l-11.52 11.52q-.324.324-.828.324-.468 0-.81-.342t-.342-.81v-6.912h-49.536q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h49.536v-6.912q0-.504.324-.828t.828-.324q.432 0 .864.36l11.484 11.484q.324.324.324.828z","CLOUD_DOWNLOAD":"M46.08-31.031q0-.504-.324-.828t-.828-.324h-8.064v-12.672q0-.468-.342-.81t-.81-.342h-6.912q-.468 0-.81.342t-.342.81v12.672h-8.064q-.468 0-.81.342t-.342.81q0 .504.324.828l12.672 12.672q.324.324.828.324t.828-.324l12.636-12.636q.36-.432.36-.864zm23.04 8.064q0 5.724-4.05 9.774t-9.774 4.05h-39.168q-6.66 0-11.394-4.734t-4.734-11.394q0-4.68 2.52-8.64t6.768-5.94q-.072-1.08-.072-1.548 0-7.632 5.4-13.032t13.032-5.4q5.616 0 10.278 3.132t6.786 8.316q2.556-2.232 5.976-2.232 3.816 0 6.516 2.7t2.7 6.516q0 2.736-1.476 4.968 4.68 1.116 7.686 4.878t3.006 8.586z","CLOUD_UPLOAD":"M46.08-33.335q0-.504-.324-.828l-12.672-12.672q-.324-.324-.828-.324t-.828.324l-12.636 12.636q-.36.432-.36.864 0 .504.324.828t.828.324h8.064v12.672q0 .468.342.81t.81.342h6.912q.468 0 .81-.342t.342-.81v-12.672h8.064q.468 0 .81-.342t.342-.81zm23.04 10.368q0 5.724-4.05 9.774t-9.774 4.05h-39.168q-6.66 0-11.394-4.734t-4.734-11.394q0-4.68 2.52-8.64t6.768-5.94q-.072-1.08-.072-1.548 0-7.632 5.4-13.032t13.032-5.4q5.616 0 10.278 3.132t6.786 8.316q2.556-2.232 5.976-2.232 3.816 0 6.516 2.7t2.7 6.516q0 2.736-1.476 4.968 4.68 1.116 7.686 4.878t3.006 8.586z","USER_MD":"M13.824-16.055q0 .936-.684 1.62t-1.62.684-1.62-.684-.684-1.62.684-1.62 1.62-.684 1.62.684.684 1.62zm36.864 2.196q0 4.356-2.628 6.84t-6.984 2.484h-31.464q-4.356 0-6.984-2.484t-2.628-6.84q0-2.448.198-4.716t.864-4.968 1.71-4.77 2.916-3.708 4.32-2.178q-.792 1.872-.792 4.32v7.308q-2.088.72-3.348 2.52t-1.26 3.996q0 2.88 2.016 4.896t4.896 2.016 4.896-2.016 2.016-4.896q0-2.196-1.278-3.996t-3.33-2.52v-7.308q0-2.232.9-3.348 4.752 3.744 10.62 3.744t10.62-3.744q.9 1.116.9 3.348v2.304q-3.816 0-6.516 2.7t-2.7 6.516v3.204q-1.152 1.044-1.152 2.556 0 1.44 1.008 2.448t2.448 1.008 2.448-1.008 1.008-2.448q0-1.512-1.152-2.556v-3.204q0-1.872 1.368-3.24t3.24-1.368 3.24 1.368 1.368 3.24v3.204q-1.152 1.044-1.152 2.556 0 1.44 1.008 2.448t2.448 1.008 2.448-1.008 1.008-2.448q0-1.512-1.152-2.556v-3.204q0-2.448-1.242-4.59t-3.366-3.366q0-.36.018-1.53t0-1.728-.09-1.494-.252-1.692-.468-1.44q2.448.54 4.32 2.178t2.916 3.708 1.71 4.77.864 4.968.198 4.716zm-11.52-32.148q0 5.724-4.05 9.774t-9.774 4.05-9.774-4.05-4.05-9.774 4.05-9.774 9.774-4.05 9.774 4.05 4.05 9.774z","STETHOSCOPE":"M46.08-39.095q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm4.608 0q0 2.232-1.278 3.996t-3.33 2.52v14.22q0 5.724-4.734 9.774t-11.394 4.05-11.394-4.05-4.734-9.774v-4.752q-5.904-.72-9.864-4.608t-3.96-9.072v-18.432q0-.936.684-1.62t1.62-.684q.216 0 .576.072.612-1.08 1.692-1.728t2.34-.648q1.908 0 3.258 1.35t1.35 3.258-1.35 3.258-3.258 1.35q-1.188 0-2.304-.648v14.472q0 3.816 3.384 6.516t8.136 2.7 8.136-2.7 3.384-6.516v-14.472q-1.116.648-2.304.648-1.908 0-3.258-1.35t-1.35-3.258 1.35-3.258 3.258-1.35q1.26 0 2.34.648t1.692 1.728q.36-.072.576-.072.936 0 1.62.684t.684 1.62v18.432q0 5.184-3.96 9.072t-9.864 4.608v4.752q0 3.816 3.384 6.516t8.136 2.7 8.136-2.7 3.384-6.516v-14.22q-2.052-.756-3.33-2.52t-1.278-3.996q0-2.88 2.016-4.896t4.896-2.016 4.896 2.016 2.016 4.896z","SUITCASE":"M23.04-50.615h18.432v-4.608h-18.432v4.608zm-12.672 0v46.08h-2.304q-3.312 0-5.688-2.376t-2.376-5.688v-29.952q0-3.312 2.376-5.688t5.688-2.376h2.304zm40.32 0v46.08h-36.864v-46.08h4.608v-5.76q0-1.44 1.008-2.448t2.448-1.008h20.736q1.44 0 2.448 1.008t1.008 2.448v5.76h4.608zm13.824 8.064v29.952q0 3.312-2.376 5.688t-5.688 2.376h-2.304v-46.08h2.304q3.312 0 5.688 2.376t2.376 5.688z","BELL":"M32.832-3.383q0-.576-.576-.576-2.124 0-3.654-1.53t-1.53-3.654q0-.576-.576-.576t-.576.576q0 2.628 1.854 4.482t4.482 1.854q.576 0 .576-.576zm29.376-10.368q0 1.872-1.368 3.24t-3.24 1.368h-16.128q0 3.816-2.7 6.516t-6.516 2.7-6.516-2.7-2.7-6.516h-16.128q-1.872 0-3.24-1.368t-1.368-3.24q1.8-1.512 3.276-3.168t3.06-4.302 2.682-5.706 1.8-7.416.702-9.36q0-5.472 4.212-10.17t11.052-5.706q-.288-.684-.288-1.404 0-1.44 1.008-2.448t2.448-1.008 2.448 1.008 1.008 2.448q0 .72-.288 1.404 6.84 1.008 11.052 5.706t4.212 10.17q0 5.004.702 9.36t1.8 7.416 2.682 5.706 3.06 4.302 3.276 3.168z","COFFEE":"M59.904-41.399q0-2.88-2.016-4.896t-4.896-2.016h-2.304v13.824h2.304q2.88 0 4.896-2.016t2.016-4.896zm-59.904 27.648h64.512q0 3.816-2.7 6.516t-6.516 2.7h-46.08q-3.816 0-6.516-2.7t-2.7-6.516zm66.816-27.648q0 5.724-4.05 9.774t-9.774 4.05h-2.304v1.152q0 3.312-2.376 5.688t-5.688 2.376h-25.344q-3.312 0-5.688-2.376t-2.376-5.688v-26.496q0-.936.684-1.62t1.62-.684h41.472q5.724 0 9.774 4.05t4.05 9.774z","CUTLERY":"M23.04-62.135v23.04q0 2.196-1.278 3.996t-3.33 2.52v28.044q0 1.872-1.368 3.24t-3.24 1.368h-4.608q-1.872 0-3.24-1.368t-1.368-3.24v-28.044q-2.052-.72-3.33-2.52t-1.278-3.996v-23.04q0-.936.684-1.62t1.62-.684 1.62.684.684 1.62v14.976q0 .936.684 1.62t1.62.684 1.62-.684.684-1.62v-14.976q0-.936.684-1.62t1.62-.684 1.62.684.684 1.62v14.976q0 .936.684 1.62t1.62.684 1.62-.684.684-1.62v-14.976q0-.936.684-1.62t1.62-.684 1.62.684.684 1.62zm27.648 0v57.6q0 1.872-1.368 3.24t-3.24 1.368h-4.608q-1.872 0-3.24-1.368t-1.368-3.24v-18.432h-8.064q-.468 0-.81-.342t-.342-.81v-28.8q0-4.752 3.384-8.136t8.136-3.384h9.216q.936 0 1.62.684t.684 1.62z","FILE_TEXT_O":"M52.848-50.759q1.008 1.008 1.728 2.736t.72 3.168v41.472q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h32.256q1.44 0 3.168.72t2.736 1.728zm-15.984-8.784v13.536h13.536q-.36-1.044-.792-1.476l-11.268-11.268q-.432-.432-1.476-.792zm13.824 55.008v-36.864h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-27.648v55.296h46.08zm-36.864-31.104q0-.504.324-.828t.828-.324h25.344q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-25.344q-.504 0-.828-.324t-.324-.828v-2.304zm26.496 8.064q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-25.344q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h25.344zm0 9.216q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-25.344q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h25.344z","BUILDING_O":"M13.824-17.207v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm0-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm9.216 0v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm27.648 18.432v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm27.648 18.432v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm27.648 18.432v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm18.432 9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm9.216 0v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216 49.536h13.824v-55.296h-41.472v55.296h13.824v-8.064q0-.468.342-.81t.81-.342h11.52q.468 0 .81.342t.342.81v8.064zm18.432-57.6v59.904q0 .936-.684 1.62t-1.62.684h-46.08q-.936 0-1.62-.684t-.684-1.62v-59.904q0-.936.684-1.62t1.62-.684h46.08q.936 0 1.62.684t.684 1.62z","HOSPITAL_O":"M13.824-17.207v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm0-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm9.216 0v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm27.648 18.432v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm18.432 9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216-9.216v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm9.216 0v2.304q0 .468-.342.81t-.81.342h-2.304q-.468 0-.81-.342t-.342-.81v-2.304q0-.468.342-.81t.81-.342h2.304q.468 0 .81.342t.342.81zm-9.216 31.104h13.824v-41.472h-9.216v1.152q0 1.44-1.008 2.448t-2.448 1.008h-16.128q-1.44 0-2.448-1.008t-1.008-2.448v-1.152h-9.216v41.472h13.824v-8.064q0-.468.342-.81t.81-.342h11.52q.468 0 .81.342t.342.81v8.064zm0-42.624v-11.52q0-.468-.342-.81t-.81-.342h-2.304q-.468 0-.81.342t-.342.81v3.456h-4.608v-3.456q0-.468-.342-.81t-.81-.342h-2.304q-.468 0-.81.342t-.342.81v11.52q0 .468.342.81t.81.342h2.304q.468 0 .81-.342t.342-.81v-3.456h4.608v3.456q0 .468.342.81t.81.342h2.304q.468 0 .81-.342t.342-.81zm18.432-1.152v46.08q0 .936-.684 1.62t-1.62.684h-46.08q-.936 0-1.62-.684t-.684-1.62v-46.08q0-.936.684-1.62t1.62-.684h11.52v-10.368q0-1.44 1.008-2.448t2.448-1.008h16.128q1.44 0 2.448 1.008t1.008 2.448v10.368h11.52q.936 0 1.62.684t.684 1.62z","AMBULANCE":"M23.04-13.751q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm-13.824-18.432h13.824v-9.216h-5.688q-.504.072-.792.324l-7.02 7.02q-.252.432-.324.792v1.08zm46.08 18.432q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm4.608-24.192v-6.912q0-.504-.324-.828t-.828-.324h-8.064v-8.064q0-.504-.324-.828t-.828-.324h-6.912q-.504 0-.828.324t-.324.828v8.064h-8.064q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h8.064v8.064q0 .504.324.828t.828.324h6.912q.504 0 .828-.324t.324-.828v-8.064h8.064q.504 0 .828-.324t.324-.828zm9.216-19.584v41.472q0 .936-.684 1.62t-1.62.684h-6.912q0 3.816-2.7 6.516t-6.516 2.7-6.516-2.7-2.7-6.516h-13.824q0 3.816-2.7 6.516t-6.516 2.7-6.516-2.7-2.7-6.516h-4.608q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684v-14.976q0-.936.468-2.088t1.152-1.836l7.128-7.128q.684-.684 1.836-1.152t2.088-.468h5.76v-11.52q0-.936.684-1.62t1.62-.684h41.472q.936 0 1.62.684t.684 1.62z","MEDKIT":"M46.08-24.119v-6.912q0-.504-.324-.828t-.828-.324h-8.064v-8.064q0-.504-.324-.828t-.828-.324h-6.912q-.504 0-.828.324t-.324.828v8.064h-8.064q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h8.064v8.064q0 .504.324.828t.828.324h6.912q.504 0 .828-.324t.324-.828v-8.064h8.064q.504 0 .828-.324t.324-.828zm-23.04-26.496h18.432v-4.608h-18.432v4.608zm-13.824 0v46.08h-1.152q-3.312 0-5.688-2.376t-2.376-5.688v-29.952q0-3.312 2.376-5.688t5.688-2.376h1.152zm42.624 0v46.08h-39.168v-46.08h5.76v-5.76q0-1.44 1.008-2.448t2.448-1.008h20.736q1.44 0 2.448 1.008t1.008 2.448v5.76h5.76zm12.672 8.064v29.952q0 3.312-2.376 5.688t-5.688 2.376h-1.152v-46.08h1.152q3.312 0 5.688 2.376t2.376 5.688z","FIGHTER_JET":"M69.12-29.879q-.036 1.152-10.368 3.456l-12.672 1.152-8.064 2.304h-2.304l-10.548 12.672h2.484q.936 0 1.62.162t.684.414-.684.414-1.62.162h-11.52v-1.152h2.304v-14.976h-5.76l-6.912 8.064h-3.456l-1.152-1.152v-6.912h1.152v-1.152h4.608v-.288l-6.912-.864v-4.608l6.912-.864v-.288h-4.608v-1.152h-1.152v-6.912l1.152-1.152h3.456l6.912 8.064h5.76v-14.976h-2.304v-1.152h11.52q.936 0 1.62.162t.684.414-.684.414-1.62.162h-2.484l10.548 12.672h2.304l8.064 2.304 12.672 1.152q9.396 2.088 10.332 3.348z","BEER":"M23.04-32.183v-13.824h-9.216v9.216q0 1.908 1.35 3.258t3.258 1.35h4.608zm36.864 16.128v6.912h-41.472v-6.912l4.608-6.912h-4.608q-5.724 0-9.774-4.05t-4.05-9.774v-11.52l-2.304-2.304 1.152-4.608h17.28l1.152-4.608h34.56l1.152 6.912-2.304 1.152v28.8z","H_SQUARE":"M46.08-16.055v-32.256q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v11.52h-18.432v-11.52q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v32.256q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62v-11.52h18.432v11.52q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62zm9.216-33.408v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","PLUS_SQUARE":"M46.08-29.879v-4.608q0-.936-.684-1.62t-1.62-.684h-11.52v-11.52q0-.936-.684-1.62t-1.62-.684h-4.608q-.936 0-1.62.684t-.684 1.62v11.52h-11.52q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h11.52v11.52q0 .936.684 1.62t1.62.684h4.608q.936 0 1.62-.684t.684-1.62v-11.52h11.52q.936 0 1.62-.684t.684-1.62zm9.216-19.584v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","ANGLE_DOUBLE_LEFT":"M22.572-14.903q0 .468-.36.828l-1.8 1.8q-.36.36-.828.36t-.828-.36l-16.776-16.776q-.36-.36-.36-.828t.36-.828l16.776-16.776q.36-.36.828-.36t.828.36l1.8 1.8q.36.36.36.828t-.36.828l-14.148 14.148 14.148 14.148q.36.36.36.828zm13.824 0q0 .468-.36.828l-1.8 1.8q-.36.36-.828.36t-.828-.36l-16.776-16.776q-.36-.36-.36-.828t.36-.828l16.776-16.776q.36-.36.828-.36t.828.36l1.8 1.8q.36.36.36.828t-.36.828l-14.148 14.148 14.148 14.148q.36.36.36.828z","ANGLE_DOUBLE_RIGHT":"M21.42-29.879q0 .468-.36.828l-16.776 16.776q-.36.36-.828.36t-.828-.36l-1.8-1.8q-.36-.36-.36-.828t.36-.828l14.148-14.148-14.148-14.148q-.36-.36-.36-.828t.36-.828l1.8-1.8q.36-.36.828-.36t.828.36l16.776 16.776q.36.36.36.828zm13.824 0q0 .468-.36.828l-16.776 16.776q-.36.36-.828.36t-.828-.36l-1.8-1.8q-.36-.36-.36-.828t.36-.828l14.148-14.148-14.148-14.148q-.36-.36-.36-.828t.36-.828l1.8-1.8q.36-.36.828-.36t.828.36l16.776 16.776q.36.36.36.828z","ANGLE_DOUBLE_UP":"M38.7-17.207q0 .468-.36.828l-1.8 1.8q-.36.36-.828.36t-.828-.36l-14.148-14.148-14.148 14.148q-.36.36-.828.36t-.828-.36l-1.8-1.8q-.36-.36-.36-.828t.36-.828l16.776-16.776q.36-.36.828-.36t.828.36l16.776 16.776q.36.36.36.828zm0-13.824q0 .468-.36.828l-1.8 1.8q-.36.36-.828.36t-.828-.36l-14.148-14.148-14.148 14.148q-.36.36-.828.36t-.828-.36l-1.8-1.8q-.36-.36-.36-.828t.36-.828l16.776-16.776q.36-.36.828-.36t.828.36l16.776 16.776q.36.36.36.828z","ANGLE_DOUBLE_DOWN":"M38.7-33.335q0 .468-.36.828l-16.776 16.776q-.36.36-.828.36t-.828-.36l-16.776-16.776q-.36-.36-.36-.828t.36-.828l1.8-1.8q.36-.36.828-.36t.828.36l14.148 14.148 14.148-14.148q.36-.36.828-.36t.828.36l1.8 1.8q.36.36.36.828zm0-13.824q0 .468-.36.828l-16.776 16.776q-.36.36-.828.36t-.828-.36l-16.776-16.776q-.36-.36-.36-.828t.36-.828l1.8-1.8q.36-.36.828-.36t.828.36l14.148 14.148 14.148-14.148q.36-.36.828-.36t.828.36l1.8 1.8q.36.36.36.828z","ANGLE_LEFT":"M22.572-44.855q0 .468-.36.828l-14.148 14.148 14.148 14.148q.36.36.36.828t-.36.828l-1.8 1.8q-.36.36-.828.36t-.828-.36l-16.776-16.776q-.36-.36-.36-.828t.36-.828l16.776-16.776q.36-.36.828-.36t.828.36l1.8 1.8q.36.36.36.828z","ANGLE_RIGHT":"M21.42-29.879q0 .468-.36.828l-16.776 16.776q-.36.36-.828.36t-.828-.36l-1.8-1.8q-.36-.36-.36-.828t.36-.828l14.148-14.148-14.148-14.148q-.36-.36-.36-.828t.36-.828l1.8-1.8q.36-.36.828-.36t.828.36l16.776 16.776q.36.36.36.828z","ANGLE_UP":"M38.7-21.815q0 .468-.36.828l-1.8 1.8q-.36.36-.828.36t-.828-.36l-14.148-14.148-14.148 14.148q-.36.36-.828.36t-.828-.36l-1.8-1.8q-.36-.36-.36-.828t.36-.828l16.776-16.776q.36-.36.828-.36t.828.36l16.776 16.776q.36.36.36.828z","ANGLE_DOWN":"M38.7-37.943q0 .468-.36.828l-16.776 16.776q-.36.36-.828.36t-.828-.36l-16.776-16.776q-.36-.36-.36-.828t.36-.828l1.8-1.8q.36-.36.828-.36t.828.36l14.148 14.148 14.148-14.148q.36-.36.828-.36t.828.36l1.8 1.8q.36.36.36.828z","DESKTOP":"M64.512-28.727v-29.952q0-.468-.342-.81t-.81-.342h-57.6q-.468 0-.81.342t-.342.81v29.952q0 .468.342.81t.81.342h57.6q.468 0 .81-.342t.342-.81zm4.608-29.952v39.168q0 2.376-1.692 4.068t-4.068 1.692h-19.584q0 1.332.576 2.79t1.152 2.556.576 1.566q0 .936-.684 1.62t-1.62.684h-18.432q-.936 0-1.62-.684t-.684-1.62q0-.504.576-1.584t1.152-2.52.576-2.808h-19.584q-2.376 0-4.068-1.692t-1.692-4.068v-39.168q0-2.376 1.692-4.068t4.068-1.692h57.6q2.376 0 4.068 1.692t1.692 4.068z","LAPTOP":"M14.976-18.359q-2.376 0-4.068-1.692t-1.692-4.068v-25.344q0-2.376 1.692-4.068t4.068-1.692h39.168q2.376 0 4.068 1.692t1.692 4.068v25.344q0 2.376-1.692 4.068t-4.068 1.692h-39.168zm-1.152-31.104v25.344q0 .468.342.81t.81.342h39.168q.468 0 .81-.342t.342-.81v-25.344q0-.468-.342-.81t-.81-.342h-39.168q-.468 0-.81.342t-.342.81zm49.536 33.408h5.76v3.456q0 1.44-1.692 2.448t-4.068 1.008h-57.6q-2.376 0-4.068-1.008t-1.692-2.448v-3.456h63.36zm-25.92 3.456q.576 0 .576-.576t-.576-.576h-5.76q-.576 0-.576.576t.576.576h5.76z","TABLET":"M23.04-13.751q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm13.824-5.76v-34.56q0-.468-.342-.81t-.81-.342h-29.952q-.468 0-.81.342t-.342.81v34.56q0 .468.342.81t.81.342h29.952q.468 0 .81-.342t.342-.81zm4.608-34.56v39.168q0 2.376-1.692 4.068t-4.068 1.692h-29.952q-2.376 0-4.068-1.692t-1.692-4.068v-39.168q0-2.376 1.692-4.068t4.068-1.692h29.952q2.376 0 4.068 1.692t1.692 4.068z","MOBILE_PHONE":"M16.704-13.751q0-1.188-.846-2.034t-2.034-.846-2.034.846-.846 2.034.846 2.034 2.034.846 2.034-.846.846-2.034zm7.488-5.76v-25.344q0-.468-.342-.81t-.81-.342h-18.432q-.468 0-.81.342t-.342.81v25.344q0 .468.342.81t.81.342h18.432q.468 0 .81-.342t.342-.81zm-6.912-30.528q0-.576-.576-.576h-5.76q-.576 0-.576.576t.576.576h5.76q.576 0 .576-.576zm10.368-.576v36.864q0 1.872-1.368 3.24t-3.24 1.368h-18.432q-1.872 0-3.24-1.368t-1.368-3.24v-36.864q0-1.872 1.368-3.24t3.24-1.368h18.432q1.872 0 3.24 1.368t1.368 3.24z","CIRCLE_O":"M27.648-51.767q-5.328 0-9.828 2.628t-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628 9.828-2.628 7.128-7.128 2.628-9.828-2.628-9.828-7.128-7.128-9.828-2.628zm27.648 19.584q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","QUOTE_LEFT":"M27.648-29.879v13.824q0 2.88-2.016 4.896t-4.896 2.016h-13.824q-2.88 0-4.896-2.016t-2.016-4.896v-25.344q0-3.744 1.458-7.146t3.942-5.886 5.886-3.942 7.146-1.458h2.304q.936 0 1.62.684t.684 1.62v4.608q0 .936-.684 1.62t-1.62.684h-2.304q-3.816 0-6.516 2.7t-2.7 6.516v1.152q0 1.44 1.008 2.448t2.448 1.008h8.064q2.88 0 4.896 2.016t2.016 4.896zm32.256 0v13.824q0 2.88-2.016 4.896t-4.896 2.016h-13.824q-2.88 0-4.896-2.016t-2.016-4.896v-25.344q0-3.744 1.458-7.146t3.942-5.886 5.886-3.942 7.146-1.458h2.304q.936 0 1.62.684t.684 1.62v4.608q0 .936-.684 1.62t-1.62.684h-2.304q-3.816 0-6.516 2.7t-2.7 6.516v1.152q0 1.44 1.008 2.448t2.448 1.008h8.064q2.88 0 4.896 2.016t2.016 4.896z","QUOTE_RIGHT":"M27.648-52.919v25.344q0 3.744-1.458 7.146t-3.942 5.886-5.886 3.942-7.146 1.458h-2.304q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h2.304q3.816 0 6.516-2.7t2.7-6.516v-1.152q0-1.44-1.008-2.448t-2.448-1.008h-8.064q-2.88 0-4.896-2.016t-2.016-4.896v-13.824q0-2.88 2.016-4.896t4.896-2.016h13.824q2.88 0 4.896 2.016t2.016 4.896zm32.256 0v25.344q0 3.744-1.458 7.146t-3.942 5.886-5.886 3.942-7.146 1.458h-2.304q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h2.304q3.816 0 6.516-2.7t2.7-6.516v-1.152q0-1.44-1.008-2.448t-2.448-1.008h-8.064q-2.88 0-4.896-2.016t-2.016-4.896v-13.824q0-2.88 2.016-4.896t4.896-2.016h13.824q2.88 0 4.896 2.016t2.016 4.896z","SPINNER":"M18.936-14.255q0 1.908-1.35 3.258t-3.258 1.35q-1.872 0-3.24-1.368t-1.368-3.24q0-1.908 1.35-3.258t3.258-1.35 3.258 1.35 1.35 3.258zm17.928 7.416q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm-25.344-25.344q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm43.272 17.928q0 1.872-1.368 3.24t-3.24 1.368q-1.908 0-3.258-1.35t-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm-34.704-35.856q0 2.376-1.692 4.068t-4.068 1.692-4.068-1.692-1.692-4.068 1.692-4.068 4.068-1.692 4.068 1.692 1.692 4.068zm42.12 17.928q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm-23.04-25.344q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm19.08 7.416q0 3.348-2.376 5.706t-5.688 2.358q-3.348 0-5.706-2.358t-2.358-5.706q0-3.312 2.358-5.688t5.706-2.376q3.312 0 5.688 2.376t2.376 5.688z","CIRCLE":"M55.296-32.183q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","REPLY":"M64.512-24.119q0 5.976-4.572 16.236-.108.252-.378.864t-.486 1.08-.468.792q-.432.612-1.008.612-.54 0-.846-.36t-.306-.9q0-.324.09-.954t.09-.846q.18-2.448.18-4.428 0-3.636-.63-6.516t-1.746-4.986-2.88-3.636-3.798-2.502-4.788-1.53-5.544-.774-6.318-.216h-8.064v9.216q0 .936-.684 1.62t-1.62.684-1.62-.684l-18.432-18.432q-.684-.684-.684-1.62t.684-1.62l18.432-18.432q.684-.684 1.62-.684t1.62.684.684 1.62v9.216h8.064q25.668 0 31.5 14.508 1.908 4.824 1.908 11.988z","GITHUB_ALT":"M23.04-20.663q0 1.44-.45 2.952t-1.548 2.736-2.61 1.224-2.61-1.224-1.548-2.736-.45-2.952.45-2.952 1.548-2.736 2.61-1.224 2.61 1.224 1.548 2.736.45 2.952zm23.04 0q0 1.44-.45 2.952t-1.548 2.736-2.61 1.224-2.61-1.224-1.548-2.736-.45-2.952.45-2.952 1.548-2.736 2.61-1.224 2.61 1.224 1.548 2.736.45 2.952zm5.76 0q0-4.32-2.484-7.344t-6.732-3.024q-1.476 0-7.02.756-2.556.396-5.652.396t-5.652-.396q-5.472-.756-7.02-.756-4.248 0-6.732 3.024t-2.484 7.344q0 3.168 1.152 5.526t2.916 3.708 4.392 2.16 5.04 1.062 5.364.252h6.048q2.952 0 5.364-.252t5.04-1.062 4.392-2.16 2.916-3.708 1.152-5.526zm8.064-6.336q0 7.452-2.196 11.916-1.368 2.772-3.798 4.788t-5.076 3.096-6.12 1.71-6.174.792-6.012.162q-2.808 0-5.112-.108t-5.31-.45-5.49-1.08-4.932-1.854-4.356-2.916-3.096-4.14q-2.232-4.428-2.232-11.916 0-8.532 4.896-14.256-.972-2.952-.972-6.12 0-4.176 1.836-7.848 3.888 0 6.84 1.422t6.804 4.446q5.292-1.26 11.124-1.26 5.328 0 10.08 1.152 3.78-2.952 6.732-4.356t6.804-1.404q1.836 3.672 1.836 7.848 0 3.132-.972 6.048 4.896 5.76 4.896 14.328z","FOLDER_O":"M55.296-17.207v-25.344q0-1.44-1.008-2.448t-2.448-1.008h-25.344q-1.44 0-2.448-1.008t-1.008-2.448v-2.304q0-1.44-1.008-2.448t-2.448-1.008h-11.52q-1.44 0-2.448 1.008t-1.008 2.448v34.56q0 1.44 1.008 2.448t2.448 1.008h43.776q1.44 0 2.448-1.008t1.008-2.448zm4.608-25.344v25.344q0 3.312-2.376 5.688t-5.688 2.376h-43.776q-3.312 0-5.688-2.376t-2.376-5.688v-34.56q0-3.312 2.376-5.688t5.688-2.376h11.52q3.312 0 5.688 2.376t2.376 5.688v1.152h24.192q3.312 0 5.688 2.376t2.376 5.688z","FOLDER_OPEN_O":"M64.116-30.923q0-1.26-1.908-1.26h-39.168q-1.44 0-3.078.774t-2.574 1.89l-10.584 13.068q-.648.864-.648 1.44 0 1.26 1.908 1.26h39.168q1.44 0 3.096-.792t2.556-1.908l10.584-13.068q.648-.792.648-1.404zm-41.076-5.868h27.648v-5.76q0-1.44-1.008-2.448t-2.448-1.008h-20.736q-1.44 0-2.448-1.008t-1.008-2.448v-2.304q0-1.44-1.008-2.448t-2.448-1.008h-11.52q-1.44 0-2.448 1.008t-1.008 2.448v30.708l9.216-11.34q1.584-1.908 4.176-3.15t5.04-1.242zm45.684 5.868q0 2.232-1.656 4.32l-10.62 13.068q-1.548 1.908-4.176 3.15t-5.04 1.242h-39.168q-3.312 0-5.688-2.376t-2.376-5.688v-34.56q0-3.312 2.376-5.688t5.688-2.376h11.52q3.312 0 5.688 2.376t2.376 5.688v1.152h19.584q3.312 0 5.688 2.376t2.376 5.688v5.76h6.912q1.944 0 3.564.882t2.412 2.538q.54 1.152.54 2.448z","SMILE_O":"M40.824-25.739q-1.332 4.356-4.968 7.02t-8.208 2.664-8.208-2.664-4.968-7.02q-.288-.9.144-1.746t1.368-1.134q.9-.288 1.746.144t1.134 1.368q.9 2.88 3.33 4.662t5.454 1.782 5.454-1.782 3.33-4.662q.288-.936 1.152-1.368t1.764-.144 1.332 1.134.144 1.746zm-17.784-15.66q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm18.432 0q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm9.216 9.216q0-4.68-1.836-8.946t-4.914-7.344-7.344-4.914-8.946-1.836-8.946 1.836-7.344 4.914-4.914 7.344-1.836 8.946 1.836 8.946 4.914 7.344 7.344 4.914 8.946 1.836 8.946-1.836 7.344-4.914 4.914-7.344 1.836-8.946zm4.608 0q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","FROWN_O":"M40.824-20.195q.288.9-.144 1.746t-1.332 1.134-1.764-.144-1.152-1.368q-.9-2.88-3.33-4.662t-5.454-1.782-5.454 1.782-3.33 4.662q-.288.936-1.134 1.368t-1.746.144q-.936-.288-1.368-1.134t-.144-1.746q1.332-4.356 4.968-7.02t8.208-2.664 8.208 2.664 4.968 7.02zm-17.784-21.204q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm18.432 0q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm9.216 9.216q0-4.68-1.836-8.946t-4.914-7.344-7.344-4.914-8.946-1.836-8.946 1.836-7.344 4.914-4.914 7.344-1.836 8.946 1.836 8.946 4.914 7.344 7.344 4.914 8.946 1.836 8.946-1.836 7.344-4.914 4.914-7.344 1.836-8.946zm4.608 0q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","MEH_O":"M41.472-25.271q0 .936-.684 1.62t-1.62.684h-23.04q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684h23.04q.936 0 1.62.684t.684 1.62zm-18.432-16.128q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm18.432 0q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm9.216 9.216q0-4.68-1.836-8.946t-4.914-7.344-7.344-4.914-8.946-1.836-8.946 1.836-7.344 4.914-4.914 7.344-1.836 8.946 1.836 8.946 4.914 7.344 7.344 4.914 8.946 1.836 8.946-1.836 7.344-4.914 4.914-7.344 1.836-8.946zm4.608 0q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","GAMEPAD":"M29.952-25.271v-4.608q0-.504-.324-.828t-.828-.324h-6.912v-6.912q0-.504-.324-.828t-.828-.324h-4.608q-.504 0-.828.324t-.324.828v6.912h-6.912q-.504 0-.828.324t-.324.828v4.608q0 .504.324.828t.828.324h6.912v6.912q0 .504.324.828t.828.324h4.608q.504 0 .828-.324t.324-.828v-6.912h6.912q.504 0 .828-.324t.324-.828zm20.736 2.304q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm9.216-9.216q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm9.216 4.608q0 7.632-5.4 13.032t-13.032 5.4q-6.912 0-12.168-4.608h-7.92q-5.256 4.608-12.168 4.608-7.632 0-13.032-5.4t-5.4-13.032 5.4-13.032 13.032-5.4h32.256q7.632 0 13.032 5.4t5.4 13.032z","KEYBOARD_O":"M13.824-22.391v3.456q0 .576-.576.576h-3.456q-.576 0-.576-.576v-3.456q0-.576.576-.576h3.456q.576 0 .576.576zm4.608-9.216v3.456q0 .576-.576.576h-8.064q-.576 0-.576-.576v-3.456q0-.576.576-.576h8.064q.576 0 .576.576zm-4.608-9.216v3.456q0 .576-.576.576h-3.456q-.576 0-.576-.576v-3.456q0-.576.576-.576h3.456q.576 0 .576.576zm36.864 18.432v3.456q0 .576-.576.576h-31.104q-.576 0-.576-.576v-3.456q0-.576.576-.576h31.104q.576 0 .576.576zm-23.04-9.216v3.456q0 .576-.576.576h-3.456q-.576 0-.576-.576v-3.456q0-.576.576-.576h3.456q.576 0 .576.576zm-4.608-9.216v3.456q0 .576-.576.576h-3.456q-.576 0-.576-.576v-3.456q0-.576.576-.576h3.456q.576 0 .576.576zm13.824 9.216v3.456q0 .576-.576.576h-3.456q-.576 0-.576-.576v-3.456q0-.576.576-.576h3.456q.576 0 .576.576zm-4.608-9.216v3.456q0 .576-.576.576h-3.456q-.576 0-.576-.576v-3.456q0-.576.576-.576h3.456q.576 0 .576.576zm13.824 9.216v3.456q0 .576-.576.576h-3.456q-.576 0-.576-.576v-3.456q0-.576.576-.576h3.456q.576 0 .576.576zm13.824 9.216v3.456q0 .576-.576.576h-3.456q-.576 0-.576-.576v-3.456q0-.576.576-.576h3.456q.576 0 .576.576zm-18.432-18.432v3.456q0 .576-.576.576h-3.456q-.576 0-.576-.576v-3.456q0-.576.576-.576h3.456q.576 0 .576.576zm9.216 0v3.456q0 .576-.576.576h-3.456q-.576 0-.576-.576v-3.456q0-.576.576-.576h3.456q.576 0 .576.576zm9.216 0v12.672q0 .576-.576.576h-8.064q-.576 0-.576-.576v-3.456q0-.576.576-.576h4.032v-8.64q0-.576.576-.576h3.456q.576 0 .576.576zm4.608 27.072v-32.256h-59.904v32.256h59.904zm4.608-32.256v32.256q0 1.908-1.35 3.258t-3.258 1.35h-59.904q-1.908 0-3.258-1.35t-1.35-3.258v-32.256q0-1.908 1.35-3.258t3.258-1.35h59.904q1.908 0 3.258 1.35t1.35 3.258z","FLAG_O":"M59.904-26.819v-22.176q-6.084 3.276-11.016 3.276-2.952 0-5.22-1.152-3.6-1.764-6.624-2.754t-6.408-.99q-6.228 0-14.508 4.572v21.564q8.82-4.068 15.588-4.068 1.98 0 3.726.27t3.528.936 2.772 1.116 2.97 1.422l1.008.504q1.584.792 3.636.792 4.32 0 10.548-3.312zm-48.384-28.404q0 1.26-.63 2.304t-1.674 1.656v45.576q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-45.576q-1.044-.612-1.674-1.656t-.63-2.304q0-1.908 1.35-3.258t3.258-1.35 3.258 1.35 1.35 3.258zm52.992 2.304v27.468q0 1.404-1.26 2.052-.36.18-.612.324-7.848 4.176-13.284 4.176-3.168 0-5.688-1.26l-1.008-.504q-2.304-1.188-3.564-1.728t-3.276-1.044-4.104-.504q-3.672 0-8.478 1.584t-8.226 3.672q-.54.324-1.188.324-.576 0-1.152-.288-1.152-.684-1.152-2.016v-26.712q0-1.26 1.116-1.98 1.26-.756 2.826-1.53t4.104-1.872 5.49-1.782 5.58-.684q4.032 0 7.524 1.116t7.524 3.096q1.368.684 3.204.684 4.392 0 11.16-4.032l1.116-.612q1.116-.576 2.232.072 1.116.72 1.116 1.98z","FLAG_CHECKERED":"M29.952-28.439v-6.912q-6.516.576-13.824 4.212v6.66q7.38-3.456 13.824-3.96zm0-15.048v-7.092q-6.192.288-13.824 4.536v6.804q7.74-3.996 13.824-4.248zm29.952 16.668v-6.624q-8.46 4.176-13.824 2.556v-8.064q-.72-.216-1.404-.54-.18-.108-1.188-.612t-1.242-.612-1.134-.54-1.242-.558-1.17-.468-1.296-.45-1.26-.306-1.422-.27-1.422-.144-1.584-.072q-.828 0-1.764.108v7.992h.684q3.672 0 6.93 1.044t7.11 2.952q.684.324 1.404.54v6.768q1.512.612 3.276.612 4.32 0 10.548-3.312zm0-15.372v-6.804q-6.084 3.276-11.016 3.276-1.62 0-2.808-.288v7.056q5.328 1.512 13.824-3.24zm-48.384-13.032q0 1.26-.63 2.304t-1.674 1.656v45.576q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-45.576q-1.044-.612-1.674-1.656t-.63-2.304q0-1.908 1.35-3.258t3.258-1.35 3.258 1.35 1.35 3.258zm52.992 2.304v27.468q0 1.404-1.26 2.052-.36.18-.612.324-7.848 4.176-13.284 4.176-3.168 0-5.688-1.26l-1.008-.504q-2.304-1.188-3.564-1.728t-3.276-1.044-4.104-.504q-3.672 0-8.478 1.584t-8.226 3.672q-.54.324-1.188.324-.576 0-1.152-.288-1.152-.684-1.152-2.016v-26.712q0-1.26 1.116-1.98 1.26-.756 2.826-1.53t4.104-1.872 5.49-1.782 5.58-.684q4.032 0 7.524 1.116t7.524 3.096q1.368.684 3.204.684 4.392 0 11.16-4.032l1.116-.612q1.116-.576 2.232.072 1.116.72 1.116 1.98z","TERMINAL":"M21.06-29.051l-16.776 16.776q-.36.36-.828.36t-.828-.36l-1.8-1.8q-.36-.36-.36-.828t.36-.828l14.148-14.148-14.148-14.148q-.36-.36-.36-.828t.36-.828l1.8-1.8q.36-.36.828-.36t.828.36l16.776 16.776q.36.36.36.828t-.36.828zm38.844 16.452v2.304q0 .504-.324.828t-.828.324h-34.56q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h34.56q.504 0 .828.324t.324.828z","CODE":"M22.212-14.075l-1.8 1.8q-.36.36-.828.36t-.828-.36l-16.776-16.776q-.36-.36-.36-.828t.36-.828l16.776-16.776q.36-.36.828-.36t.828.36l1.8 1.8q.36.36.36.828t-.36.828l-14.148 14.148 14.148 14.148q.36.36.36.828t-.36.828zm21.276-38.412l-13.428 46.476q-.144.468-.558.702t-.846.09l-2.232-.612q-.468-.144-.702-.558t-.09-.882l13.428-46.476q.144-.468.558-.702t.846-.09l2.232.612q.468.144.702.558t.09.882zm23.652 23.436l-16.776 16.776q-.36.36-.828.36t-.828-.36l-1.8-1.8q-.36-.36-.36-.828t.36-.828l14.148-14.148-14.148-14.148q-.36-.36-.36-.828t.36-.828l1.8-1.8q.36-.36.828-.36t.828.36l16.776 16.776q.36.36.36.828t-.36.828z","REPLY_ALL":"M23.04-25.487v2.52q0 1.512-1.404 2.124-.468.18-.9.18-.972 0-1.62-.684l-18.432-18.432q-.684-.684-.684-1.62t.684-1.62l18.432-18.432q1.044-1.116 2.52-.504 1.404.612 1.404 2.124v2.484l-14.292 14.328q-.684.684-.684 1.62t.684 1.62zm41.472 1.368q0 2.088-.612 4.806t-1.386 4.968-1.728 4.5-1.458 3.258l-.72 1.44q-.288.612-1.008.612-.216 0-.324-.036-.9-.288-.828-1.224 1.548-14.4-3.816-20.34-2.304-2.556-6.138-3.978t-9.63-1.89v9.036q0 1.512-1.404 2.124-.468.18-.9.18-.972 0-1.62-.684l-18.432-18.432q-.684-.684-.684-1.62t.684-1.62l18.432-18.432q1.044-1.116 2.52-.504 1.404.612 1.404 2.124v9.432q14.796 1.008 21.564 7.956 6.084 6.228 6.084 18.324z","STAR_HALF_O":"M42.696-29.987l9.252-9-12.816-1.872-2.376-.36-1.08-2.16-5.724-11.592v34.668l2.124 1.116 11.448 6.048-2.16-12.78-.432-2.376zm16.272-9.432l-13.068 12.744 3.096 18q.18 1.188-.216 1.854t-1.224.666q-.612 0-1.44-.432l-16.164-8.496-16.164 8.496q-.828.432-1.44.432-.828 0-1.224-.666t-.216-1.854l3.096-18-13.104-12.744q-1.152-1.152-.828-2.142t1.944-1.242l18.072-2.628 8.1-16.38q.72-1.476 1.764-1.476 1.008 0 1.764 1.476l8.1 16.38 18.072 2.628q1.62.252 1.944 1.242t-.864 2.142z","LOCATION_ARROW":"M50.436-51.875l-23.04 46.08q-.612 1.26-2.052 1.26-.18 0-.54-.072-.792-.18-1.278-.81t-.486-1.422v-20.736h-20.736q-.792 0-1.422-.486t-.81-1.278.144-1.512 1.044-1.08l46.08-23.04q.468-.252 1.044-.252.972 0 1.62.684.54.504.666 1.242t-.234 1.422z","CROP":"M20.052-18.359h21.42v-21.42zm-1.62-1.62l21.42-21.42h-21.42v21.42zm41.472 2.772v6.912q0 .504-.324.828t-.828.324h-8.064v8.064q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-8.064h-31.104q-.504 0-.828-.324t-.324-.828v-31.104h-8.064q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h8.064v-8.064q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828v8.064h30.636l8.856-8.892q.36-.324.828-.324t.828.324q.324.36.324.828t-.324.828l-8.892 8.856v30.636h8.064q.504 0 .828.324t.324.828z","CODE_FORK":"M10.368-11.447q0-1.44-1.008-2.448t-2.448-1.008-2.448 1.008-1.008 2.448 1.008 2.448 2.448 1.008 2.448-1.008 1.008-2.448zm0-41.472q0-1.44-1.008-2.448t-2.448-1.008-2.448 1.008-1.008 2.448 1.008 2.448 2.448 1.008 2.448-1.008 1.008-2.448zm23.04 4.608q0-1.44-1.008-2.448t-2.448-1.008-2.448 1.008-1.008 2.448 1.008 2.448 2.448 1.008 2.448-1.008 1.008-2.448zm3.456 0q0 1.872-.936 3.474t-2.52 2.502q-.072 10.332-8.136 14.904-2.448 1.368-7.308 2.916-4.608 1.44-6.102 2.556t-1.494 3.6v.936q1.584.9 2.52 2.502t.936 3.474q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896q0-1.872.936-3.474t2.52-2.502v-29.52q-1.584-.9-2.52-2.502t-.936-3.474q0-2.88 2.016-4.896t4.896-2.016 4.896 2.016 2.016 4.896q0 1.872-.936 3.474t-2.52 2.502v17.892q1.944-.936 5.544-2.052 1.98-.612 3.15-1.062t2.538-1.116 2.124-1.422 1.458-1.836 1.008-2.502.306-3.294q-1.584-.9-2.52-2.502t-.936-3.474q0-2.88 2.016-4.896t4.896-2.016 4.896 2.016 2.016 4.896z","UNLINK":"M15.804-18.683l-9.216 9.216q-.36.324-.828.324-.432 0-.828-.324-.324-.36-.324-.828t.324-.828l9.216-9.216q.36-.324.828-.324t.828.324q.324.36.324.828t-.324.828zm6.084 1.476v11.52q0 .504-.324.828t-.828.324-.828-.324-.324-.828v-11.52q0-.504.324-.828t.828-.324.828.324.324.828zm-8.064-8.064q0 .504-.324.828t-.828.324h-11.52q-.504 0-.828-.324t-.324-.828.324-.828.828-.324h11.52q.504 0 .828.324t.324.828zm45.504 4.608q0 4.32-3.06 7.308l-5.292 5.256q-2.988 2.988-7.308 2.988-4.356 0-7.344-3.06l-12.024-12.06q-.756-.756-1.512-2.016l8.604-.648 9.828 9.864q.972.972 2.448.99t2.448-.954l5.292-5.256q1.008-1.008 1.008-2.412 0-1.44-1.008-2.448l-9.864-9.9.648-8.604q1.26.756 2.016 1.512l12.096 12.096q3.024 3.096 3.024 7.344zm-22.212-26.064l-8.604.648-9.828-9.864q-1.008-1.008-2.448-1.008-1.404 0-2.448.972l-5.292 5.256q-1.008 1.008-1.008 2.412 0 1.44 1.008 2.448l9.864 9.864-.648 8.64q-1.26-.756-2.016-1.512l-12.096-12.096q-3.024-3.096-3.024-7.344 0-4.32 3.06-7.308l5.292-5.256q2.988-2.988 7.308-2.988 4.356 0 7.344 3.06l12.024 12.06q.756.756 1.512 2.016zm22.788 3.024q0 .504-.324.828t-.828.324h-11.52q-.504 0-.828-.324t-.324-.828.324-.828.828-.324h11.52q.504 0 .828.324t.324.828zm-19.584-19.584v11.52q0 .504-.324.828t-.828.324-.828-.324-.324-.828v-11.52q0-.504.324-.828t.828-.324.828.324.324.828zm14.652 5.436l-9.216 9.216q-.396.324-.828.324t-.828-.324q-.324-.36-.324-.828t.324-.828l9.216-9.216q.36-.324.828-.324t.828.324q.324.36.324.828t-.324.828z","QUESTION":"M25.344-19.223v8.64q0 .576-.432 1.008t-1.008.432h-8.64q-.576 0-1.008-.432t-.432-1.008v-8.64q0-.576.432-1.008t1.008-.432h8.64q.576 0 1.008.432t.432 1.008zm11.376-21.6q0 1.944-.558 3.636t-1.26 2.754-1.98 2.142-2.07 1.566-2.196 1.278q-1.476.828-2.466 2.34t-.99 2.412q0 .612-.432 1.17t-1.008.558h-8.64q-.54 0-.918-.666t-.378-1.35v-1.62q0-2.988 2.34-5.634t5.148-3.906q2.124-.972 3.024-2.016t.9-2.736q0-1.512-1.674-2.664t-3.87-1.152q-2.34 0-3.888 1.044-1.26.9-3.852 4.14-.468.576-1.116.576-.432 0-.9-.288l-5.904-4.5q-.468-.36-.558-.9t.198-1.008q5.76-9.576 16.704-9.576 2.88 0 5.796 1.116t5.256 2.988 3.816 4.59 1.476 5.706z","INFO":"M23.04-16.055v4.608q0 .936-.684 1.62t-1.62.684h-18.432q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h2.304v-13.824h-2.304q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h13.824q.936 0 1.62.684t.684 1.62v20.736h2.304q.936 0 1.62.684t.684 1.62zm-4.608-41.472v6.912q0 .936-.684 1.62t-1.62.684h-9.216q-.936 0-1.62-.684t-.684-1.62v-6.912q0-.936.684-1.62t1.62-.684h9.216q.936 0 1.62.684t.684 1.62z","EXCLAMATION":"M18.432-19.511v8.064q0 .936-.684 1.62t-1.62.684h-9.216q-.936 0-1.62-.684t-.684-1.62v-8.064q0-.936.684-1.62t1.62-.684h9.216q.936 0 1.62.684t.684 1.62zm1.08-38.016l-1.008 27.648q-.036.936-.738 1.62t-1.638.684h-9.216q-.936 0-1.638-.684t-.738-1.62l-1.008-27.648q-.036-.936.63-1.62t1.602-.684h11.52q.936 0 1.602.684t.63 1.62z","SUPERSCRIPT":"M32.292-15.155v6.012h-8.928l-5.724-9.072-.864-1.512q-.288-.324-.396-.756h-.108l-.324.756q-.36.72-.9 1.584l-5.58 9h-9.288v-6.012h4.608l7.092-10.476-6.66-9.792h-4.932v-6.048h9.936l5.004 8.208q.072.144.828 1.512.288.324.396.756h.108q.108-.324.396-.756l.9-1.512 5.04-8.208h9.252v6.048h-4.5l-6.624 9.612 7.344 10.656h3.924zm22.932-24.444v7.416h-18.504l-.108-.972q-.144-1.008-.144-1.656 0-2.304.936-4.212t2.34-3.114 3.024-2.34 3.024-1.962 2.34-1.944.936-2.304q0-1.368-1.062-2.25t-2.538-.882q-1.836 0-3.492 1.404-.504.396-1.296 1.368l-3.78-3.312q.936-1.332 2.268-2.376 2.988-2.34 6.768-2.34 3.96 0 6.408 2.142t2.448 5.706q0 2.016-.882 3.708t-2.232 2.754-2.934 2.106-2.952 1.818-2.358 1.854-1.098 2.268h8.352v-2.88h4.536z","SUBSCRIPT":"M32.292-15.155v6.012h-8.928l-5.724-9.072-.864-1.512q-.288-.324-.396-.756h-.108l-.324.756q-.36.72-.9 1.584l-5.58 9h-9.288v-6.012h4.608l7.092-10.476-6.66-9.792h-4.932v-6.048h9.936l5.004 8.208q.072.144.828 1.512.288.324.396.756h.108q.108-.324.396-.756l.9-1.512 5.04-8.208h9.252v6.048h-4.5l-6.624 9.612 7.344 10.656h3.924zm23.004 7.812v7.416h-18.504l-.144-.972-.108-1.656q0-2.304.936-4.212t2.34-3.114 3.024-2.34 3.024-1.962 2.34-1.944.936-2.304q0-1.368-1.062-2.25t-2.538-.882q-1.836 0-3.492 1.404-.504.396-1.296 1.368l-3.78-3.312q.936-1.332 2.268-2.376 2.88-2.34 6.768-2.34 3.96 0 6.408 2.142t2.448 5.706q0 2.376-1.242 4.266t-3.024 3.096-3.582 2.25-3.132 2.268-1.476 2.628h8.352v-2.88h4.536z","ERASER":"M32.256-13.751l12.096-13.824h-27.648l-12.096 13.824h27.648zm36.468-38.772q.54 1.224.342 2.574t-1.098 2.358l-32.256 36.864q-1.368 1.584-3.456 1.584h-27.648q-1.368 0-2.502-.738t-1.71-1.962q-.54-1.224-.342-2.574t1.098-2.358l32.256-36.864q1.368-1.584 3.456-1.584h27.648q1.368 0 2.502.738t1.71 1.962z","PUZZLE_PIECE":"M59.904-24.911q0 2.916-1.602 4.86t-4.446 1.944q-1.476 0-2.79-.63t-2.124-1.368-2.034-1.368-2.556-.63q-3.96 0-3.96 4.464 0 1.404.576 4.14t.54 4.14v.18q-.792 0-1.188.036-1.224.108-3.51.414t-4.158.486-3.528.18q-2.196 0-3.708-.954t-1.512-3.006q0-1.332.63-2.556t1.368-2.034 1.368-2.124.63-2.79q0-2.844-1.944-4.446t-4.86-1.602q-3.024 0-5.148 1.638t-2.124 4.59q0 1.548.54 2.988t1.206 2.322 1.206 1.908.54 1.818q0 1.62-1.656 3.204-1.332 1.26-4.212 1.26-3.42 0-8.82-.864-.324-.072-.99-.144t-.99-.144l-.468-.072-.108-.036-.072-.036v-36.864q.072.036.63.126t1.224.18.774.126q5.4.864 8.82.864 2.88 0 4.212-1.26 1.656-1.584 1.656-3.204 0-.792-.54-1.818t-1.206-1.908-1.206-2.322-.54-2.988q0-2.952 2.124-4.59t5.184-1.638q2.88 0 4.824 1.602t1.944 4.446q0 1.476-.63 2.79t-1.368 2.124-1.368 2.034-.63 2.556q0 2.052 1.512 3.006t3.708.954q2.304 0 6.48-.54t5.868-.612v.072q-.036.072-.126.63t-.18 1.224-.126.774q-.864 5.4-.864 8.82 0 2.88 1.26 4.212 1.584 1.656 3.204 1.656.792 0 1.818-.54t1.908-1.206 2.322-1.206 2.988-.54q2.952 0 4.59 2.124t1.638 5.148z","MICROPHONE":"M41.472-39.095v4.608q0 7.956-5.31 13.842t-13.122 6.75v4.752h9.216q.936 0 1.62.684t.684 1.62-.684 1.62-1.62.684h-23.04q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684h9.216v-4.752q-7.812-.864-13.122-6.75t-5.31-13.842v-4.608q0-.936.684-1.62t1.62-.684 1.62.684.684 1.62v4.608q0 6.66 4.734 11.394t11.394 4.734 11.394-4.734 4.734-11.394v-4.608q0-.936.684-1.62t1.62-.684 1.62.684.684 1.62zm-9.216-13.824v18.432q0 4.752-3.384 8.136t-8.136 3.384-8.136-3.384-3.384-8.136v-18.432q0-4.752 3.384-8.136t8.136-3.384 8.136 3.384 3.384 8.136z","MICROPHONE_SLASH":"M9.756-30.419l-3.636 3.636q-1.512-3.708-1.512-7.704v-4.608q0-.936.684-1.62t1.62-.684 1.62.684.684 1.62v4.608q0 1.908.54 4.068zm40.104-21.672l-12.996 12.996v4.608q0 4.752-3.384 8.136t-8.136 3.384q-1.98 0-3.924-.684l-3.456 3.456q3.492 1.836 7.38 1.836 6.66 0 11.394-4.734t4.734-11.394v-4.608q0-.936.684-1.62t1.62-.684 1.62.684.684 1.62v4.608q0 7.956-5.31 13.842t-13.122 6.75v4.752h9.216q.936 0 1.62.684t.684 1.62-.684 1.62-1.62.684h-23.04q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684h9.216v-4.752q-4.5-.468-8.46-2.916l-9.144 9.144q-.36.36-.828.36t-.828-.36l-2.952-2.952q-.36-.36-.36-.828t.36-.828l44.424-44.424q.36-.36.828-.36t.828.36l2.952 2.952q.36.36.36.828t-.36.828zm-13.68-4.752l-22.356 22.356v-18.432q0-4.752 3.384-8.136t8.136-3.384q3.672 0 6.642 2.124t4.194 5.472z","SHIELD":"M39.168-29.879v-23.04h-16.128v40.932q4.284-2.268 7.668-4.932 8.46-6.624 8.46-12.96zm6.912-27.648v27.648q0 3.096-1.206 6.138t-2.988 5.4-4.248 4.59-4.554 3.708-4.356 2.79-3.222 1.782-1.53.72q-.432.216-.936.216t-.936-.216q-.576-.252-1.53-.72t-3.222-1.782-4.356-2.79-4.554-3.708-4.248-4.59-2.988-5.4-1.206-6.138v-27.648q0-.936.684-1.62t1.62-.684h41.472q.936 0 1.62.684t.684 1.62z","CALENDAR_O":"M4.608-4.535h50.688v-36.864h-50.688v36.864zm13.824-43.776v-10.368q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v10.368q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm27.648 0v-10.368q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v10.368q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm13.824-2.304v46.08q0 1.872-1.368 3.24t-3.24 1.368h-50.688q-1.872 0-3.24-1.368t-1.368-3.24v-46.08q0-1.872 1.368-3.24t3.24-1.368h4.608v-3.456q0-2.376 1.692-4.068t4.068-1.692h2.304q2.376 0 4.068 1.692t1.692 4.068v3.456h13.824v-3.456q0-2.376 1.692-4.068t4.068-1.692h2.304q2.376 0 4.068 1.692t1.692 4.068v3.456h4.608q1.872 0 3.24 1.368t1.368 3.24z","FIRE_EXTINGUISHER":"M18.432-57.527q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm32.256-1.152v11.52q0 .576-.432.9-.288.252-.72.252-.144 0-.252-.036l-16.128-3.456q-.396-.072-.648-.396t-.252-.72h-9.216v3.672q3.996.828 6.606 3.996t2.61 7.308v28.8q0 .936-.684 1.62t-1.62.684h-18.432q-.936 0-1.62-.684t-.684-1.62v-28.8q0-3.816 2.25-6.858t5.814-4.122v-3.996h-1.152q-2.124 0-4.14.846t-3.294 1.908-2.376 2.394-1.458 1.926-.504.882q-.612 1.26-2.052 1.26-.576 0-1.044-.252-.828-.432-1.134-1.332t.126-1.764q.18-.36.522-.936t1.35-1.926 2.178-2.52 3.06-2.412 3.906-1.89q-.9-1.512-.9-3.096 0-2.376 1.692-4.068t4.068-1.692 4.068 1.692 1.692 4.068q0 1.188-.504 2.304h10.872q0-.396.252-.72t.648-.396l16.128-3.456q.108-.036.252-.036.432 0 .72.252.432.324.432.9z","ROCKET":"M51.84-48.311q0-1.44-1.008-2.448t-2.448-1.008-2.448 1.008-1.008 2.448 1.008 2.448 2.448 1.008 2.448-1.008 1.008-2.448zm8.064-10.368q0 8.964-2.718 15.498t-9.126 12.978q-2.916 2.88-7.02 6.336l-.72 13.644q-.072.576-.576.936l-13.824 8.064q-.252.144-.576.144-.432 0-.828-.324l-2.304-2.304q-.468-.504-.288-1.152l3.06-9.936-10.116-10.116-9.936 3.06q-.108.036-.324.036-.504 0-.828-.324l-2.304-2.304q-.612-.684-.18-1.404l8.064-13.824q.36-.504.936-.576l13.644-.72q3.456-4.104 6.336-7.02 6.768-6.732 12.888-9.288t15.516-2.556q.504 0 .864.342t.36.81z","MAXCDN":"M62.82-36.611l-5.904 27.468h-12.024l6.408-29.952q.468-2.016-.54-3.168-.972-1.188-2.988-1.188h-6.084l-7.344 34.308h-12.024l7.344-34.308h-10.296l-7.344 34.308h-12.024l7.344-34.308-5.508-11.772h45.936q3.636 0 6.822 1.458t5.31 4.086q2.16 2.628 2.916 6.066t0 7.002z","CHEVRON_CIRCLE_LEFT":"M32.724-14.219l3.672-3.672q.684-.684.684-1.62t-.684-1.62l-11.052-11.052 11.052-11.052q.684-.684.684-1.62t-.684-1.62l-3.672-3.672q-.684-.684-1.62-.684t-1.62.684l-16.344 16.344q-.684.684-.684 1.62t.684 1.62l16.344 16.344q.684.684 1.62.684t1.62-.684zm22.572-17.964q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","CHEVRON_CIRCLE_RIGHT":"M25.812-14.219l16.344-16.344q.684-.684.684-1.62t-.684-1.62l-16.344-16.344q-.684-.684-1.62-.684t-1.62.684l-3.672 3.672q-.684.684-.684 1.62t.684 1.62l11.052 11.052-11.052 11.052q-.684.684-.684 1.62t.684 1.62l3.672 3.672q.684.684 1.62.684t1.62-.684zm29.484-17.964q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","CHEVRON_CIRCLE_UP":"M41.94-23.435l3.672-3.672q.684-.684.684-1.62t-.684-1.62l-16.344-16.344q-.684-.684-1.62-.684t-1.62.684l-16.344 16.344q-.684.684-.684 1.62t.684 1.62l3.672 3.672q.684.684 1.62.684t1.62-.684l11.052-11.052 11.052 11.052q.684.684 1.62.684t1.62-.684zm13.356-8.748q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","CHEVRON_CIRCLE_DOWN":"M29.268-17.675l16.344-16.344q.684-.684.684-1.62t-.684-1.62l-3.672-3.672q-.684-.684-1.62-.684t-1.62.684l-11.052 11.052-11.052-11.052q-.684-.684-1.62-.684t-1.62.684l-3.672 3.672q-.684.684-.684 1.62t.684 1.62l16.344 16.344q.684.684 1.62.684t1.62-.684zm26.028-14.508q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","HTML5":"M40.68-42.947l.576-6.3h-31.824l1.692 19.224h22.032l-.792 8.208-7.092 1.908-7.056-1.908-.468-5.04h-6.3l.792 10.008 13.032 3.6h.144v-.036l12.924-3.564 1.8-19.584h-23.184l-.54-6.516h24.264zm-40.68-16.884h50.688l-4.608 51.768-20.808 5.832-20.664-5.832z","CSS3":"M9.9-59.831h54.18l-9.576 47.988-28.944 9.612-25.128-9.612 2.556-12.816h10.692l-1.044 5.292 15.192 5.796 17.496-5.796 2.448-12.204h-43.488l2.088-10.692h43.524l1.368-6.876h-43.488z","ANCHOR":"M34.56-55.223q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62.684 1.62 1.62.684 1.62-.684.684-1.62zm29.952 33.408v12.672q0 .792-.72 1.08-.288.072-.432.072-.468 0-.828-.324l-3.348-3.348q-4.284 5.148-11.466 8.154t-15.462 3.006-15.462-3.006-11.466-8.154l-3.348 3.348q-.324.324-.828.324-.144 0-.432-.072-.72-.288-.72-1.08v-12.672q0-.504.324-.828t.828-.324h12.672q.792 0 1.08.72.288.684-.252 1.26l-3.6 3.6q2.412 3.276 6.822 5.526t9.774 2.97v-23.292h-6.912q-.936 0-1.62-.684t-.684-1.62v-4.608q0-.936.684-1.62t1.62-.684h6.912v-5.868q-2.088-1.224-3.348-3.33t-1.26-4.626q0-3.816 2.7-6.516t6.516-2.7 6.516 2.7 2.7 6.516q0 2.52-1.26 4.626t-3.348 3.33v5.868h6.912q.936 0 1.62.684t.684 1.62v4.608q0 .936-.684 1.62t-1.62.684h-6.912v23.292q5.364-.72 9.774-2.97t6.822-5.526l-3.6-3.6q-.54-.576-.252-1.26.288-.72 1.08-.72h12.672q.504 0 .828.324t.324.828z","UNLOCK_ALT":"M38.016-36.791q1.44 0 2.448 1.008t1.008 2.448v20.736q0 1.44-1.008 2.448t-2.448 1.008h-34.56q-1.44 0-2.448-1.008t-1.008-2.448v-20.736q0-1.44 1.008-2.448t2.448-1.008h1.152v-11.52q0-6.66 4.734-11.394t11.394-4.734 11.394 4.734 4.734 11.394q0 .936-.684 1.62t-1.62.684h-2.304q-.936 0-1.62-.684t-.684-1.62q0-3.816-2.7-6.516t-6.516-2.7-6.516 2.7-2.7 6.516v11.52h26.496z","BULLSEYE":"M36.864-32.183q0 3.816-2.7 6.516t-6.516 2.7-6.516-2.7-2.7-6.516 2.7-6.516 6.516-2.7 6.516 2.7 2.7 6.516zm4.608 0q0-5.724-4.05-9.774t-9.774-4.05-9.774 4.05-4.05 9.774 4.05 9.774 9.774 4.05 9.774-4.05 4.05-9.774zm4.608 0q0 7.632-5.4 13.032t-13.032 5.4-13.032-5.4-5.4-13.032 5.4-13.032 13.032-5.4 13.032 5.4 5.4 13.032zm4.608 0q0-4.68-1.836-8.946t-4.914-7.344-7.344-4.914-8.946-1.836-8.946 1.836-7.344 4.914-4.914 7.344-1.836 8.946 1.836 8.946 4.914 7.344 7.344 4.914 8.946 1.836 8.946-1.836 7.344-4.914 4.914-7.344 1.836-8.946zm4.608 0q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","ELLIPSIS_H":"M13.824-37.943v6.912q0 1.44-1.008 2.448t-2.448 1.008h-6.912q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h6.912q1.44 0 2.448 1.008t1.008 2.448zm18.432 0v6.912q0 1.44-1.008 2.448t-2.448 1.008h-6.912q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h6.912q1.44 0 2.448 1.008t1.008 2.448zm18.432 0v6.912q0 1.44-1.008 2.448t-2.448 1.008h-6.912q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h6.912q1.44 0 2.448 1.008t1.008 2.448z","ELLIPSIS_V":"M13.824-19.511v6.912q0 1.44-1.008 2.448t-2.448 1.008h-6.912q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h6.912q1.44 0 2.448 1.008t1.008 2.448zm0-18.432v6.912q0 1.44-1.008 2.448t-2.448 1.008h-6.912q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h6.912q1.44 0 2.448 1.008t1.008 2.448zm0-18.432v6.912q0 1.44-1.008 2.448t-2.448 1.008h-6.912q-1.44 0-2.448-1.008t-1.008-2.448v-6.912q0-1.44 1.008-2.448t2.448-1.008h6.912q1.44 0 2.448 1.008t1.008 2.448z","RSS_SQUARE":"M18.432-18.359q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm12.636 3.384q-.468-8.352-6.372-14.256t-14.256-6.372q-.504-.036-.864.324t-.36.828v4.608q0 .468.306.792t.774.36q5.544.396 9.504 4.356t4.356 9.504q.036.468.36.774t.792.306h4.608q.468 0 .828-.36t.324-.864zm13.824.036q-.18-5.544-2.016-10.71t-5.022-9.36-7.38-7.38-9.36-5.022-10.71-2.016q-.504-.036-.828.324-.36.36-.36.828v4.608q0 .468.324.792t.792.36q7.344.252 13.608 4.014t10.026 10.026 4.014 13.608q.036.468.36.792t.792.324h4.608q.468 0 .828-.36.396-.324.324-.828zm10.404-34.524v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","PLAY_CIRCLE":"M27.648-59.831q7.524 0 13.878 3.708t10.062 10.062 3.708 13.878-3.708 13.878-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708zm13.824 29.628q1.152-.648 1.152-1.98t-1.152-1.98l-19.584-11.52q-1.116-.684-2.304-.036-1.152.684-1.152 2.016v23.04q0 1.332 1.152 2.016.576.288 1.152.288.612 0 1.152-.324z","TICKET":"M36.864-48.167l11.376 11.376-20.592 20.592-11.376-11.376zm-7.596 35.244l22.248-22.248q.684-.684.684-1.62t-.684-1.62l-13.032-13.032q-.648-.648-1.62-.648t-1.62.648l-22.248 22.248q-.684.684-.684 1.62t.684 1.62l13.032 13.032q.648.648 1.62.648t1.62-.648zm32.004-22.932l-32.652 32.688q-1.332 1.332-3.258 1.332t-3.258-1.332l-4.536-4.536q2.016-2.016 2.016-4.896t-2.016-4.896-4.896-2.016-4.896 2.016l-4.5-4.536q-1.332-1.332-1.332-3.258t1.332-3.258l32.652-32.616q1.332-1.332 3.258-1.332t3.258 1.332l4.5 4.5q-2.016 2.016-2.016 4.896t2.016 4.896 4.896 2.016 4.896-2.016l4.536 4.5q1.332 1.332 1.332 3.258t-1.332 3.258z","MINUS_SQUARE":"M46.08-29.879v-4.608q0-.936-.684-1.62t-1.62-.684h-32.256q-.936 0-1.62.684t-.684 1.62v4.608q0 .936.684 1.62t1.62.684h32.256q.936 0 1.62-.684t.684-1.62zm9.216-19.584v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","MINUS_SQUARE_O":"M41.472-35.639v2.304q0 .504-.324.828t-.828.324h-29.952q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h29.952q.504 0 .828.324t.324.828zm4.608 16.128v-29.952q0-2.376-1.692-4.068t-4.068-1.692h-29.952q-2.376 0-4.068 1.692t-1.692 4.068v29.952q0 2.376 1.692 4.068t4.068 1.692h29.952q2.376 0 4.068-1.692t1.692-4.068zm4.608-29.952v29.952q0 4.284-3.042 7.326t-7.326 3.042h-29.952q-4.284 0-7.326-3.042t-3.042-7.326v-29.952q0-4.284 3.042-7.326t7.326-3.042h29.952q4.284 0 7.326 3.042t3.042 7.326z","LEVEL_UP":"M36.648-42.731q-.648 1.332-2.088 1.332h-6.912v31.104q0 .504-.324.828t-.828.324h-25.344q-.756 0-1.044-.648-.288-.72.144-1.26l5.76-6.912q.324-.396.9-.396h11.52v-23.04h-6.912q-1.44 0-2.088-1.332-.612-1.332.324-2.448l11.52-13.824q.648-.792 1.764-.792t1.764.792l11.52 13.824q.972 1.152.324 2.448z","LEVEL_DOWN":"M1.152-55.223h25.344q.468 0 .81.342t.342.846v31.068h6.912q1.44 0 2.088 1.332t-.324 2.484l-11.52 13.824q-.648.792-1.764.792t-1.764-.792l-11.52-13.824q-.936-1.116-.324-2.484.648-1.332 2.088-1.332h6.912v-23.04h-11.52q-.504 0-.9-.396l-5.76-6.912q-.468-.504-.144-1.224.324-.684 1.044-.684z","CHECK_SQUARE":"M24.66-17.675l22.104-22.104q.684-.684.684-1.62t-.684-1.62l-3.672-3.672q-.684-.684-1.62-.684t-1.62.684l-16.812 16.812-7.596-7.596q-.684-.684-1.62-.684t-1.62.684l-3.672 3.672q-.684.684-.684 1.62t.684 1.62l12.888 12.888q.684.684 1.62.684t1.62-.684zm30.636-31.788v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","PENCIL_SQUARE":"M14.544-24.551l5.472 5.472-1.872 1.872h-2.016v-3.456h-3.456v-2.016zm14.904-14.04q.504.468-.108 1.08l-10.476 10.476q-.612.612-1.08.108-.504-.468.108-1.08l10.476-10.476q.612-.612 1.08-.108zm-9.864 24.84l19.584-19.584-10.368-10.368-19.584 19.584v10.368h10.368zm21.888-21.888l3.312-3.312q1.008-1.008 1.008-2.448t-1.008-2.448l-5.472-5.472q-1.008-1.008-2.448-1.008t-2.448 1.008l-3.312 3.312zm13.824-13.824v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","EXTERNAL_LINK_SQUARE":"M46.08-31.031v-17.28q0-.936-.684-1.62t-1.62-.684h-17.28q-1.512 0-2.124 1.404-.612 1.476.504 2.52l5.184 5.184-19.224 19.224q-.684.684-.684 1.62t.684 1.62l3.672 3.672q.684.684 1.62.684t1.62-.684l19.224-19.224 5.184 5.184q.648.684 1.62.684.432 0 .9-.18 1.404-.612 1.404-2.124zm9.216-18.432v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","SHARE_SQUARE":"M36.18-24.803l12.672-12.672q.684-.684.684-1.62t-.684-1.62l-12.672-12.672q-1.08-1.116-2.484-.504-1.44.612-1.44 2.124v5.76q-4.284 0-7.776.702t-5.85 1.836-4.104 2.844-2.754 3.438-1.602 3.924-.774 4.014-.18 3.978q0 6.516 6.012 14.544.36.432.9.432.252 0 .468-.108.792-.324.684-1.188-1.584-12.744 2.232-17.028 1.656-1.872 4.68-2.718t8.064-.846v5.76q0 1.512 1.44 2.124.432.18.864.18.936 0 1.62-.684zm19.116-24.66v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","COMPASS":"M23.04-25.271l9.216-4.608-9.216-4.608v9.216zm13.824-21.276v19.512l-18.432 9.216v-19.512zm10.368 14.364q0-5.328-2.628-9.828t-7.128-7.128-9.828-2.628-9.828 2.628-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628 9.828-2.628 7.128-7.128 2.628-9.828zm8.064 0q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","TOGGLE_DOWN":"M41.22-40.139q.648 1.26-.18 2.376l-11.52 16.128q-.684.972-1.872.972t-1.872-.972l-11.52-16.128q-.828-1.116-.18-2.376.612-1.26 2.052-1.26h23.04q1.44 0 2.052 1.26zm4.86 25.236v-34.56q0-.468-.342-.81t-.81-.342h-34.56q-.468 0-.81.342t-.342.81v34.56q0 .468.342.81t.81.342h34.56q.468 0 .81-.342t.342-.81zm9.216-34.56v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","TOGGLE_UP":"M41.22-24.227q-.612 1.26-2.052 1.26h-23.04q-1.44 0-2.052-1.26-.648-1.26.18-2.376l11.52-16.128q.684-.972 1.872-.972t1.872.972l11.52 16.128q.828 1.116.18 2.376zm4.86 9.324v-34.56q0-.468-.342-.81t-.81-.342h-34.56q-.468 0-.81.342t-.342.81v34.56q0 .468.342.81t.81.342h34.56q.468 0 .81-.342t.342-.81zm9.216-34.56v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","TOGGLE_RIGHT":"M39.168-32.183q0 1.188-.972 1.872l-16.128 11.52q-1.116.828-2.376.18-1.26-.612-1.26-2.052v-23.04q0-1.44 1.26-2.052 1.26-.648 2.376.18l16.128 11.52q.972.684.972 1.872zm6.912 17.28v-34.56q0-.504-.324-.828t-.828-.324h-34.56q-.504 0-.828.324t-.324.828v34.56q0 .504.324.828t.828.324h34.56q.504 0 .828-.324t.324-.828zm9.216-34.56v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","EURO":"M35.136-17.387l1.26 5.724q.108.432-.108.81t-.612.522l-.18.036q-.144.072-.378.126t-.576.162-.774.198-.918.18-1.08.18-1.206.162-1.314.108-1.386.036q-8.424 0-14.724-4.698t-8.568-12.654h-3.42q-.468 0-.81-.342t-.342-.81v-4.068q0-.468.342-.81t.81-.342h2.376q-.072-2.052.036-3.78h-2.412q-.504 0-.828-.324t-.324-.828v-4.104q0-.504.324-.828t.828-.324h3.528q2.412-7.56 8.766-12.168t14.418-4.608q3.672 0 6.984.828.396.108.72.54.216.396.108.864l-1.548 5.724q-.108.468-.504.702t-.864.09l-.144-.036-.414-.09-.63-.126-.81-.126-.936-.108-1.044-.09-1.062-.036q-4.536 0-8.136 2.304t-5.4 6.336h16.848q.576 0 .9.432.36.432.252.936l-.864 4.104q-.18.936-1.152.936h-17.568q-.108 1.332 0 3.78h16.524q.54 0 .9.432.324.432.216.972l-.864 4.032q-.072.396-.396.666t-.72.27h-13.932q1.728 4.212 5.382 6.678t8.226 2.466q.648 0 1.296-.054t1.206-.126 1.062-.162.882-.18.666-.162l.432-.108.18-.072q.468-.18.936.072.432.252.54.756z","GBP":"M36.72-23.507v13.212q0 .504-.324.828t-.828.324h-34.416q-.504 0-.828-.324t-.324-.828v-5.4q0-.468.342-.81t.81-.342h3.492v-13.788h-3.42q-.504 0-.828-.342t-.324-.81v-4.716q0-.504.324-.828t.828-.324h3.42v-8.028q0-6.156 4.446-10.152t11.322-3.996q6.66 0 12.06 4.5.324.288.36.738t-.252.81l-3.708 4.572q-.324.396-.792.432-.468.072-.828-.252-.18-.18-.936-.684t-2.484-1.152-3.348-.648q-3.06 0-4.932 1.692t-1.872 4.428v7.74h10.98q.468 0 .81.324t.342.828v4.716q0 .468-.342.81t-.81.342h-10.98v13.644h14.904v-6.516q0-.468.324-.81t.828-.342h5.832q.504 0 .828.342t.324.81z","USD":"M35.208-21.779q0 5.508-3.582 9.486t-9.306 4.914v6.3q0 .504-.324.828t-.828.324h-4.86q-.468 0-.81-.342t-.342-.81v-6.3q-2.376-.324-4.59-1.116t-3.654-1.602-2.664-1.728-1.674-1.35-.63-.648q-.612-.756-.072-1.476l3.708-4.86q.252-.36.828-.432.54-.072.864.324l.072.072q4.068 3.564 8.748 4.5 1.332.288 2.664.288 2.916 0 5.13-1.548t2.214-4.392q0-1.008-.54-1.908t-1.206-1.512-2.106-1.35-2.376-1.152-2.88-1.17q-1.404-.576-2.214-.9t-2.214-.954-2.25-1.116-2.034-1.278-1.926-1.53-1.566-1.764-1.278-2.088-.756-2.394-.306-2.808q0-4.968 3.528-8.712t9.18-4.824v-6.48q0-.468.342-.81t.81-.342h4.86q.504 0 .828.324t.324.828v6.336q2.052.216 3.978.828t3.132 1.206 2.286 1.35 1.404 1.044.54.504q.612.648.18 1.368l-2.916 5.256q-.288.54-.828.576-.504.108-.972-.252-.108-.108-.522-.432t-1.404-.954-2.106-1.152-2.682-.936-3.078-.414q-3.42 0-5.58 1.548t-2.16 3.996q0 .936.306 1.728t1.062 1.494 1.422 1.188 2.016 1.116 2.178.972 2.52.99q1.908.72 2.916 1.134t2.736 1.26 2.718 1.53 2.232 1.8 1.908 2.286 1.134 2.754.468 3.384z","RUPEE":"M32.328-47.519v3.672q0 .504-.324.828t-.828.324h-6.048q-.828 5.184-4.644 8.424t-9.936 3.96q6.012 6.408 16.524 19.296.504.576.144 1.224-.288.648-1.044.648h-7.02q-.576 0-.9-.432-11.016-13.212-17.928-20.556-.324-.324-.324-.792v-4.572q0-.468.342-.81t.81-.342h4.032q4.752 0 7.65-1.548t3.69-4.5h-15.372q-.504 0-.828-.324t-.324-.828v-3.672q0-.504.324-.828t.828-.324h14.868q-2.052-4.068-9.648-4.068h-5.22q-.468 0-.81-.342t-.342-.81v-4.788q0-.504.324-.828t.828-.324h29.952q.504 0 .828.324t.324.828v3.672q0 .504-.324.828t-.828.324h-8.388q1.692 2.196 2.304 5.184h6.156q.504 0 .828.324t.324.828z","YEN":"M21.708-9.143h-6.192q-.468 0-.81-.324t-.342-.828v-11.88h-10.368q-.468 0-.81-.324t-.342-.828v-3.708q0-.468.342-.81t.81-.342h10.368v-3.06h-10.368q-.468 0-.81-.324t-.342-.828v-3.744q0-.468.342-.81t.81-.342h7.704l-11.556-20.808q-.288-.576 0-1.152.36-.576 1.008-.576h6.984q.684 0 1.044.648l7.74 15.3q.684 1.368 2.016 4.5.36-.864 1.098-2.448t.99-2.196l6.876-15.12q.288-.684 1.044-.684h6.876q.612 0 .972.576.324.504.036 1.116l-11.268 20.844h7.74q.468 0 .81.342t.342.81v3.744q0 .504-.342.828t-.81.324h-10.44v3.06h10.44q.468 0 .81.342t.342.81v3.708q0 .504-.342.828t-.81.324h-10.44v11.88q0 .468-.342.81t-.81.342z","RUBLE":"M37.548-44.099q0-3.6-2.34-5.832t-6.156-2.232h-11.52v16.128h11.52q3.816 0 6.156-2.232t2.34-5.832zm8.532 0q0 6.948-4.554 11.34t-11.754 4.392h-12.24v4.248h18.18q.504 0 .828.324t.324.828v4.608q0 .504-.324.828t-.828.324h-18.18v6.912q0 .504-.342.828t-.81.324h-6.012q-.504 0-.828-.324t-.324-.828v-6.912h-8.064q-.504 0-.828-.324t-.324-.828v-4.608q0-.504.324-.828t.828-.324h8.064v-4.248h-8.064q-.504 0-.828-.324t-.324-.828v-5.364q0-.468.324-.81t.828-.342h8.064v-22.644q0-.504.324-.828t.828-.324h19.404q7.2 0 11.754 4.392t4.554 11.34z","WON":"M18.504-21.419l2.916-10.764h-5.724l2.7 10.8.036.108.036.108.018-.126.018-.126zm4.176-15.372l1.26-4.608h-10.512l1.152 4.608h8.1zm6.912 0h5.004l-1.26-4.608h-2.52zm16.164 15.408l2.808-10.8h-5.832l2.916 10.764.018.126.054.126.018-.108.018-.108zm3.996-15.408l1.188-4.608h-10.692l1.224 4.608h8.28zm14.76 1.152v2.304q0 .504-.324.828t-.828.324h-7.668l-5.904 22.176q-.252.864-1.116.864h-5.724q-.864 0-1.116-.864l-5.976-22.176h-7.524l-6.012 22.176q-.252.864-1.116.864h-5.724q-.396 0-.702-.252t-.378-.612l-5.76-22.176h-7.488q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h6.3l-1.188-4.608h-5.112q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h3.924l-3.204-12.384q-.18-.54.18-1.008.36-.432.936-.432h4.932q.936 0 1.116.864l3.24 12.96h12.924l3.492-12.96q.252-.864 1.116-.864h4.536q.864 0 1.116.864l3.528 12.96h13.14l3.348-12.96q.18-.864 1.116-.864h4.932q.576 0 .936.432.36.468.18 1.008l-3.276 12.384h3.996q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-5.22l-1.224 4.608h6.444q.504 0 .828.324t.324.828z","BTC":"M42.012-41.399q.648 6.552-4.716 9.288 4.212 1.008 6.3 3.708t1.62 7.704q-.252 2.556-1.17 4.5t-2.322 3.204-3.492 2.106-4.374 1.242-5.238.54v9.18h-5.544v-9.036q-2.88 0-4.392-.036v9.072h-5.544v-9.18q-.648 0-1.944-.018t-1.98-.018h-7.2l1.116-6.588h3.996q1.8 0 2.088-1.836v-14.472h.576q-.216-.036-.576-.036v-10.332q-.468-2.448-3.204-2.448h-3.996v-5.904l7.632.036q2.304 0 3.492-.036v-9.072h5.544v8.892q2.952-.072 4.392-.072v-8.82h5.544v9.072q2.844.252 5.04.81t4.068 1.62 2.97 2.808 1.314 4.122zm-7.74 19.62q0-1.296-.54-2.304t-1.332-1.656-2.07-1.098-2.358-.666-2.664-.324-2.484-.108-2.322.036-1.71.036v12.168q.288 0 1.332.018t1.728.018 1.908-.054 2.106-.144 2.052-.306 1.998-.504 1.71-.756 1.422-1.08.882-1.44.342-1.836zm-2.556-17.136q0-1.188-.45-2.106t-1.098-1.512-1.728-1.008-1.98-.594-2.214-.288-2.088-.09-1.944.036-1.422.018v11.052q.18 0 1.242.018t1.674 0 1.8-.072 1.98-.198 1.854-.396 1.746-.666 1.332-.972.972-1.386.324-1.836z","FILE":"M36.864-46.007v-16.992q.792.504 1.296 1.008l14.688 14.688q.504.504 1.008 1.296h-16.992zm-4.608 1.152q0 1.44 1.008 2.448t2.448 1.008h19.584v38.016q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h28.8v19.584z","FILE_TEXT":"M52.848-47.303q.504.504 1.008 1.296h-16.992v-16.992q.792.504 1.296 1.008zm-17.136 5.904h19.584v38.016q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h28.8v19.584q0 1.44 1.008 2.448t2.448 1.008zm5.76 26.496v-2.304q0-.504-.324-.828t-.828-.324h-25.344q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h25.344q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-25.344q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h25.344q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-25.344q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h25.344q.504 0 .828-.324t.324-.828z","SORT_ALPHA_ASC":"M42.876-49.751h6.372l-2.592-7.848-.432-1.692q-.072-.576-.072-.72h-.144l-.108.72q0 .036-.126.648t-.27 1.044zm-16.38 37.152q0 .432-.36.864l-11.484 11.484q-.36.324-.828.324-.432 0-.828-.324l-11.52-11.52q-.54-.576-.252-1.26.288-.72 1.08-.72h6.912v-49.536q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828v49.536h6.912q.504 0 .828.324t.324.828zm30.096 4.284v8.388h-21.024v-3.24l13.284-19.044q.432-.648.756-.972l.396-.324v-.108l-.234.018-.27.018q-.432.108-1.08.108h-8.352v4.14h-4.32v-8.244h20.412v3.204l-13.284 19.08q-.216.288-.756.936l-.396.396v.072l.504-.072q.324-.072 1.08-.072h8.928v-4.284h4.356zm3.204-32.292v3.816h-10.368v-3.816h2.7l-1.692-5.184h-8.748l-1.692 5.184h2.7v3.816h-10.332v-3.816h2.52l8.28-23.832h5.832l8.28 23.832h2.52z","SORT_ALPHA_DESC":"M42.876-12.887h6.372l-2.592-7.848-.432-1.692q-.072-.576-.072-.72h-.144l-.108.72q0 .036-.126.648t-.27 1.044zm-16.38.288q0 .432-.36.864l-11.484 11.484q-.36.324-.828.324-.432 0-.828-.324l-11.52-11.52q-.54-.576-.252-1.26.288-.72 1.08-.72h6.912v-49.536q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828v49.536h6.912q.504 0 .828.324t.324.828zm33.3 8.856v3.816h-10.368v-3.816h2.7l-1.692-5.184h-8.748l-1.692 5.184h2.7v3.816h-10.332v-3.816h2.52l8.28-23.832h5.832l8.28 23.832h2.52zm-3.204-41.436v8.388h-21.024v-3.24l13.284-19.044q.432-.648.756-.972l.396-.324v-.108l-.234.018-.27.018q-.432.108-1.08.108h-8.352v4.14h-4.32v-8.244h20.412v3.204l-13.284 19.08q-.216.288-.756.936l-.396.36v.108l.504-.108q.324-.036 1.08-.036h8.928v-4.284h4.356z","SORT_AMOUNT_ASC":"M26.496-12.599q0 .432-.36.864l-11.484 11.484q-.36.324-.828.324-.432 0-.828-.324l-11.52-11.52q-.54-.576-.252-1.26.288-.72 1.08-.72h6.912v-49.536q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828v49.536h6.912q.504 0 .828.324t.324.828zm38.016 4.608v6.912q0 .504-.324.828t-.828.324h-29.952q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h29.952q.504 0 .828.324t.324.828zm-6.912-18.432v6.912q0 .504-.324.828t-.828.324h-23.04q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h23.04q.504 0 .828.324t.324.828zm-6.912-18.432v6.912q0 .504-.324.828t-.828.324h-16.128q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h16.128q.504 0 .828.324t.324.828zm-6.912-18.432v6.912q0 .504-.324.828t-.828.324h-9.216q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h9.216q.504 0 .828.324t.324.828z","SORT_AMOUNT_DESC":"M43.776-7.991v6.912q0 .504-.324.828t-.828.324h-9.216q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h9.216q.504 0 .828.324t.324.828zm-17.28-4.608q0 .432-.36.864l-11.484 11.484q-.36.324-.828.324-.432 0-.828-.324l-11.52-11.52q-.54-.576-.252-1.26.288-.72 1.08-.72h6.912v-49.536q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828v49.536h6.912q.504 0 .828.324t.324.828zm24.192-13.824v6.912q0 .504-.324.828t-.828.324h-16.128q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h16.128q.504 0 .828.324t.324.828zm6.912-18.432v6.912q0 .504-.324.828t-.828.324h-23.04q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h23.04q.504 0 .828.324t.324.828zm6.912-18.432v6.912q0 .504-.324.828t-.828.324h-29.952q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h29.952q.504 0 .828.324t.324.828z","SORT_NUMERIC_ASC":"M48.456-17.171q0-2.268-1.584-4.176t-3.708-1.908q-1.872 0-2.988 1.332t-1.116 3.384 1.314 3.42 3.762 1.368q1.8 0 3.06-.972t1.26-2.448zm-21.96 4.572q0 .432-.36.864l-11.484 11.484q-.36.324-.828.324-.432 0-.828-.324l-11.52-11.52q-.54-.576-.252-1.26.288-.72 1.08-.72h6.912v-49.536q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828v49.536h6.912q.504 0 .828.324t.324.828zm27-2.484q0 2.232-.468 4.374t-1.476 4.104-2.448 3.438-3.546 2.358-4.59.882q-2.232 0-3.888-.576-.864-.288-1.512-.54l1.404-4.068q.54.252 1.116.396 1.332.468 2.7.468 3.024 0 4.842-2.106t2.394-5.238h-.072q-.756.828-2.214 1.332t-3.042.504q-3.816 0-6.228-2.574t-2.412-6.21q0-3.78 2.592-6.408t6.516-2.628q4.428 0 7.38 3.402t2.952 9.09zm-1.08-25.812v4.104h-16.884v-4.104h6.012v-15.552l.018-.684.018-.612v-.576h-.072l-.252.432q-.288.468-.936 1.116l-2.232 2.088-2.952-3.096 6.912-6.66h4.428v23.544h5.94z","SORT_NUMERIC_DESC":"M48.456-54.035q0-2.268-1.584-4.176t-3.708-1.908q-1.872 0-2.988 1.332t-1.116 3.384 1.314 3.42 3.762 1.368q1.8 0 3.06-.972t1.26-2.448zm-21.96 41.436q0 .432-.36.864l-11.484 11.484q-.36.324-.828.324-.432 0-.828-.324l-11.52-11.52q-.54-.576-.252-1.26.288-.72 1.08-.72h6.912v-49.536q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828v49.536h6.912q.504 0 .828.324t.324.828zm25.92 8.568v4.104h-16.884v-4.104h6.012v-15.552l.018-.684.018-.612v-.576h-.072l-.252.432q-.288.468-.936 1.116l-2.232 2.088-2.952-3.096 6.912-6.66h4.428v23.544h5.94zm1.08-47.916q0 2.232-.468 4.374t-1.476 4.104-2.448 3.438-3.546 2.358-4.59.882q-2.232 0-3.888-.576-.864-.288-1.512-.54l1.404-4.068q.54.252 1.116.396 1.332.468 2.7.468 3.024 0 4.842-2.106t2.394-5.238h-.072q-.756.828-2.214 1.332t-3.042.504q-3.816 0-6.228-2.574t-2.412-6.21q0-3.78 2.592-6.408t6.516-2.628q4.428 0 7.38 3.402t2.952 9.09z","THUMBS_UP":"M9.216-16.055q0-.936-.684-1.62t-1.62-.684q-.972 0-1.638.684t-.666 1.62q0 .972.666 1.638t1.638.666q.936 0 1.62-.666t.684-1.638zm5.76-18.432v23.04q0 .936-.684 1.62t-1.62.684h-10.368q-.936 0-1.62-.684t-.684-1.62v-23.04q0-.936.684-1.62t1.62-.684h10.368q.936 0 1.62.684t.684 1.62zm42.624 0q0 3.096-1.98 5.364.54 1.584.54 2.736.108 2.736-1.548 4.932.612 2.016 0 4.212-.54 2.052-1.944 3.384.324 4.032-1.764 6.516-2.304 2.736-7.092 2.808h-4.644q-2.376 0-5.184-.558t-4.374-1.044-4.338-1.422q-4.428-1.548-5.688-1.584-.936-.036-1.62-.702t-.684-1.602v-23.076q0-.9.648-1.566t1.548-.738q.864-.072 2.736-2.124t3.636-4.356q2.448-3.132 3.636-4.32.648-.648 1.116-1.728t.63-1.746.486-2.178q.252-1.404.45-2.196t.702-1.872 1.224-1.8q.684-.684 1.62-.684 1.656 0 2.97.378t2.16.936 1.44 1.458.864 1.62.432 1.8.18 1.62.018 1.404q0 1.368-.342 2.736t-.684 2.16-.99 2.016q-.108.216-.36.648t-.396.792-.288.864h9.972q2.808 0 4.86 2.052t2.052 4.86z","THUMBS_DOWN":"M9.216-43.703q0 .936-.684 1.62t-1.62.684q-.972 0-1.638-.684t-.666-1.62q0-.972.666-1.638t1.638-.666q.936 0 1.62.666t.684 1.638zm5.76 18.432v-23.04q0-.936-.684-1.62t-1.62-.684h-10.368q-.936 0-1.62.684t-.684 1.62v23.04q0 .936.684 1.62t1.62.684h10.368q.936 0 1.62-.684t.684-1.62zm40.644-5.364q1.98 2.196 1.98 5.364-.036 2.808-2.07 4.86t-4.842 2.052h-9.972q.144.504.288.864t.396.792.36.648q.648 1.332.972 2.052t.684 2.106.36 2.754q0 .864-.018 1.404t-.18 1.62-.432 1.8-.864 1.62-1.44 1.458-2.16.936-2.97.378q-.936 0-1.62-.684-.72-.72-1.224-1.8t-.702-1.872-.45-2.196q-.324-1.512-.486-2.178t-.63-1.746-1.116-1.728q-1.188-1.188-3.636-4.32-1.764-2.304-3.636-4.356t-2.736-2.124q-.9-.072-1.548-.738t-.648-1.566v-23.076q0-.936.684-1.602t1.62-.702q1.26-.036 5.688-1.584 2.772-.936 4.338-1.422t4.374-1.044 5.184-.558h4.644q4.788.072 7.092 2.808 2.088 2.484 1.764 6.516 1.404 1.332 1.944 3.384.612 2.196 0 4.212 1.656 2.196 1.548 4.932 0 1.152-.54 2.736z","YOUTUBE_SQUARE":"M33.084-17.531v-5.652q0-1.8-1.044-1.8-.612 0-1.188.576v8.064q.576.576 1.188.576 1.044 0 1.044-1.764zm6.624-4.392h2.376v-1.224q0-1.836-1.188-1.836t-1.188 1.836v1.224zm-20.556-9.576v2.52h-2.88v15.228h-2.664v-15.228h-2.808v-2.52h8.352zm7.236 4.536v13.212h-2.412v-1.44q-1.404 1.62-2.736 1.62-1.188 0-1.512-1.008-.216-.576-.216-1.944v-10.44h2.376v9.72q0 .864.036.936.036.54.54.54.72 0 1.512-1.116v-10.08h2.412zm9.072 3.996v5.256q0 1.872-.252 2.628-.432 1.512-1.908 1.512-1.26 0-2.448-1.476v1.296h-2.412v-17.748h2.412v5.796q1.152-1.44 2.448-1.44 1.476 0 1.908 1.512.252.756.252 2.664zm9.036 4.644v.324q0 1.044-.072 1.548-.108.792-.54 1.44-.972 1.44-2.88 1.44-1.872 0-2.916-1.368-.756-.972-.756-3.096v-4.644q0-2.124.72-3.096 1.044-1.368 2.88-1.368t2.808 1.368q.756 1.008.756 3.096v2.736h-4.788v2.34q0 1.836 1.224 1.836.864 0 1.08-.936 0-.036.018-.252t.018-.594v-.774h2.448zm-16.236-29.664v5.616q0 1.836-1.152 1.836t-1.152-1.836v-5.616q0-1.872 1.152-1.872t1.152 1.872zm19.188 25.668q0-6.372-.684-9.36-.36-1.584-1.548-2.646t-2.736-1.242q-4.896-.54-14.832-.54-9.9 0-14.796.54-1.584.18-2.754 1.242t-1.53 2.646q-.72 3.132-.72 9.36 0 6.336.72 9.36.36 1.548 1.53 2.628t2.718 1.26q4.932.54 14.832.54t14.832-.54q1.548-.18 2.718-1.26t1.53-2.628q.72-3.024.72-9.36zm-27.18-23.436l3.24-10.656h-2.7l-1.836 7.02-1.908-7.02h-2.808l.864 2.484.828 2.484q1.26 3.708 1.656 5.688v7.236h2.664v-7.236zm10.404 2.916v-4.68q0-2.088-.756-3.132-1.044-1.368-2.808-1.368-1.836 0-2.808 1.368-.756 1.044-.756 3.132v4.68q0 2.088.756 3.132.972 1.368 2.808 1.368 1.764 0 2.808-1.368.756-.972.756-3.132zm6.516 4.32h2.412v-13.32h-2.412v10.188q-.792 1.116-1.512 1.116-.54 0-.576-.576-.036-.072-.036-.936v-9.792h-2.412v10.548q0 1.332.216 1.98.396.972 1.548.972 1.296 0 2.772-1.62v1.44zm18.108-10.944v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","YOUTUBE":"M34.956-19.655v7.596q0 2.412-1.404 2.412-.828 0-1.62-.792v-10.836q.792-.792 1.62-.792 1.404 0 1.404 2.412zm12.168.036v1.656h-3.24v-1.656q0-2.448 1.62-2.448t1.62 2.448zm-34.776-7.848h3.852v-3.384h-11.232v3.384h3.78v20.484h3.6v-20.484zm10.368 20.484h3.204v-17.784h-3.204v13.608q-1.08 1.512-2.052 1.512-.648 0-.756-.756-.036-.108-.036-1.26v-13.104h-3.204v14.076q0 1.764.288 2.628.432 1.332 2.088 1.332 1.728 0 3.672-2.196v1.944zm15.444-5.328v-7.092q0-2.628-.324-3.564-.612-2.016-2.556-2.016-1.8 0-3.348 1.944v-7.812h-3.204v23.868h3.204v-1.728q1.62 1.98 3.348 1.98 1.944 0 2.556-1.98.324-.972.324-3.6zm12.168-.36v-.468h-3.276q0 1.836-.072 2.196-.252 1.296-1.44 1.296-1.656 0-1.656-2.484v-3.132h6.444v-3.708q0-2.844-.972-4.176-1.404-1.836-3.816-1.836-2.448 0-3.852 1.836-1.008 1.332-1.008 4.176v6.228q0 2.844 1.044 4.176 1.404 1.836 3.888 1.836 2.592 0 3.888-1.908.648-.972.756-1.944.072-.324.072-2.088zm-21.888-32.868v-7.56q0-2.484-1.548-2.484t-1.548 2.484v7.56q0 2.52 1.548 2.52t1.548-2.52zm25.884 27.036q0 8.424-.936 12.6-.504 2.124-2.088 3.564t-3.672 1.656q-6.624.756-19.98.756t-19.98-.756q-2.088-.216-3.69-1.656t-2.07-3.564q-.936-4.032-.936-12.6 0-8.424.936-12.6.504-2.124 2.088-3.564t3.708-1.692q6.588-.72 19.944-.72t19.98.72q2.088.252 3.69 1.692t2.07 3.564q.936 4.032.936 12.6zm-35.928-45.936h3.672l-4.356 14.364v9.756h-3.6v-9.756q-.504-2.664-2.196-7.632-1.332-3.708-2.34-6.732h3.816l2.556 9.468zm13.32 11.988v6.3q0 2.916-1.008 4.248-1.332 1.836-3.816 1.836-2.412 0-3.78-1.836-1.008-1.368-1.008-4.248v-6.3q0-2.88 1.008-4.212 1.368-1.836 3.78-1.836 2.484 0 3.816 1.836 1.008 1.332 1.008 4.212zm12.06-5.832v17.964h-3.276v-1.98q-1.908 2.232-3.708 2.232-1.656 0-2.124-1.332-.288-.864-.288-2.7v-14.184h3.276v13.212q0 1.188.036 1.26.108.792.756.792.972 0 2.052-1.548v-13.716h3.276z","XING":"M21.492-40.427q-.36.648-9.252 16.416-.972 1.656-2.34 1.656h-8.604q-.756 0-1.116-.612t0-1.296l9.108-16.128v-.036l-5.796-10.044q-.432-.792-.036-1.332.324-.54 1.152-.54h8.604q1.44 0 2.376 1.62zm29.016-23.112q.396.576 0 1.332l-19.008 33.624v.036l12.096 22.14q.396.72.036 1.332-.36.54-1.152.54h-8.604q-1.512 0-2.376-1.62l-12.204-22.392q.648-1.152 19.116-33.912.9-1.62 2.304-1.62h8.676q.792 0 1.116.54z","XING_SQUARE":"M24.66-36.899q0-.036-4.536-7.992-.756-1.224-1.872-1.224h-6.624q-.648 0-.936.396-.252.432.036 1.044l4.5 7.776v.036l-7.056 12.456q-.324.504 0 1.008.288.468.864.468h6.66q1.116 0 1.8-1.296zm22.464-17.892q-.252-.432-.864-.432h-6.732q-1.08 0-1.764 1.26l-14.796 26.244q.036.072 9.432 17.316.72 1.26 1.872 1.26h6.624q.648 0 .9-.432.288-.468-.036-1.008l-9.36-17.136v-.036l14.724-26.028q.288-.576 0-1.008zm8.172 5.328v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","YOUTUBE_PLAY":"M46.08-32.183q0-1.332-1.08-1.944l-18.432-11.52q-1.116-.72-2.34-.072-1.188.648-1.188 2.016v23.04q0 1.368 1.188 2.016.576.288 1.116.288.72 0 1.224-.36l18.432-11.52q1.08-.612 1.08-1.944zm18.432 0q0 3.456-.036 5.4t-.306 4.914-.81 5.31q-.576 2.628-2.484 4.428t-4.464 2.088q-7.992.9-24.156.9t-24.156-.9q-2.556-.288-4.482-2.088t-2.502-4.428q-.504-2.34-.774-5.31t-.306-4.914-.036-5.4.036-5.4.306-4.914.81-5.31q.576-2.628 2.484-4.428t4.464-2.088q7.992-.9 24.156-.9t24.156.9q2.556.288 4.482 2.088t2.502 4.428q.504 2.34.774 5.31t.306 4.914.036 5.4z","DROPBOX":"M14.472-38.987l17.784 10.98-12.312 10.26-17.64-11.484zm35.496 19.98v3.888l-17.64 10.548v.036l-.036-.036-.036.036v-.036l-17.604-10.548v-3.888l5.292 3.456 12.312-10.224v-.072l.036.036.036-.036v.072l12.348 10.224zm-30.024-41.184l12.312 10.26-17.784 10.944-12.168-9.72zm30.096 21.204l12.168 9.756-17.604 11.484-12.348-10.26zm-5.436-21.204l17.604 11.484-12.168 9.72-17.784-10.944z","STACK_OVERFLOW":"M46.404-5.687h-40.248v-17.28h-5.76v23.04h51.768v-23.04h-5.76v17.28zm-33.912-18.864l1.188-5.652 28.188 5.94-1.188 5.616zm3.708-13.464l2.412-5.256 26.1 12.204-2.412 5.22zm7.236-12.816l3.672-4.428 22.104 18.468-3.672 4.428zm14.292-13.608l17.172 23.076-4.608 3.456-17.172-23.076zm-25.848 52.956v-5.724h28.8v5.724h-28.8z","INSTAGRAM":"M49.032-13.103v-23.328h-4.86q.72 2.268.72 4.716 0 4.536-2.304 8.37t-6.264 6.066-8.64 2.232q-7.092 0-12.132-4.878t-5.04-11.79q0-2.448.72-4.716h-5.076v23.328q0 .936.63 1.566t1.566.63h38.484q.9 0 1.548-.63t.648-1.566zm-10.224-19.188q0-4.464-3.258-7.614t-7.866-3.15q-4.572 0-7.83 3.15t-3.258 7.614 3.258 7.614 7.83 3.15q4.608 0 7.866-3.15t3.258-7.614zm10.224-12.96v-5.94q0-1.008-.72-1.746t-1.764-.738h-6.264q-1.044 0-1.764.738t-.72 1.746v5.94q0 1.044.72 1.764t1.764.72h6.264q1.044 0 1.764-.72t.72-1.764zm6.264-7.488v41.112q0 2.916-2.088 5.004t-5.004 2.088h-41.112q-2.916 0-5.004-2.088t-2.088-5.004v-41.112q0-2.916 2.088-5.004t5.004-2.088h41.112q2.916 0 5.004 2.088t2.088 5.004z","FLICKR":"M44.928-59.831q4.284 0 7.326 3.042t3.042 7.326v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56zm-19.8 27.648q0-3.168-2.232-5.4t-5.4-2.232-5.4 2.232-2.232 5.4 2.232 5.4 5.4 2.232 5.4-2.232 2.232-5.4zm20.304 0q0-3.168-2.232-5.4t-5.4-2.232-5.4 2.232-2.232 5.4 2.232 5.4 5.4 2.232 5.4-2.232 2.232-5.4z","ADN":"M27.648-42.047l7.236 11.016h-14.472zm13.14 19.08h3.384l-16.524-24.876-16.524 24.876h3.384l3.744-5.76h18.792zm14.508-9.216q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","BITBUCKET":"M29.34-33.515q.288 2.268-1.818 3.636t-4.014.216q-1.404-.612-1.926-2.088t-.018-2.952 1.872-2.088q1.296-.648 2.61-.432t2.304 1.278.99 2.43zm3.996-.756q-.504-3.852-4.068-5.904t-7.092-.468q-2.268 1.008-3.618 3.186t-1.242 4.662q.144 3.276 2.79 5.58t5.958 2.016q3.276-.288 5.472-3.024t1.8-6.048zm8.604-19.512q-.72-.972-2.016-1.602t-2.088-.792-2.556-.45q-10.476-1.692-20.376.072-1.548.252-2.376.432t-1.98.792-1.8 1.548q1.08 1.008 2.736 1.638t2.646.792 3.15.414q8.208 1.044 16.128.036 2.268-.288 3.222-.432t2.61-.774 2.7-1.674zm2.052 37.26q-.288.936-.558 2.754t-.504 3.024-1.026 2.52-2.088 2.034q-3.096 1.728-6.822 2.574t-7.272.792-7.254-.666q-1.656-.288-2.934-.648t-2.754-.972-2.628-1.566-1.872-2.214q-.9-3.456-2.052-10.512l.216-.576.648-.324q8.028 5.328 18.234 5.328t18.27-5.328q.756.216.864.828t-.18 1.62-.288 1.332zm6.516-34.596q-.936 6.012-3.996 23.58-.18 1.08-.972 2.016t-1.566 1.44-1.962 1.116q-9.072 4.536-21.96 3.168-8.928-.972-14.184-5.004-.54-.432-.918-.954t-.612-1.26-.324-1.224-.216-1.422-.198-1.26q-.324-1.8-.954-5.4t-1.008-5.814-.846-5.31-.792-5.688q.108-.936.63-1.746t1.134-1.35 1.62-1.08 1.656-.81 1.728-.666q4.5-1.656 11.268-2.304 13.644-1.332 24.336 1.8 5.58 1.656 7.74 4.392.576.72.594 1.836t-.198 1.944z","BITBUCKET_SQUARE":"M30.528-33.119q0-1.548-1.476-2.376t-2.772-.036q-1.548.72-1.53 2.61t1.566 2.538q1.404.828 2.916-.144t1.296-2.592zm2.88-.576q.288 2.376-1.296 4.356t-3.96 2.196-4.284-1.44-2.016-4.068q-.072-1.764.918-3.348t2.61-2.304q2.52-1.116 5.094.36t2.934 4.248zm6.192-14.076q-.72.756-1.926 1.224t-1.908.576-2.286.288q-5.58.72-11.664 0-1.584-.216-2.268-.342t-1.89-.576-1.962-1.17q.468-.684 1.296-1.116t1.44-.558 1.692-.306q7.128-1.26 14.688-.036 1.188.18 1.836.306t1.548.576 1.404 1.134zm1.512 26.856q0-.252.198-.954t.108-1.152-.63-.594q-5.796 3.816-13.14 3.816t-13.176-3.816l-.432.216-.18.432q.936 5.544 1.476 7.56 1.692 2.916 7.344 3.888 8.964 1.656 15.408-1.908 1.224-.684 1.764-1.854t.81-3.078.45-2.556zm4.68-24.948q.324-1.908-.288-2.7-1.548-1.98-5.58-3.168-7.776-2.268-17.532-1.296-4.752.432-8.136 1.656-1.368.54-2.142.9t-1.692 1.224-1.062 1.944q.288 2.448.684 4.968t1.044 6.156.864 4.932q.036.18.18 1.116t.252 1.296.432.972.792 1.008q3.78 2.88 10.224 3.6 9.324 1.008 15.84-2.268.864-.468 1.422-.828t1.116-1.044.702-1.44q1.728-9.612 2.88-17.028zm9.504-3.6v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","TUMBLR":"M33.984-16.595l2.88 8.532q-.828 1.26-3.996 2.376t-6.372 1.152q-3.744.072-6.858-.936t-5.13-2.664-3.42-3.816-1.998-4.32-.594-4.248v-19.584h-6.048v-7.74q2.592-.936 4.644-2.502t3.276-3.24 2.088-3.672 1.224-3.564.54-3.186q.036-.18.162-.306t.27-.126h8.784v15.264h11.988v9.072h-12.024v18.648q0 1.08.234 2.016t.81 1.89 1.782 1.494 2.934.504q2.808-.072 4.824-1.044z","TUMBLR_SQUARE":"M40.896-11.843l-2.232-6.588q-1.584.792-3.708.792-1.296.036-2.232-.378t-1.386-1.134-.63-1.458-.18-1.566v-14.328h9.252v-6.984h-9.216v-11.736h-6.768q-.288 0-.324.36-.18 1.584-.63 3.132t-1.404 3.42-2.772 3.42-4.266 2.448v5.94h4.68v15.048q0 2.052.774 4.14t2.34 3.996 4.356 3.078 6.354 1.098q2.484-.036 4.914-.9t3.078-1.8zm14.4-37.62v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","LONG_ARROW_DOWN":"M27.54-17.675q.288.684-.18 1.26l-12.6 13.824q-.36.36-.828.36-.504 0-.864-.36l-12.78-13.824q-.468-.576-.18-1.26.324-.684 1.044-.684h8.064v-44.928q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828v44.928h8.064q.756 0 1.044.684z","LONG_ARROW_UP":"M27.54-46.691q-.324.684-1.044.684h-8.064v44.928q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-44.928h-8.064q-.756 0-1.044-.684t.18-1.26l12.6-13.824q.36-.36.828-.36.504 0 .864.36l12.78 13.824q.468.576.18 1.26z","LONG_ARROW_LEFT":"M64.512-35.639v6.912q0 .504-.324.828t-.828.324h-44.928v8.064q0 .756-.684 1.044t-1.26-.18l-13.824-12.6q-.36-.36-.36-.828 0-.504.36-.864l13.824-12.744q.576-.504 1.26-.216.684.324.684 1.044v8.064h44.928q.504 0 .828.324t.324.828z","LONG_ARROW_RIGHT":"M62.208-32.291q0 .504-.36.864l-13.824 12.744q-.576.504-1.26.216-.684-.324-.684-1.044v-8.064h-44.928q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h44.928v-8.064q0-.756.684-1.044t1.26.18l13.824 12.6q.36.36.36.828z","APPLE":"M50.148-20.699q-1.404 4.5-4.428 9-4.644 7.056-9.252 7.056-1.764 0-5.04-1.152-3.096-1.152-5.436-1.152-2.196 0-5.112 1.188-2.916 1.224-4.752 1.224-5.472 0-10.836-9.324-5.292-9.396-5.292-18.108 0-8.208 4.068-13.464 4.032-5.184 10.224-5.184 2.592 0 6.372 1.08 3.744 1.08 4.968 1.08 1.62 0 5.148-1.224 3.672-1.224 6.228-1.224 4.284 0 7.668 2.34 1.872 1.296 3.744 3.6-2.844 2.412-4.104 4.248-2.34 3.384-2.34 7.452 0 4.464 2.484 8.028t5.688 4.536zm-13.536-42.228q0 2.196-1.044 4.896-1.08 2.7-3.348 4.968-1.944 1.944-3.888 2.592-1.332.396-3.744.612.108-5.364 2.808-9.252 2.664-3.852 9-5.328l.09.396.09.396.018.36.018.36z","WINDOWS":"M24.552-28.223v23.436l-24.552-3.384v-20.052h24.552zm0-26.748v23.724h-24.552v-20.34zm35.352 26.748v28.296l-32.652-4.5v-23.796h32.652zm0-31.608v28.584h-32.652v-24.084z","ANDROID":"M17.748-47.051q.576 0 .99-.414t.414-.99-.414-.99-.99-.414-.972.414-.396.99.396.99.972.414zm15.192 0q.576 0 .972-.414t.396-.99-.396-.99-.972-.414-.99.414-.414.99.414.99.99.414zm-29.232 6.624q1.512 0 2.592 1.08t1.08 2.592v15.48q0 1.548-1.062 2.628t-2.61 1.08-2.628-1.08-1.08-2.628v-15.48q0-1.512 1.08-2.592t2.628-1.08zm38.16.684v23.976q0 1.656-1.152 2.808t-2.772 1.152h-2.7v8.172q0 1.548-1.08 2.628t-2.628 1.08-2.628-1.08-1.08-2.628v-8.172h-4.968v8.172q0 1.548-1.08 2.628t-2.628 1.08q-1.512 0-2.592-1.08t-1.08-2.628l-.036-8.172h-2.664q-1.656 0-2.808-1.152t-1.152-2.808v-23.976h33.048zm-8.352-14.58q3.852 1.98 6.156 5.526t2.304 7.758h-33.3q0-4.212 2.304-7.758t6.192-5.526l-2.556-4.716q-.252-.468.18-.72.468-.216.72.216l2.592 4.752q3.42-1.512 7.236-1.512t7.236 1.512l2.592-4.752q.252-.432.72-.216.432.252.18.72zm17.172 17.568v15.48q0 1.548-1.08 2.628t-2.628 1.08q-1.512 0-2.592-1.08t-1.08-2.628v-15.48q0-1.548 1.08-2.61t2.592-1.062q1.548 0 2.628 1.062t1.08 2.61z","LINUX":"M23.868-49.643q-.396.036-.558.378t-.306.342q-.18.036-.18-.18 0-.432.684-.54h.36zm3.132.504q-.144.036-.414-.234t-.63-.162q.864-.396 1.152.072.108.216-.108.324zm-12.636 15.372q-.144-.036-.216.108t-.162.45-.198.486-.36.468q-.252.36-.036.432.144.036.45-.252t.45-.648l.072-.252.072-.216.054-.162.018-.144v-.108l-.036-.09-.108-.072zm30.78 12.924q0-.648-1.98-1.512.144-.54.27-.99t.18-.936.108-.774.018-.81-.036-.702-.126-.792-.144-.738-.18-.9-.198-.954q-.36-1.728-1.692-3.708t-2.592-2.7q.864.72 2.052 2.988 3.132 5.832 1.944 10.008-.396 1.44-1.8 1.512-1.116.144-1.386-.666t-.288-3.006-.414-3.852q-.324-1.404-.702-2.484t-.702-1.638-.558-.882-.468-.54-.27-.252q-.504-2.232-1.116-3.708t-1.062-2.016-.846-1.188-.54-1.44q-.144-.756.216-1.926t.162-1.782-1.602-.9q-.54-.108-1.602-.648t-1.278-.576q-.288-.036-.396-.936t.288-1.836 1.296-.972q1.332-.108 1.836 1.08t.144 2.088q-.396.684-.072.954t1.08.018q.468-.144.468-1.296v-1.332q-.18-1.08-.486-1.8t-.756-1.098-.846-.54-.972-.27q-3.852.288-3.204 4.824 0 .54-.036.54-.324-.324-1.062-.378t-1.188.018-.558-.18q.036-2.052-.576-3.24t-1.62-1.224q-.972-.036-1.494.99t-.594 2.142q-.036.54.126 1.332t.468 1.35.558.486q.36-.108.576-.504.144-.324-.252-.288-.252 0-.558-.522t-.342-1.206q-.036-.792.324-1.332t1.224-.504q.612 0 .972.756t.342 1.404-.054.792q-.792.54-1.116 1.044-.288.432-.99.846t-.738.45q-.468.504-.558.972t.27.648q.504.288.9.702t.576.684.666.468 1.278.234q1.692.072 3.672-.54.072-.036.828-.252t1.242-.378 1.062-.468.756-.63q.324-.504.72-.288.18.108.234.306t-.108.432-.594.342q-.72.216-2.034.774t-1.638.702q-1.584.684-2.52.828-.9.18-2.844-.072-.36-.072-.324.072t.612.684q.9.828 2.412.792.612-.036 1.296-.252t1.296-.504 1.206-.63 1.08-.612.882-.432.63-.09.306.396q0 .072-.036.162t-.144.18-.216.162-.306.18-.324.162-.36.18-.342.162q-1.008.504-2.43 1.584t-2.394 1.548-1.764.036q-.756-.396-2.268-2.628-.792-1.116-.9-.792-.036.108-.036.36 0 .9-.54 2.034t-1.062 1.998-.756 2.088.414 2.268q-.828.216-2.25 3.24t-1.71 5.076q-.072.648-.054 2.484t-.198 2.124q-.288.864-1.044.108-1.152-1.116-1.296-3.384-.072-1.008.144-2.016.144-.684-.036-.648l-.144.18q-1.296 2.34.36 5.976.18.432.9 1.008t.864.72q.72.828 3.744 3.258t3.348 2.754q.576.54.63 1.368t-.504 1.548-1.638.828q.288.54 1.044 1.602t1.008 1.944.252 2.538q1.656-.864.252-3.312-.144-.288-.378-.576t-.342-.432-.072-.216q.108-.18.468-.342t.72.09q1.656 1.872 5.976 1.296 4.788-.54 6.372-3.132.828-1.368 1.224-1.08.432.216.36 1.872-.036.9-.828 3.312-.324.828-.216 1.35t.864.558q.108-.684.522-2.772t.486-3.24q.072-.756-.234-2.646t-.27-3.492.828-2.538q.54-.648 1.836-.648.036-1.332 1.242-1.908t2.61-.378 2.16.81zm-22.608-29.772q.108-.612-.09-1.08t-.414-.54q-.324-.072-.324.252.072.18.18.216.36 0 .252.54-.108.72.288.72.108 0 .108-.108zm15.084 7.092q-.072-.288-.234-.414t-.468-.18-.522-.198q-.18-.108-.342-.288t-.252-.288-.198-.234-.144-.144-.144.054q-.504.576.252 1.566t1.404 1.134q.324.036.522-.288t.126-.72zm-6.408-7.668q0-.396-.18-.702t-.396-.45-.324-.108q-.504.036-.252.252l.144.072q.504.144.648 1.116 0 .108.288-.072zm1.944-8.388q0-.072-.09-.18t-.324-.252-.342-.216q-.54-.54-.864-.54-.324.036-.414.27t-.036.468-.018.45q-.036.144-.216.378t-.216.324.108.306q.144.108.288 0t.396-.324.54-.324q.036-.036.324-.036t.54-.072.324-.252zm20.34 48.276q.72.432 1.116.882t.432.864-.09.81-.558.792-.846.702-1.08.666-1.134.594-1.152.558-.972.468q-1.368.684-3.078 2.016t-2.718 2.304q-.612.576-2.448.702t-3.204-.522q-.648-.324-1.062-.846t-.594-.918-.792-.702-1.692-.342q-1.584-.036-4.68-.036-.684 0-2.052.054t-2.088.09q-1.584.036-2.862.54t-1.926 1.08-1.566 1.026-1.926.414q-1.044-.036-3.996-1.116t-5.256-1.548q-.684-.144-1.836-.342t-1.8-.324-1.422-.342-1.206-.522-.612-.702q-.36-.828.252-2.394t.648-1.962q.036-.576-.144-1.44t-.36-1.53-.162-1.314.378-.972q.504-.432 2.052-.504t2.16-.432q1.08-.648 1.512-1.26t.432-1.836q.756 2.628-1.152 3.816-1.152.72-2.988.54-1.224-.108-1.548.36-.468.54.18 2.052.072.216.288.648t.306.648.162.612.036.792q0 .54-.612 1.764t-.504 1.728q.108.612 1.332.936.72.216 3.042.666t3.582.738q.864.216 2.664.792t2.97.828 1.998.144q1.548-.216 2.322-1.008t.828-1.728-.27-2.106-.684-1.872-.72-1.314q-4.356-6.84-6.084-8.712-2.448-2.664-4.068-1.44-.396.324-.54-.54-.108-.576-.072-1.368.036-1.044.36-1.872t.864-1.692.792-1.512q.288-.756.954-2.592t1.062-2.808 1.08-2.196 1.404-1.944q3.96-5.148 4.464-7.02-.432-4.032-.576-11.16-.072-3.24.864-5.454t3.816-3.762q1.404-.756 3.744-.756 1.908-.036 3.816.486t3.204 1.494q2.052 1.512 3.294 4.374t1.062 5.31q-.18 3.42 1.08 7.704 1.224 4.068 4.788 7.848 1.98 2.124 3.582 5.868t2.142 6.876q.288 1.764.18 3.042t-.432 1.998-.72.792q-.36.072-.846.684t-.972 1.278-1.458 1.206-2.196.504q-.648-.036-1.134-.18t-.81-.486-.486-.558-.414-.738-.324-.702q-.792-1.332-1.476-1.08t-1.008 1.764.252 3.492q.72 2.52.036 7.02-.36 2.34.648 3.618t2.628 1.188 3.06-1.278q2.124-1.764 3.222-2.394t3.726-1.53q1.908-.648 2.772-1.314t.666-1.242-.9-1.026-1.854-.846q-1.188-.396-1.782-1.728t-.54-2.61.558-1.71q.036 1.116.288 2.034t.522 1.458.738 1.026.756.684.774.468.594.342z","DRIBBBLE":"M36.864-10.439q-1.512-8.676-5.04-17.928h-.072l-.072.036q-.576.216-1.548.594t-3.636 1.764-4.932 2.952-4.716 4.122-3.708 5.328l-.54-.396q6.624 5.4 15.048 5.4 4.752 0 9.216-1.872zm-6.66-21.852q-.756-1.764-1.908-3.996-11.196 3.348-24.228 3.348-.036.252-.036.756 0 4.464 1.584 8.514t4.464 7.254q1.8-3.204 4.446-5.994t5.13-4.482 4.698-2.916 3.582-1.728l1.332-.468q.144-.036.468-.126t.468-.162zm-3.852-7.632q-4.32-7.668-8.784-13.608-4.968 2.34-8.424 6.696t-4.608 9.792q10.872 0 21.816-2.88zm24.624 11.484q-7.56-2.16-14.724-1.044 3.132 8.604 4.608 16.884 3.996-2.7 6.66-6.822t3.456-9.018zm-28.98-26.676l-.072.036.072-.036zm21.24 5.22q-6.66-5.904-15.588-5.904-2.736 0-5.58.684 4.716 6.12 8.856 13.752 2.484-.936 4.68-2.178t3.474-2.214 2.358-2.052 1.35-1.458zm8.028 17.46q-.108-8.352-5.364-14.76l-.036.036q-.324.432-.684.882t-1.566 1.602-2.556 2.178-3.6 2.34-4.734 2.322q.9 1.908 1.584 3.42.072.216.234.63t.27.594q1.296-.18 2.682-.252t2.646-.072 2.484.054 2.304.144 2.034.198 1.728.234 1.314.216.9.162zm4.032.252q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","SKYPE":"M42.228-26.171q0-1.8-.702-3.294t-1.746-2.466-2.628-1.764-2.97-1.224-3.15-.828l-3.744-.864q-1.08-.252-1.584-.378t-1.26-.414-1.08-.576-.594-.756-.27-1.08q0-2.772 5.184-2.772 1.548 0 2.772.432t1.944 1.026 1.368 1.206 1.44 1.044 1.728.432q1.692 0 2.718-1.152t1.026-2.772q0-1.98-2.016-3.582t-5.112-2.43-6.552-.828q-2.448 0-4.752.558t-4.302 1.692-3.204 3.132-1.206 4.626q0 2.196.684 3.834t2.016 2.718 2.88 1.746 3.708 1.17l5.256 1.296q3.24.792 4.032 1.296 1.152.72 1.152 2.16 0 1.404-1.44 2.322t-3.78.918q-1.836 0-3.294-.576t-2.34-1.386-1.638-1.62-1.656-1.386-1.944-.576q-1.8 0-2.718 1.08t-.918 2.7q0 3.312 4.392 5.67t10.476 2.358q2.628 0 5.04-.666t4.41-1.926 3.186-3.366 1.188-4.734zm13.068 7.812q0 5.724-4.05 9.774t-9.774 4.05q-4.68 0-8.424-2.88-2.772.576-5.4.576-5.148 0-9.846-1.998t-8.1-5.4-5.4-8.1-1.998-9.846q0-2.628.576-5.4-2.88-3.744-2.88-8.424 0-5.724 4.05-9.774t9.774-4.05q4.68 0 8.424 2.88 2.772-.576 5.4-.576 5.148 0 9.846 1.998t8.1 5.4 5.4 8.1 1.998 9.846q0 2.628-.576 5.4 2.88 3.744 2.88 8.424z","FOURSQUARE":"M36-48.815l1.332-6.984q.18-.828-.324-1.44t-1.26-.612h-25.632q-.828 0-1.386.612t-.558 1.332v39.636q0 .252.216.036l10.476-12.672q.828-.936 1.368-1.206t1.728-.27h8.604q.792 0 1.332-.522t.648-1.062q.864-4.68 1.332-6.876.144-.756-.414-1.44t-1.314-.684h-10.584q-1.044 0-1.728-.684t-.684-1.728v-1.512q0-1.044.684-1.71t1.728-.666h12.456q.648 0 1.26-.486t.72-1.062zm8.172-7.992q-.54 2.628-1.926 9.594t-2.502 12.6-1.26 6.246q-.216.792-.324 1.17t-.504 1.17-.882 1.188-1.386.756-2.088.36h-9.756q-.468 0-.792.36-.288.324-15.336 17.784-.792.9-2.106 1.026t-1.746-.198q-1.98-.792-1.98-3.528v-50.76q0-1.98 1.368-3.69t4.32-1.71h31.968q3.42 0 4.572 1.908t.36 5.724zm0 0l-5.688 28.44q.144-.612 1.26-6.246t2.502-12.6 1.926-9.594z","TRELLO":"M25.344-16.055v-36.864q0-.504-.324-.828t-.828-.324h-17.28q-.504 0-.828.324t-.324.828v36.864q0 .504.324.828t.828.324h17.28q.504 0 .828-.324t.324-.828zm24.192-13.824v-23.04q0-.504-.324-.828t-.828-.324h-17.28q-.504 0-.828.324t-.324.828v23.04q0 .504.324.828t.828.324h17.28q.504 0 .828-.324t.324-.828zm5.76-27.648v50.688q0 .936-.684 1.62t-1.62.684h-50.688q-.936 0-1.62-.684t-.684-1.62v-50.688q0-.936.684-1.62t1.62-.684h50.688q.936 0 1.62.684t.684 1.62z","FEMALE":"M46.08-26.423q0 1.44-1.008 2.448t-2.448 1.008q-1.836 0-2.88-1.548l-8.172-12.276h-1.62v4.752l8.892 14.796q.324.54.324 1.188 0 .936-.684 1.62t-1.62.684h-6.912v9.792q0 1.656-1.188 2.844t-2.844 1.188h-5.76q-1.656 0-2.844-1.188t-1.188-2.844v-9.792h-6.912q-.936 0-1.62-.684t-.684-1.62q0-.648.324-1.188l8.892-14.796v-4.752h-1.62l-8.172 12.276q-1.044 1.548-2.88 1.548-1.44 0-2.448-1.008t-1.008-2.448q0-1.044.576-1.908l9.216-13.824q2.628-3.852 6.336-3.852h13.824q3.708 0 6.336 3.852l9.216 13.824q.576.864.576 1.908zm-14.976-28.8q0 3.348-2.358 5.706t-5.706 2.358-5.706-2.358-2.358-5.706 2.358-5.706 5.706-2.358 5.706 2.358 2.358 5.706z","MALE":"M36.864-39.095v14.976q0 1.44-1.008 2.448t-2.448 1.008-2.448-1.008-1.008-2.448v-12.672h-2.304v32.832q0 1.656-1.188 2.844t-2.844 1.188-2.844-1.188-1.188-2.844v-16.704h-2.304v16.704q0 1.656-1.188 2.844t-2.844 1.188-2.844-1.188-1.188-2.844v-32.832h-2.304v12.672q0 1.44-1.008 2.448t-2.448 1.008-2.448-1.008-1.008-2.448v-14.976q0-2.88 2.016-4.896t4.896-2.016h23.04q2.88 0 4.896 2.016t2.016 4.896zm-10.368-16.128q0 3.348-2.358 5.706t-5.706 2.358-5.706-2.358-2.358-5.706 2.358-5.706 5.706-2.358 5.706 2.358 2.358 5.706z","GRATIPAY":"M27.828-17.567l12.6-17.028q.576-.792.882-2.124t-.216-3.06-2.214-2.844q-1.44-.936-2.988-.918t-2.646.63-1.962 1.62q-1.296 1.44-3.456 1.44-2.124 0-3.42-1.44-.864-1.008-1.962-1.62t-2.646-.63-3.024.918q-1.656 1.116-2.178 2.844t-.216 3.06.882 2.124zm27.468-14.616q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","SUN_O":"M52.992-32.183q0-4.212-1.638-8.046t-4.428-6.624-6.624-4.428-8.046-1.638-8.046 1.638-6.624 4.428-4.428 6.624-1.638 8.046 1.638 8.046 4.428 6.624 6.624 4.428 8.046 1.638 8.046-1.638 6.624-4.428 4.428-6.624 1.638-8.046zm9.936 9.972q-.144.54-.72.72l-10.512 3.456v11.016q0 .576-.468.936-.54.36-1.044.144l-10.512-3.384-6.48 8.928q-.36.468-.936.468t-.936-.468l-6.48-8.928-10.512 3.384q-.504.216-1.044-.144-.468-.36-.468-.936v-11.016l-10.512-3.456q-.576-.18-.72-.72-.18-.612.144-1.044l6.48-8.928-6.48-8.928q-.324-.468-.144-1.044.144-.54.72-.72l10.512-3.456v-11.016q0-.576.468-.936.54-.36 1.044-.144l10.512 3.384 6.48-8.928q.324-.432.936-.432t.936.432l6.48 8.928 10.512-3.384q.504-.216 1.044.144.468.36.468.936v11.016l10.512 3.456q.576.18.72.72.18.576-.144 1.044l-6.48 8.928 6.48 8.928q.324.432.144 1.044z","MOON_O":"M45.432-17.531q-1.944.324-3.96.324-6.552 0-12.132-3.24t-8.82-8.82-3.24-12.132q0-6.912 3.744-12.852-7.236 2.16-11.826 8.244t-4.59 13.824q0 4.68 1.836 8.946t4.914 7.344 7.344 4.914 8.946 1.836q5.184 0 9.846-2.214t7.938-6.174zm7.308-3.06q-3.384 7.308-10.206 11.682t-14.886 4.374q-5.616 0-10.728-2.196t-8.82-5.904-5.904-8.82-2.196-10.728q0-5.508 2.07-10.53t5.616-8.694 8.478-5.922 10.44-2.466q1.584-.072 2.196 1.404.648 1.476-.54 2.592-3.096 2.808-4.734 6.534t-1.638 7.866q0 5.328 2.628 9.828t7.128 7.128 9.828 2.628q4.248 0 8.208-1.836 1.476-.648 2.592.468.504.504.63 1.224t-.162 1.368z","ARCHIVE":"M39.168-34.487q0-.936-.684-1.62t-1.62-.684h-9.216q-.936 0-1.62.684t-.684 1.62.684 1.62 1.62.684h9.216q.936 0 1.62-.684t.684-1.62zm20.736-6.912v34.56q0 .936-.684 1.62t-1.62.684h-50.688q-.936 0-1.62-.684t-.684-1.62v-34.56q0-.936.684-1.62t1.62-.684h50.688q.936 0 1.62.684t.684 1.62zm2.304-16.128v9.216q0 .936-.684 1.62t-1.62.684h-55.296q-.936 0-1.62-.684t-.684-1.62v-9.216q0-.936.684-1.62t1.62-.684h55.296q.936 0 1.62.684t.684 1.62z","BUG":"M58.752-29.879q0 .936-.684 1.62t-1.62.684h-8.064q0 6.156-2.412 10.44l7.488 7.524q.684.684.684 1.62t-.684 1.62q-.648.684-1.62.684t-1.62-.684l-7.128-7.092q-.18.18-.54.468t-1.512 1.026-2.34 1.314-2.952 1.044-3.492.468v-32.256h-4.608v32.256q-1.836 0-3.654-.486t-3.132-1.188-2.376-1.404-1.566-1.17l-.54-.504-6.588 7.452q-.72.756-1.728.756-.864 0-1.548-.576-.684-.648-.738-1.602t.558-1.674l7.272-8.172q-2.088-4.104-2.088-9.864h-8.064q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684h8.064v-10.584l-6.228-6.228q-.684-.684-.684-1.62t.684-1.62 1.62-.684 1.62.684l6.228 6.228h30.384l6.228-6.228q.684-.684 1.62-.684t1.62.684.684 1.62-.684 1.62l-6.228 6.228v10.584h8.064q.936 0 1.62.684t.684 1.62zm-17.28-20.736h-23.04q0-4.788 3.366-8.154t8.154-3.366 8.154 3.366 3.366 8.154z","VK":"M69.012-45.719q.828 2.304-5.4 10.584-.864 1.152-2.34 3.06-2.808 3.6-3.24 4.716-.612 1.476.504 2.916.612.756 2.916 2.952h.036l.036.036.036.036.072.072q5.076 4.716 6.876 7.956.108.18.234.45t.252.954-.018 1.224-.9.99-2.124.45l-9.216.144q-.864.18-2.016-.18t-1.872-.792l-.72-.432q-1.08-.756-2.52-2.304t-2.466-2.79-2.196-2.088-2.034-.558q-.108.036-.288.126t-.612.522-.774 1.062-.612 1.872-.234 2.79q0 .54-.126.99t-.27.666l-.144.18q-.648.684-1.908.792h-4.14q-2.556.144-5.256-.594t-4.734-1.908-3.708-2.376-2.538-2.07l-.9-.864q-.36-.36-.99-1.08t-2.574-3.276-3.816-5.436-4.41-7.596-4.698-9.792q-.216-.576-.216-.972t.108-.576l.144-.216q.54-.684 2.052-.684l9.864-.072q.432.072.828.234t.576.306l.18.108q.576.396.864 1.152.72 1.8 1.656 3.726t1.476 2.934l.576 1.044q1.044 2.16 2.016 3.744t1.746 2.466 1.494 1.386 1.224.504.972-.18q.072-.036.18-.18t.432-.792.486-1.692.342-2.916 0-4.5q-.072-1.44-.324-2.628t-.504-1.656l-.216-.432q-.9-1.224-3.06-1.548-.468-.072.18-.864.612-.684 1.368-1.08 1.908-.936 8.604-.864 2.952.036 4.86.468.72.18 1.206.486t.738.864.378 1.152.126 1.638-.036 1.98-.09 2.538-.054 2.97q0 .396-.036 1.512t-.018 1.728.126 1.458.414 1.404.81.882q.288.072.612.144t.936-.396 1.368-1.242 1.872-2.412 2.448-3.87q2.16-3.744 3.852-8.1.144-.36.36-.63t.396-.378l.144-.108.18-.09.468-.108.72-.018 10.368-.072q1.404-.18 2.304.09t1.116.594z","WEIBO":"M24.3-18.215q.756-1.224.396-2.484t-1.62-1.8q-1.224-.504-2.628-.036t-2.16 1.656q-.792 1.224-.468 2.466t1.548 1.818 2.682.09 2.25-1.71zm3.384-4.356q.288-.468.126-.954t-.63-.666q-.504-.18-1.026.018t-.774.666q-.612 1.116.468 1.62.504.18 1.044-.018t.792-.666zm6.264 3.852q-1.62 3.672-5.688 5.4t-8.064.432q-3.852-1.224-5.31-4.554t.234-6.75q1.692-3.348 5.454-5.004t7.578-.684q3.996 1.044 5.706 4.302t.09 6.858zm11.232-5.76q-.324-3.456-3.204-6.12t-7.506-3.924-9.882-.756q-8.028.828-13.302 5.094t-4.77 9.522q.324 3.456 3.204 6.12t7.506 3.924 9.882.756q8.028-.828 13.302-5.094t4.77-9.522zm11.088.144q0 2.448-1.332 5.022t-3.924 4.932-6.066 4.23-8.136 2.988-9.738 1.116-9.9-1.206-8.658-3.348-6.174-5.436-2.34-7.182q0-4.14 2.502-8.82t7.11-9.288q6.084-6.084 12.294-8.496t8.874.252q2.34 2.304.72 7.524-.144.504-.036.72t.36.252.522-.018.486-.126l.216-.072q5.004-2.124 8.856-2.124t5.508 2.196q1.62 2.268 0 6.408-.072.468-.162.72t.162.45.432.27.612.216q2.052.648 3.708 1.692t2.88 2.934 1.224 4.194zm-2.664-22.464q1.512 1.692 1.962 3.906t-.234 4.23q-.288.828-1.062 1.224t-1.602.144q-.828-.288-1.224-1.062t-.144-1.602q.72-2.268-.864-3.996t-3.852-1.26q-.864.18-1.62-.288t-.9-1.332q-.18-.864.288-1.602t1.332-.918q2.16-.468 4.284.198t3.636 2.358zm6.516-5.868q3.132 3.456 4.05 8.01t-.486 8.694q-.324.972-1.224 1.44t-1.872.144-1.44-1.224-.18-1.872q1.008-2.952.36-6.192t-2.88-5.688q-2.232-2.484-5.328-3.438t-6.228-.306q-1.008.216-1.872-.342t-1.08-1.566.342-1.854 1.566-1.062q4.428-.936 8.784.414t7.488 4.842z","RENREN":"M40.788-7.919q-6.156 3.384-13.248 3.384-7.056 0-13.212-3.384 4.968-3.132 8.478-7.596t4.734-9.648q1.26 5.184 4.77 9.648t8.478 7.596zm-17.82-51.408v17.46q0 9.072-4.554 16.542t-11.898 11.034q-6.516-7.74-6.516-17.82 0-6.732 3.006-12.582t8.262-9.702 11.7-4.932zm32.328 27.216q0 10.08-6.516 17.82-7.344-3.564-11.898-11.034t-4.554-16.542v-17.46q6.444 1.08 11.7 4.932t8.262 9.702 3.006 12.582z","PAGELINES":"M50.472-24.731q-1.152 2.88-2.736 4.968t-3.276 3.186-3.564 1.674-3.654.522-3.474-.306-3.114-.792-2.502-.99-1.656-.81l-.612-.36q-4.068 8.208-10.422 12.942t-13.842 4.77q-.684 0-1.152-.468t-.468-1.152.468-1.134 1.152-.45q6.228-.036 11.61-3.87t9.054-10.602q-1.296.504-2.592.828t-2.988.468-3.276-.09-3.348-1.026-3.312-2.124-3.042-3.6-2.682-5.256q4.104-1.692 7.704-2.052t6.03.27 4.482 2.034 3.186 2.772 2.034 2.952q1.908-4.716 2.844-10.476-.252.036-.648.09t-1.674.09-2.502-.018-2.934-.36-3.186-.828-3.024-1.53-2.7-2.34-1.962-3.402-1.026-4.59q2.52-1.008 4.806-1.314t4.05.036 3.312 1.08 2.646 1.8 2.016 2.196 1.512 2.268.99 2.016.576 1.422l.144.576q.432-4.392.432-7.02-.288-.216-.774-.576t-1.764-1.602-2.286-2.574-1.944-3.348-1.188-4.05.432-4.572 2.52-4.986q2.628.9 4.59 2.214t3.042 2.754 1.728 3.06.738 3.204-.018 3.078-.468 2.754-.684 2.232-.612 1.512l-.252.54q.036.18.036 1.818t-.036 2.574q.108-.252.36-.666t1.098-1.548 1.818-2.088 2.556-1.998 3.294-1.602 4.032-.522 4.77.864q-.072 2.808-.774 5.094t-1.8 3.762-2.502 2.574-2.934 1.638-3.042.864-2.88.342-2.43-.036-1.674-.162l-.612-.108q-.828 5.292-2.628 10.188.216-.252.648-.666t1.782-1.476 2.79-1.89 3.582-1.512 4.23-.72 4.644.846 4.932 2.79z","STACK_EXCHANGE":"M45.324-19.331v2.376q0 3.06-2.07 5.202t-4.986 2.142h-2.052l-9.36 9.684v-9.684h-19.044q-2.916 0-4.986-2.142t-2.07-5.202v-2.376h44.568zm0-11.736v9.18h-44.568v-9.18h44.568zm0-11.808v9.18h-44.568v-9.18h44.568zm0-5.04v2.412h-44.568v-2.412q0-3.024 2.07-5.166t4.986-2.142h30.456q2.916 0 4.986 2.142t2.07 5.166z","ARROW_CIRCLE_O_RIGHT":"M41.472-32.183q0 .504-.324.828l-11.52 11.52q-.324.324-.828.324-.468 0-.81-.342t-.342-.81v-6.912h-12.672q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h12.672v-6.912q0-.504.324-.828t.828-.324q.432 0 .864.36l11.484 11.484q.324.324.324.828zm5.76 0q0-5.328-2.628-9.828t-7.128-7.128-9.828-2.628-9.828 2.628-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628 9.828-2.628 7.128-7.128 2.628-9.828zm8.064 0q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","ARROW_CIRCLE_O_LEFT":"M41.472-35.639v6.912q0 .468-.342.81t-.81.342h-12.672v6.912q0 .504-.324.828t-.828.324q-.432 0-.864-.36l-11.484-11.484q-.324-.324-.324-.828t.324-.828l11.52-11.52q.324-.324.828-.324.468 0 .81.342t.342.81v6.912h12.672q.468 0 .81.342t.342.81zm5.76 3.456q0-5.328-2.628-9.828t-7.128-7.128-9.828-2.628-9.828 2.628-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628 9.828-2.628 7.128-7.128 2.628-9.828zm8.064 0q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","TOGGLE_LEFT":"M36.864-43.703v23.04q0 .936-.684 1.62t-1.62.684q-.72 0-1.332-.432l-16.128-11.52q-.972-.684-.972-1.872t.972-1.872l16.128-11.52q.612-.432 1.332-.432.936 0 1.62.684t.684 1.62zm9.216 28.8v-34.56q0-.468-.342-.81t-.81-.342h-34.56q-.468 0-.81.342t-.342.81v34.56q0 .468.342.81t.81.342h34.56q.468 0 .81-.342t.342-.81zm9.216-34.56v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","DOT_CIRCLE_O":"M36.864-32.183q0 3.816-2.7 6.516t-6.516 2.7-6.516-2.7-2.7-6.516 2.7-6.516 6.516-2.7 6.516 2.7 2.7 6.516zm-9.216-19.584q-5.328 0-9.828 2.628t-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628 9.828-2.628 7.128-7.128 2.628-9.828-2.628-9.828-7.128-7.128-9.828-2.628zm27.648 19.584q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","WHEELCHAIR":"M36.828-21.707l3.672 7.344q-2.088 6.444-7.56 10.44t-12.204 3.996q-5.616 0-10.386-2.79t-7.56-7.56-2.79-10.386q0-6.516 3.762-11.88t9.882-7.596l.612 4.716q-4.392 1.944-7.02 5.958t-2.628 8.802q0 6.66 4.734 11.394t11.394 4.734q4.536 0 8.37-2.34t5.94-6.318 1.782-8.514zm19.728 3.6l2.088 4.104-9.216 4.608q-.468.252-1.044.252-1.44 0-2.052-1.26l-8.604-17.172h-16.992q-.864 0-1.53-.594t-.774-1.458l-3.456-28.044q-.072-.576.216-1.512.504-1.836 2.052-2.97t3.492-1.134q2.376 0 4.068 1.692t1.692 4.068q0 2.484-1.872 4.23t-4.32 1.494l1.332 10.404h15.228v4.608h-14.652l.576 4.608h16.38q1.44 0 2.052 1.26l8.208 16.38z","VIMEO_SQUARE":"M46.512-41.471q.36-7.776-5.796-7.992-8.316-.288-11.232 9.396 1.584-.684 2.952-.684 3.06 0 2.664 3.456-.144 2.052-2.664 6.012t-3.78 3.96q-1.548 0-2.952-6.084-.468-1.944-1.62-9.18-1.08-6.804-5.76-6.372-2.124.252-5.904 3.6l-2.916 2.592-2.916 2.592 1.872 2.412q2.736-1.872 3.132-1.872 2.052 0 3.852 6.444.54 1.98 1.62 5.922t1.62 5.922q2.448 6.444 5.904 6.444 5.652 0 13.788-10.584 7.92-10.188 8.136-15.984zm8.784-7.992v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","TURKISH_LIRA":"M41.472-34.487q0 6.876-3.402 12.708t-9.234 9.234-12.708 3.402h-5.76q-.504 0-.828-.324t-.324-.828v-21.996l-7.74 2.376q-.108.036-.324.036-.36 0-.684-.216-.468-.36-.468-.936v-4.608q0-.828.828-1.116l8.388-2.556v-3.348l-7.74 2.376q-.108.036-.324.036-.36 0-.684-.216-.468-.36-.468-.936v-4.608q0-.828.828-1.116l8.388-2.556v-9q0-.504.324-.828t.828-.324h5.76q.504 0 .828.324t.324.828v6.516l13.5-4.176q.54-.18 1.008.18t.468.936v4.608q0 .828-.828 1.116l-14.148 4.356v3.348l13.5-4.176q.54-.18 1.008.18t.468.936v4.608q0 .828-.828 1.116l-14.148 4.356v17.532q6.768-.468 11.448-5.436t4.68-11.808q0-.504.324-.828t.828-.324h5.76q.504 0 .828.324t.324.828z","PLUS_SQUARE_O":"M41.472-35.639v2.304q0 .504-.324.828t-.828.324h-12.672v12.672q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-12.672h-12.672q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h12.672v-12.672q0-.504.324-.828t.828-.324h2.304q.504 0 .828.324t.324.828v12.672h12.672q.504 0 .828.324t.324.828zm4.608 16.128v-29.952q0-2.376-1.692-4.068t-4.068-1.692h-29.952q-2.376 0-4.068 1.692t-1.692 4.068v29.952q0 2.376 1.692 4.068t4.068 1.692h29.952q2.376 0 4.068-1.692t1.692-4.068zm4.608-29.952v29.952q0 4.284-3.042 7.326t-7.326 3.042h-29.952q-4.284 0-7.326-3.042t-3.042-7.326v-29.952q0-4.284 3.042-7.326t7.326-3.042h29.952q4.284 0 7.326 3.042t3.042 7.326z","SPACE_SHUTTLE":"M22.32-24.119q-3.96 2.304-9.648 2.304h-4.608v-2.304h-2.304q-.468 0-.81-.846t-.342-2.034q0-.864.252-1.764-2.088-.072-3.474-.378t-1.386-.738 1.386-.738 3.474-.378q-.252-.9-.252-1.764 0-1.188.342-2.034t.81-.846h2.304v-2.304h4.608q5.688 0 9.648 2.304h40.068q1.512.252 3.834.648t2.898.504q3.204.54 5.4 1.458t3.006 1.71.81 1.44-.81 1.44-3.006 1.71-5.4 1.458q-.576.108-2.898.504t-3.834.648h-40.068zm40.284-9.072q1.908 1.296 1.908 3.312t-1.908 3.312l2.916 1.08q2.448-1.728 2.448-4.392t-2.448-4.392zm-40.104 9.648h36.54q-7.812 1.368-16.416 2.88-2.052 0-4.068.864t-2.988 1.728l-1.008.864-10.368 10.368q-.936.936-2.538 1.62t-3.222.684h-3.456l-3.348-16.704h1.044q5.652 0 9.828-2.304zm-9.828-14.976h-1.044l3.348-16.704h3.456q1.656 0 3.24.684t2.52 1.62l10.368 10.368q.144.144.396.378t1.098.828 1.746 1.044 2.214.828 2.61.378l16.416 2.88h-36.54q-4.176-2.304-9.828-2.304z","SLACK":"M54.684-36.503q2.232 0 3.726 1.458t1.494 3.654q0 3.492-3.348 4.68l-6.192 2.124 2.016 6.012q.252.756.252 1.692 0 2.124-1.512 3.672t-3.636 1.548q-1.692 0-3.078-.972t-1.926-2.592l-1.98-5.94-11.16 3.816 1.98 5.904q.288.864.288 1.692 0 2.124-1.512 3.672t-3.672 1.548q-1.692 0-3.06-.972t-1.908-2.592l-1.98-5.868-5.508 1.908q-1.044.324-1.8.324-2.196 0-3.654-1.44t-1.458-3.636q0-1.692.99-3.06t2.574-1.908l5.616-1.908-3.78-11.268-5.616 1.944q-.936.288-1.728.288-2.16 0-3.636-1.458t-1.476-3.618q0-1.692.99-3.06t2.574-1.908l5.652-1.908-1.908-5.724q-.288-.864-.288-1.692 0-2.16 1.512-3.69t3.672-1.53q1.692 0 3.06.972t1.908 2.592l1.944 5.76 11.16-3.78-1.944-5.76q-.288-.864-.288-1.692 0-2.124 1.53-3.672t3.654-1.548q1.692 0 3.078.99t1.926 2.574l1.908 5.796 5.832-1.98q.756-.216 1.548-.216 2.16 0 3.69 1.422t1.53 3.546q0 1.62-1.08 2.934t-2.664 1.854l-5.652 1.944 3.78 11.376 5.904-2.016q.864-.288 1.656-.288zm-28.584 9.432l11.16-3.78-3.78-11.34-11.16 3.852z","ENVELOPE_SQUARE":"M44.928-59.831q4.284 0 7.326 3.042t3.042 7.326v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56zm1.152 38.016v-15.696q-1.116 1.26-2.304 1.98-1.224.792-4.77 3.06t-5.454 3.564q-3.528 2.484-5.904 2.484t-5.904-2.484q-1.656-1.152-5.094-3.33t-5.13-3.33q-.432-.288-1.188-.972t-1.116-.972v15.696q0 1.44 1.008 2.448t2.448 1.008h29.952q1.44 0 2.448-1.008t1.008-2.448zm0-20.628q0-1.476-.99-2.52t-2.466-1.044h-29.952q-1.44 0-2.448 1.008t-1.008 2.448q0 1.332 1.098 2.754t2.43 2.322q1.692 1.152 4.95 3.204t4.662 2.988l.612.414.756.504.756.468.846.468.774.342.81.27.738.09.738-.09.81-.27.774-.342.846-.468.756-.468.756-.504.612-.414 9.612-6.264q1.26-.828 2.394-2.25t1.134-2.646z","WORDPRESS":"M4.572-32.183q0-5.868 2.412-11.268l13.212 36.18q-7.056-3.42-11.34-10.116t-4.284-14.796zm46.368-1.404q0 .684-.09 1.386t-.36 1.782-.414 1.584-.63 2.124-.63 2.088l-2.736 9.216-10.008-29.736q1.656-.108 3.168-.288.684-.072.936-.666t-.09-1.116-1.026-.486l-7.38.36q-2.7-.036-7.272-.36-.432-.036-.738.18t-.414.54-.054.666.324.594.702.288l2.88.288 4.32 11.808-6.048 18.144-10.08-29.952q1.656-.108 3.168-.288.684-.072.936-.666t-.09-1.116-1.026-.486l-7.38.36-.828-.018-.936-.018q3.78-5.76 9.882-9.126t13.23-3.366q5.292 0 10.098 1.908t8.586 5.364h-.36q-1.98 0-3.312 1.458t-1.332 3.438q0 .432.072.864t.144.774.288.828.324.756.432.81.45.756.522.864.504.828q2.268 3.852 2.268 7.632zm-18.216 3.816l8.532 23.292q.036.216.18.396-4.536 1.584-9.18 1.584-4.032 0-7.812-1.152zm23.796-15.696q3.42 6.264 3.42 13.284 0 7.524-3.744 13.878t-10.044 10.026l8.46-24.408q2.124-6.084 2.124-9.936 0-1.512-.216-2.844zm-24.264-18.972q6.552 0 12.528 2.556t10.296 6.876 6.876 10.296 2.556 12.528-2.556 12.528-6.876 10.296-10.296 6.876-12.528 2.556-12.528-2.556-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556zm0 63.036q6.228 0 11.934-2.448t9.828-6.57 6.57-9.828 2.448-11.934-2.448-11.934-6.57-9.828-9.828-6.57-11.934-2.448-11.934 2.448-9.828 6.57-6.57 9.828-2.448 11.934 2.448 11.934 6.57 9.828 9.828 6.57 11.934 2.448z","OPENID":"M39.096-64.439v55.296l-9.792 4.608q-8.208-.72-14.904-3.672t-10.548-7.506-3.852-9.81q0-5.04 3.618-9.486t9.9-7.398 14.094-3.888v6.192q-7.812 1.368-12.834 5.4t-5.022 9.18q0 5.472 5.562 9.612t13.986 5.22v-48.96zm24.084 20.952l1.332 14.04-18.9-4.104 5.292-2.988q-4.284-2.52-10.08-3.564v-6.192q9.972 1.188 17.316 5.652z","UNIVERSITY":"M34.56-64.439l34.56 13.824v4.608h-4.608q0 .936-.738 1.62t-1.746.684h-54.936q-1.008 0-1.746-.684t-.738-1.62h-4.608v-4.608zm-25.344 23.04h9.216v27.648h4.608v-27.648h9.216v27.648h4.608v-27.648h9.216v27.648h4.608v-27.648h9.216v27.648h2.124q1.008 0 1.746.684t.738 1.62v2.304h-59.904v-2.304q0-.936.738-1.62t1.746-.684h2.124v-27.648zm57.42 34.56q1.008 0 1.746.684t.738 1.62v4.608h-69.12v-4.608q0-.936.738-1.62t1.746-.684h64.152z","MORTAR_BOARD":"M63.864-34.343l.648 11.376q.144 2.484-2.952 4.608t-8.46 3.366-11.628 1.242-11.628-1.242-8.46-3.366-2.952-4.608l.648-11.376 20.664 6.516q.792.252 1.728.252t1.728-.252zm19.08-11.664q0 .828-.792 1.116l-40.32 12.672q-.144.036-.36.036t-.36-.036l-23.472-7.416q-1.548 1.224-2.556 4.014t-1.224 6.426q2.268 1.296 2.268 3.924 0 2.484-2.088 3.852l2.088 15.588q.072.504-.288.9-.324.396-.864.396h-6.912q-.54 0-.864-.396-.36-.396-.288-.9l2.088-15.588q-2.088-1.368-2.088-3.852 0-2.628 2.34-3.996.396-7.452 3.528-11.88l-11.988-3.744q-.792-.288-.792-1.116t.792-1.116l40.32-12.672q.144-.036.36-.036t.36.036l40.32 12.672q.792.288.792 1.116z","YAHOO":"M30.924-29.987l.468 25.452q-2.232-.396-3.78-.396-1.476 0-3.78.396l.468-25.452q-1.44-2.484-6.066-10.638t-7.794-13.482-6.516-10.332q2.088.54 3.888.54 1.548 0 3.996-.54 2.268 3.996 4.806 8.262t6.012 9.954 4.986 8.172q1.332-2.196 3.942-6.39t4.23-6.84 3.78-6.336 3.852-6.822q1.944.504 3.852.504 2.016 0 4.104-.504-1.008 1.404-2.16 3.186t-1.782 2.826-2.034 3.456-1.764 3.024q-5.256 8.928-12.708 21.96z","GOOGLE":"M27.648-36.143h26.1q.432 2.412.432 4.608 0 7.812-3.276 13.95t-9.342 9.594-13.914 3.456q-5.652 0-10.764-2.178t-8.82-5.886-5.886-8.82-2.178-10.764 2.178-10.764 5.886-8.82 8.82-5.886 10.764-2.178q10.8 0 18.54 7.236l-7.524 7.236q-4.428-4.284-11.016-4.284-4.644 0-8.586 2.34t-6.246 6.354-2.304 8.766 2.304 8.766 6.246 6.354 8.586 2.34q3.132 0 5.76-.864t4.32-2.16 2.952-2.952 1.854-3.132.81-2.808h-15.696v-9.504z","REDDIT":"M39.42-22.427q.576.576 0 1.116-2.232 2.232-7.164 2.232t-7.164-2.232q-.576-.54 0-1.116.216-.216.54-.216t.54.216q1.728 1.764 6.084 1.764 4.32 0 6.084-1.764.216-.216.54-.216t.54.216zm-11.052-6.516q0 1.332-.936 2.268t-2.268.936-2.286-.936-.954-2.268q0-1.368.954-2.304t2.286-.936 2.268.954.936 2.286zm14.22 0q0 1.332-.954 2.268t-2.286.936-2.268-.936-.936-2.268.936-2.286 2.268-.954 2.286.936.954 2.304zm9.036-4.32q0-1.764-1.26-3.024t-3.06-1.26-3.096 1.296q-4.68-3.24-11.196-3.456l2.268-10.188 7.2 1.62q0 1.332.936 2.268t2.268.936 2.286-.954.954-2.286-.954-2.286-2.286-.954q-1.944 0-2.88 1.8l-7.956-1.764q-.684-.18-.9.576l-2.484 11.232q-6.48.252-11.124 3.492-1.26-1.332-3.132-1.332-1.8 0-3.06 1.26t-1.26 3.024q0 1.26.666 2.304t1.782 1.584q-.216.972-.216 2.016 0 5.112 5.04 8.748t12.132 3.636q7.128 0 12.168-3.636t5.04-8.748q0-1.152-.252-2.052 1.08-.54 1.728-1.566t.648-2.286zm12.888 1.08q0 6.552-2.556 12.528t-6.876 10.296-10.296 6.876-12.528 2.556-12.528-2.556-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556 12.528 2.556 10.296 6.876 6.876 10.296 2.556 12.528z","REDDIT_SQUARE":"M33.804-23.795q.468.468 0 .936-1.908 1.908-6.156 1.908t-6.156-1.908q-.468-.468 0-.936.18-.216.468-.216t.468.216q1.512 1.512 5.22 1.512t5.22-1.512q.18-.216.468-.216t.468.216zm-9.468-5.616q0 1.116-.828 1.944t-1.944.828-1.944-.828-.828-1.944q0-1.152.81-1.962t1.962-.81 1.962.81.81 1.962zm12.168 0q0 1.116-.828 1.944t-1.944.828-1.944-.828-.828-1.944q0-1.152.81-1.962t1.962-.81 1.962.81.81 1.962zm7.74-3.708q0-1.512-1.08-2.592t-2.628-1.08q-1.512 0-2.628 1.116-4.068-2.808-9.612-2.952l1.944-8.748 6.156 1.404q.036 1.152.846 1.944t1.926.792q1.152 0 1.962-.81t.81-1.962-.81-1.962-1.962-.81q-1.728 0-2.484 1.548l-6.804-1.512q-.612-.18-.756.468l-2.16 9.648q-5.544.216-9.54 2.988-1.08-1.152-2.664-1.152-1.548 0-2.628 1.08t-1.08 2.592q0 1.08.576 1.98t1.512 1.368q-.18.9-.18 1.728 0 4.392 4.32 7.506t10.404 3.114q6.12 0 10.44-3.114t4.32-7.506q0-.9-.216-1.764.9-.468 1.458-1.35t.558-1.962zm11.052-16.344v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","STUMBLEUPON_CIRCLE":"M31.176-34.235l3.24-.972v-2.232q0-2.844-2.088-4.86t-4.968-2.016-4.968 1.998-2.088 4.842v10.188q0 .72-.504 1.206t-1.188.486-1.17-.486-.486-1.206v-4.32h-5.436v4.392q0 2.952 2.07 5.004t5.022 2.052q2.916 0 4.986-2.034t2.07-4.914v-10.08q0-.684.486-1.188t1.206-.504q.684 0 1.17.504t.486 1.188v1.944zm11.988 7.02v-4.392h-5.4v4.536q0 .72-.486 1.206t-1.206.486q-.684 0-1.17-.504t-.486-1.188v-4.428l-3.24.936-2.16-1.008v4.428q0 2.88 2.088 4.932t5.004 2.052 4.986-2.052 2.07-5.004zm12.132-4.968q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","STUMBLEUPON":"M38.232-38.807v-4.248q0-1.512-1.08-2.592t-2.592-1.08-2.592 1.08-1.08 2.592v22.032q0 6.3-4.536 10.764t-10.908 4.464q-6.408 0-10.926-4.518t-4.518-10.926v-9.576h11.808v9.432q0 1.548 1.08 2.61t2.592 1.062 2.592-1.062 1.08-2.61v-22.32q0-6.156 4.554-10.512t10.854-4.356q6.336 0 10.872 4.392t4.536 10.584v4.896l-7.02 2.088zm19.08 7.992h11.808v9.576q0 6.408-4.518 10.926t-10.926 4.518q-6.372 0-10.908-4.482t-4.536-10.818v-9.648l4.716 2.196 7.02-2.088v9.72q0 1.512 1.08 2.574t2.592 1.062 2.592-1.062 1.08-2.574v-9.9z","DELICIOUS":"M52.992-14.903v-17.28h-25.344v-25.344h-17.28q-3.348 0-5.706 2.358t-2.358 5.706v17.28h25.344v25.344h17.28q3.348 0 5.706-2.358t2.358-5.706zm2.304-34.56v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","DIGG":"M11.808-54.287h7.344v35.388h-19.152v-25.092h11.808v-10.296zm0 29.484v-13.284h-4.428v13.284h4.428zm10.296-19.188v25.092h7.38v-25.092h-7.38zm0-10.296v7.344h7.38v-7.344h-7.38zm10.332 10.296h19.188v33.912h-19.188v-5.868h11.808v-2.952h-11.808v-25.092zm11.808 19.188v-13.284h-4.428v13.284h4.428zm10.332-19.188h19.152v33.912h-19.152v-5.868h11.772v-2.952h-11.772v-25.092zm11.772 19.188v-13.284h-4.428v13.284h4.428z","PIED_PIPER":"M37.656-27.719q0 2.304-1.368 3.924t-3.276 1.62q-1.548 0-2.52-.54v-9.972q1.008-.612 2.52-.612 1.908 0 3.276 1.638t1.368 3.942zm-12.348-15.408q0 2.304-1.368 3.942t-3.276 1.638q-1.548 0-2.52-.54v-9.972q1.008-.612 2.52-.612 1.908 0 3.276 1.62t1.368 3.924zm20.232 15.516q0-4.824-3.168-8.244t-7.668-3.42q-.72 0-1.404.108-.828 2.808-2.808 4.896-3.132 3.42-7.596 3.636v22.896l7.596-1.476v-7.416q1.836.684 4.212.684 4.5 0 7.668-3.42t3.168-8.244zm-12.348-15.372q0-4.824-3.186-8.244t-7.686-3.42q-2.664 0-5.076 1.296h-6.696v30.24l7.596-1.476v-7.416q1.98.684 4.176.684 4.5 0 7.686-3.42t3.186-8.244zm22.104-6.48v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","PIED_PIPER_ALT":"M43.992-30.995q2.7-.108 5.166.738t4.248 2.106 3.636 3.402 3.024 3.888 2.718 4.338q1.188 2.016 2.826 3.924t2.718 2.898 3.564 3.186q-1.728 1.08-3.906 2.07t-4.986 2.124-4.104 1.71q-1.584-1.332-2.664-4.14t-1.566-5.922-1.188-6.498-1.53-6.066-2.61-4.428-4.41-1.746l-.36.072-.216.144q.144.18.468.504.216.18 1.008.846t.918.792.684.648.648.738.414.756.378.99.162 1.116.144 1.458l.036 1.188q.036.936-.09 2.07t-.27 1.872-.45 2.106-.414 1.908q-1.26-.036-3.636.342t-3.528.378q-1.404 0-2.592-.36-.072-.576-.072-1.692 0-2.664.108-3.456.072-.468 1.134-1.494t2.052-2.124.954-1.854q-.864-.072-1.548.864-1.296 1.908-4.014 3.582t-4.914 1.674q-.9 0-2.718-2.268t-3.834-5.022-3.024-3.474q-.216-.144-.972-1.08-17.352 4.032-18.468 4.032-.576 0-1.008-.396t-.432-.972q0-.54.306-.954t.81-.522l17.496-3.816q-.288-.504-.288-.9t.198-.63.576-.414.72-.252.828-.162.666-.162q.144-.036.558-.27t.63-.234q.54 0 1.008.576t.72 1.188q5.868-1.332 6.192-1.332.612 0 1.062.396t.45 1.008q0 .54-.306.936t-.846.504l-6.552 1.44-.036.576q-.036.936 2.934 4.23t3.762 3.294q1.692 0 4.284-2.88t2.592-4.644q0-1.296-.846-1.908t-1.836-.666-1.836-.414-.846-1.224q0-.576.36-1.224l-2.448-.684q1.548-1.584 1.548-4.212 0-.936-.18-2.088 2.952-.576 5.184-.576 1.584 0 2.574.054t1.746.306 1.116.486.738.882.558 1.206.612 1.71.864 2.16l1.8-.9q-.108 1.44-.828 2.16t-1.53.756-1.44.234-.594.738zm2.16-8.46q-.18-.18-.486-.558t-.432-.522-.378-.414-.36-.378l-.288-.288-.306-.27-.288-.18-.306-.162q-.252-.108-.522-.18t-.738-.09-.792-.018h-2.52q-4.536 0-7.812 1.548.576-1.08 1.296-1.674t1.944-1.062 2.358-1.296 1.656-1.314 1.8-1.98 1.566-1.818q.432.324 1.008 1.134t1.152 1.314 1.368.468l.432-.036v2.736l.792.036q8.892-3.42 13.356-6.84 1.008-.756 1.8-1.404t1.53-1.35 1.188-1.116 1.062-1.224.864-1.116.882-1.332.828-1.368.972-1.71 1.062-1.908l.252-.324q-.072 1.908-1.548 5.004-2.844 5.94-7.38 9.504t-11.016 5.112q-.504.108-1.512.27t-1.8.342-1.404.504q.108.684.882 1.656t.774 1.224q0 .396-.936 1.08zm-7.956 33.156q1.404-.936 4.734-1.71t5.274-.774q.324 0 .81.558t1.008 1.53.936 1.8.864 1.836.522 1.188q-4.356 1.62-8.784 1.62-2.196 0-4.5-.396zm-8.604-23.292l1.728-.432 3.924 6.372-2.628 1.728zm18.036 18.612l.108.576q0 .252-.63.522t-1.656.468-1.944.342-1.926.27-1.152.162l-.252-1.548q.756-.072 2.178-.306t2.592-.36 2.178-.126h.504zm-16.452-22.608l-3.456.72-.216-.612q.36-.036 1.17-.252t1.242-.216q.684 0 1.26.36zm7.02 22.824h1.116l.36 2.988-1.476.432v-3.42zm32.004-53.64v0zm0 0l-.036.18-.072.072.036-.108zm0 0l.036-.036z","DRUPAL":"M42.012-7.343q-.18-.684-.864-.18-1.08.792-3.132 1.404t-4.716.612q-4.644 0-6.948-1.764-.18-.144-.468-.144-.396 0-.936.432-.252.216-.27.576t.27.72q1.224 1.152 3.15 1.656t3.69.45 3.564-.162q1.476-.144 3.042-.738t2.34-1.08 1.026-.738q.432-.432.252-1.044zm-1.404-4.14q-.684-1.692-1.404-2.196-.828-.54-2.736-.54-1.692 0-2.556.36-1.044.432-2.808 2.016-.936.864-.432 1.584.324.288.63.162t1.134-.846q.108-.072.378-.306t.378-.306.36-.252.414-.252.45-.18.54-.162.594-.09.738-.036q.972 0 1.602.27t.828.522.486.792q.36.612.45.72t.45-.036q.828-.432.504-1.224zm12.78-10.116q0-.792-.18-1.602t-.594-1.62-1.224-1.314-1.89-.504q-1.188 0-3.492 1.494t-4.644 3.006-3.636 1.512q-.972.036-2.286-.684t-2.736-1.764-3.006-2.088-3.6-1.764-3.996-.684q-4.14.036-7.092 2.826t-3.024 6.426q-.072 4.032 2.664 5.904 1.044.72 2.25 1.026t3.726.306q2.052 0 4.752-1.17t4.824-2.556 4.32-2.538 3.348-1.116q.936.036 2.34 1.134t2.574 2.412 2.448 2.43 1.998 1.152q1.26.108 2.106-.504t1.998-2.268q1.008-1.476 1.53-3.636t.522-3.816zm1.908-5.76q0 5.904-2.232 10.962t-5.976 8.496-8.73 5.382-10.458 1.944-10.548-2.07-8.91-5.652-6.138-8.694-2.304-10.872q0-3.204.702-6.21t1.764-5.238 2.538-4.266 2.826-3.384 2.826-2.502 2.322-1.674 1.53-.882q.504-.288 1.836-.954t1.962-1.026 1.728-1.08 2.178-1.584q1.296-1.008 2.088-2.61t1.08-4.518q4.644 5.58 6.696 6.948 1.584 1.044 4.68 2.448t4.644 2.376q.756.468 1.404.9t2.178 1.674 2.736 2.538 2.7 3.42 2.484 4.392 1.692 5.346.702 6.39z","JOOMLA":"M38.52-25.811l-5.76 5.76-5.436 5.472-1.08 1.08q-2.34 2.304-5.454 3.132t-6.174.072q-.576 2.52-2.592 4.14t-4.644 1.62q-3.06 0-5.22-2.178t-2.16-5.238q0-2.592 1.602-4.608t4.086-2.592q-.792-3.096.036-6.228t3.168-5.472l.432-.432 5.436 5.472-.396.396q-1.332 1.332-1.332 3.204t1.332 3.24q1.332 1.332 3.204 1.332t3.204-1.332l1.08-1.08 5.436-5.472 5.796-5.76zm-12.276-24.552l.432.432-5.472 5.472-.432-.432q-1.332-1.332-3.204-1.332t-3.204 1.332-1.332 3.222 1.332 3.222l1.044 1.044 5.472 5.472 5.76 5.76-5.436 5.472-5.796-5.76-5.436-5.472-1.08-1.08q-2.448-2.412-3.24-5.742t.18-6.462q-2.52-.54-4.14-2.556t-1.62-4.644q0-3.06 2.16-5.238t5.22-2.178q2.736 0 4.806 1.764t2.502 4.428q3.024-.72 6.102.126t5.382 3.15zm29.052 38.412q0 3.06-2.16 5.238t-5.22 2.178q-2.664 0-4.716-1.692t-2.556-4.248q-3.096 1.008-6.462.216t-5.814-3.24l-.396-.432 5.436-5.472.432.432q1.332 1.332 3.204 1.332t3.204-1.332 1.332-3.204-1.332-3.204l-1.08-1.08-5.472-5.472-5.76-5.76 5.472-5.472 5.76 5.76 5.472 5.472 1.044 1.08q2.304 2.304 3.15 5.418t.09 6.174q2.736.396 4.554 2.466t1.818 4.842zm-.072-40.464q0 2.772-1.836 4.86t-4.572 2.484q.936 3.06.108 6.354t-3.24 5.706l-.432.432-5.436-5.472.432-.432q1.332-1.332 1.332-3.204t-1.332-3.204-3.204-1.332-3.204 1.332l-1.08 1.08-5.472 5.472-5.76 5.76-5.472-5.472 5.796-5.76 5.472-5.472 1.044-1.08q2.412-2.412 5.724-3.222t6.408.126q.396-2.7 2.466-4.536t4.878-1.836q3.06 0 5.22 2.178t2.16 5.238z","LANGUAGE":"M23.544-25.631q-.036.108-.45-.018t-1.134-.414l-.72-.324q-1.584-.72-3.132-1.764-.252-.18-1.476-1.134t-1.368-1.026q-2.412 3.708-4.824 6.516-2.916 3.42-3.78 3.96-.144.072-.702.144t-.666 0q.216-.144 2.952-3.312.756-.864 3.078-4.14t2.826-4.248q.612-1.08 1.836-3.546t1.296-2.79q-.288-.036-3.96 1.188-.288.072-.99.27t-1.242.342-.612.18q-.072.072-.072.378t-.036.342q-.18.36-1.116.54-.828.252-1.692 0-.648-.144-1.008-.756-.144-.216-.18-.828.216-.072.882-.18t1.062-.216q2.088-.576 3.78-1.152 3.6-1.26 3.672-1.26.36-.072 1.548-.702t1.584-.774q.324-.108.774-.288t.522-.198.216.018q.072.432-.036 1.188 0 .072-.45.972t-.954 1.926-.612 1.206q-.9 1.8-2.772 4.716l2.304 1.008q.432.216 2.682 1.152t2.43 1.008q.144.036.378.918t.162 1.098zm-7.38-17.496q.108.54-.144 1.008-.432.828-1.8 1.368-1.08.432-2.16.432-.936-.108-1.764-.936-.504-.54-.648-1.476l.036-.108q.108.108.702.18t.954 0 2.088-.576q1.296-.432 1.98-.504.612 0 .756.612zm25.128 4.644l2.268 8.172-5.004-1.512zm-39.888 28.8l24.984-8.352v-37.152l-24.984 8.388v37.116zm44.676-11.412l3.672 1.116-6.516-23.652-3.6-1.116-7.776 19.296 3.672 1.116 1.62-3.96 7.596 2.34zm-18.108-34.632l20.628 6.624v-13.68zm11.196 47.628l5.688.468-1.944 5.76-1.44-2.376q-4.68 2.988-9.936 3.888-2.088.432-3.276.432h-3.024q-2.844 0-7.182-1.404t-6.606-3.06q-.288-.252-.288-.576 0-.288.18-.486t.468-.198q.144 0 .648.27t1.098.594.738.396q2.628 1.332 5.742 2.214t5.67.882q3.42 0 6.012-.522t5.652-1.818q.54-.252 1.098-.558t1.224-.684 1.026-.594zm16.128-38.844v38.844l-27.864-8.856q-.504.216-13.5 4.59t-13.248 4.374q-.468 0-.648-.468l-.036-.108v-38.808q.108-.324.144-.36.18-.216.72-.396 3.816-1.26 5.364-1.8v-13.824l20.088 7.128q.072 0 5.778-1.98t11.376-3.906 5.814-1.926q.72 0 .72.756v15.048z","FAX":"M10.368-50.615q2.376 0 4.068 1.692t1.692 4.068v39.168q0 2.376-1.692 4.068t-4.068 1.692h-4.608q-2.376 0-4.068-1.692t-1.692-4.068v-39.168q0-2.376 1.692-4.068t4.068-1.692h4.608zm49.536 5.868q2.088 1.224 3.348 3.348t1.26 4.608v27.648q0 3.816-2.7 6.516t-6.516 2.7h-31.104q-2.376 0-4.068-1.692t-1.692-4.068v-55.296q0-1.44 1.008-2.448t2.448-1.008h24.192q1.44 0 3.168.72t2.736 1.728l5.472 5.472q1.008 1.008 1.728 2.736t.72 3.168v5.868zm-26.496 35.604v-4.608q0-.504-.324-.828t-.828-.324h-4.608q-.504 0-.828.324t-.324.828v4.608q0 .504.324.828t.828.324h4.608q.504 0 .828-.324t.324-.828zm0-9.216v-4.608q0-.504-.324-.828t-.828-.324h-4.608q-.504 0-.828.324t-.324.828v4.608q0 .504.324.828t.828.324h4.608q.504 0 .828-.324t.324-.828zm0-9.216v-4.608q0-.504-.324-.828t-.828-.324h-4.608q-.504 0-.828.324t-.324.828v4.608q0 .504.324.828t.828.324h4.608q.504 0 .828-.324t.324-.828zm9.216 18.432v-4.608q0-.504-.324-.828t-.828-.324h-4.608q-.504 0-.828.324t-.324.828v4.608q0 .504.324.828t.828.324h4.608q.504 0 .828-.324t.324-.828zm0-9.216v-4.608q0-.504-.324-.828t-.828-.324h-4.608q-.504 0-.828.324t-.324.828v4.608q0 .504.324.828t.828.324h4.608q.504 0 .828-.324t.324-.828zm0-9.216v-4.608q0-.504-.324-.828t-.828-.324h-4.608q-.504 0-.828.324t-.324.828v4.608q0 .504.324.828t.828.324h4.608q.504 0 .828-.324t.324-.828zm9.216 18.432v-4.608q0-.504-.324-.828t-.828-.324h-4.608q-.504 0-.828.324t-.324.828v4.608q0 .504.324.828t.828.324h4.608q.504 0 .828-.324t.324-.828zm0-9.216v-4.608q0-.504-.324-.828t-.828-.324h-4.608q-.504 0-.828.324t-.324.828v4.608q0 .504.324.828t.828.324h4.608q.504 0 .828-.324t.324-.828zm0-9.216v-4.608q0-.504-.324-.828t-.828-.324h-4.608q-.504 0-.828.324t-.324.828v4.608q0 .504.324.828t.828.324h4.608q.504 0 .828-.324t.324-.828zm3.456-13.824v-9.216h-5.76q-1.44 0-2.448-1.008t-1.008-2.448v-5.76h-23.04v18.432h32.256z","BUILDING":"M48.384-64.439q.936 0 1.62.684t.684 1.62v59.904q0 .936-.684 1.62t-1.62.684h-46.08q-.936 0-1.62-.684t-.684-1.62v-59.904q0-.936.684-1.62t1.62-.684h46.08zm-29.952 10.368v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828zm0 9.216v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828zm0 9.216v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828zm0 9.216v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828zm-4.608 11.52v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm18.432 46.08v-6.912q0-.504-.324-.828t-.828-.324h-11.52q-.504 0-.828.324t-.324.828v6.912q0 .504.324.828t.828.324h11.52q.504 0 .828-.324t.324-.828zm0-18.432v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm9.216 36.864v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm0-9.216v-2.304q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v2.304q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828z","CHILD":"M42.768-44.711l-10.512 10.512v29.664q0 1.656-1.188 2.844t-2.844 1.188-2.844-1.188-1.188-2.844v-13.824h-2.304v13.824q0 1.656-1.188 2.844t-2.844 1.188-2.844-1.188-1.188-2.844v-29.664l-10.512-10.512q-1.008-1.008-1.008-2.448t1.008-2.448 2.448-1.008 2.448 1.008l8.208 8.208h13.248l8.208-8.208q1.008-1.008 2.448-1.008t2.448 1.008 1.008 2.448-1.008 2.448zm-11.664-5.904q0 3.348-2.358 5.706t-5.706 2.358-5.706-2.358-2.358-5.706 2.358-5.706 5.706-2.358 5.706 2.358 2.358 5.706z","PAW":"M28.08-47.447q0 2.16-.684 4.086t-2.268 3.33-3.78 1.404q-2.736 0-4.968-2.07t-3.312-4.878-1.08-5.436q0-2.16.684-4.086t2.268-3.33 3.78-1.404q2.772 0 4.986 2.07t3.294 4.86 1.08 5.454zm-12.312 17.388q0 2.88-1.512 5.004t-4.284 2.124q-2.736 0-5.094-1.998t-3.618-4.806-1.26-5.472q0-2.88 1.512-5.022t4.284-2.142q2.736 0 5.094 1.998t3.618 4.824 1.26 5.49zm14.184-.972q4.248 0 9.18 3.51t8.244 8.532 3.312 9.162q0 1.656-.612 2.754t-1.746 1.62-2.322.72-2.736.198q-2.448 0-6.75-1.62t-6.57-1.62q-2.376 0-6.93 1.602t-7.218 1.602q-6.588 0-6.588-5.256 0-3.096 2.016-6.894t5.022-6.93 6.75-5.256 6.948-2.124zm8.604-7.596q-2.196 0-3.78-1.404t-2.268-3.33-.684-4.086q0-2.664 1.08-5.454t3.294-4.86 4.986-2.07q2.196 0 3.78 1.404t2.268 3.33.684 4.086q0 2.628-1.08 5.436t-3.312 4.878-4.968 2.07zm15.552-3.744q2.772 0 4.284 2.142t1.512 5.022q0 2.664-1.26 5.472t-3.618 4.806-5.094 1.998q-2.772 0-4.284-2.124t-1.512-5.004q0-2.664 1.26-5.49t3.618-4.824 5.094-1.998z","SPOON":"M25.344-45.431q0 5.22-2.052 8.766t-5.472 4.878l1.62 29.556q.072.936-.576 1.62t-1.584.684h-6.912q-.936 0-1.584-.684t-.576-1.62l1.62-29.556q-3.42-1.332-5.472-4.878t-2.052-8.766q0-4.608 1.53-8.982t4.23-7.2 5.76-2.826 5.76 2.826 4.23 7.2 1.53 8.982z","CUBE":"M32.256-5.795l23.04-12.564v-22.896l-23.04 8.388v27.072zm-2.304-31.14l25.128-9.144-25.128-9.144-25.128 9.144zm29.952-9.072v27.648q0 1.26-.648 2.34t-1.764 1.692l-25.344 13.824q-1.008.576-2.196.576t-2.196-.576l-25.344-13.824q-1.116-.612-1.764-1.692t-.648-2.34v-27.648q0-1.44.828-2.628t2.196-1.692l25.344-9.216q.792-.288 1.584-.288t1.584.288l25.344 9.216q1.368.504 2.196 1.692t.828 2.628z","CUBES":"M23.04-5.687l13.824-6.912v-11.304l-13.824 5.904v12.312zm-2.304-16.344l14.544-6.228-14.544-6.228-14.544 6.228zm39.168 16.344l13.824-6.912v-11.304l-13.824 5.904v12.312zm-2.304-16.344l14.544-6.228-14.544-6.228-14.544 6.228zm-16.128-10.548l13.824-5.94v-9.576l-13.824 5.904v9.612zm-2.304-13.644l15.876-6.804-15.876-6.804-15.876 6.804zm39.168 18.648v14.976q0 1.296-.684 2.412t-1.872 1.692l-16.128 8.064q-.9.504-2.052.504t-2.052-.504l-16.128-8.064q-.18-.072-.252-.144-.072.072-.252.144l-16.128 8.064q-.9.504-2.052.504t-2.052-.504l-16.128-8.064q-1.188-.576-1.872-1.692t-.684-2.412v-14.976q0-1.368.774-2.52t2.034-1.728l15.624-6.696v-14.4q0-1.368.774-2.52t2.034-1.728l16.128-6.912q.828-.36 1.8-.36t1.8.36l16.128 6.912q1.26.576 2.034 1.728t.774 2.52v14.4l15.624 6.696q1.296.576 2.052 1.728t.756 2.52z","BEHANCE":"M66.528-52.235h-18.396v4.464h18.396v-4.464zm-9.072 15.336q-3.24 0-5.256 1.89t-2.232 5.13h14.688q-.648-7.02-7.2-7.02zm.576 21.06q2.268 0 4.392-1.152t2.736-3.132h7.956q-3.6 11.052-15.372 11.052-7.704 0-12.258-4.752t-4.554-12.492q0-7.488 4.698-12.438t12.114-4.95q4.968 0 8.658 2.448t5.508 6.444 1.818 8.928q0 .612-.072 1.692h-23.688q0 3.996 2.07 6.174t5.994 2.178zm-48.06-1.8h10.656q7.38 0 7.38-6.012 0-6.48-7.164-6.48h-10.872v12.492zm0-19.332h10.116q2.808 0 4.446-1.314t1.638-4.086q0-5.184-6.84-5.184h-9.36v10.584zm-9.972-18.324h21.384q3.132 0 5.58.504t4.554 1.71 3.24 3.474 1.134 5.544q0 6.516-6.192 9.468 4.104 1.152 6.192 4.14t2.088 7.344q0 2.7-.882 4.914t-2.376 3.726-3.546 2.556-4.356 1.512-4.824.468h-21.996v-45.36z","BEHANCE_SQUARE":"M44.928-59.831q4.284 0 7.326 3.042t3.042 7.326v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56zm-26.964 13.212h-13.356v28.332h13.752q4.212 0 7.092-2.07t2.88-6.138q0-5.688-5.148-7.2 3.852-1.872 3.852-5.904 0-2.052-.702-3.474t-2.034-2.178-2.844-1.062-3.492-.306zm-.792 11.448h-6.336v-6.624h5.868q4.284 0 4.284 3.24 0 3.384-3.816 3.384zm.324 12.06h-6.66v-7.812h6.804q4.464 0 4.464 4.068 0 3.744-4.608 3.744zm23.4 1.152q-2.448 0-3.744-1.368t-1.296-3.852h14.796q.036-.36.036-1.08 0-4.752-2.682-7.938t-7.326-3.186q-4.608 0-7.56 3.096t-2.952 7.776q0 4.86 2.844 7.812t7.668 2.952q7.38 0 9.612-6.876h-4.968q-.396 1.224-1.71 1.944t-2.718.72zm-.36-13.176q4.068 0 4.464 4.392h-9.144q.144-2.016 1.404-3.204t3.276-1.188zm-5.832-9.576h11.484v2.772h-11.484v-2.772z","STEAM":"M56.952-43.487q0 3.636-2.574 6.21t-6.21 2.574-6.21-2.574-2.574-6.21 2.574-6.21 6.21-2.574 6.21 2.574 2.574 6.21zm-27.72 26.712q0-3.744-2.628-6.372t-6.372-2.628q-.972 0-1.944.216l3.744 1.512q2.772 1.116 3.942 3.834t.054 5.454q-1.116 2.772-3.852 3.924t-5.472.036q-.756-.288-2.232-.882t-2.196-.882q1.152 2.16 3.276 3.474t4.68 1.314q3.744 0 6.372-2.628t2.628-6.372zm29.88-26.676q0-4.536-3.222-7.758t-7.758-3.222q-4.572 0-7.794 3.222t-3.222 7.758q0 4.572 3.222 7.776t7.794 3.204q4.536 0 7.758-3.204t3.222-7.776zm5.4 0q0 6.804-4.806 11.592t-11.574 4.788l-15.732 11.484q-.432 4.644-3.924 7.848t-8.244 3.204q-4.356 0-7.704-2.736t-4.248-6.912l-8.28-3.312v-15.444l14.004 5.652q2.844-1.728 6.228-1.728.468 0 1.26.072l10.224-14.652q.072-6.732 4.878-11.484t11.538-4.752q6.768 0 11.574 4.806t4.806 11.574z","STEAM_SQUARE":"M44.712-41.147q0-2.88-2.052-4.914t-4.932-2.034-4.914 2.052-2.034 4.896q0 2.88 2.034 4.914t4.914 2.034 4.932-2.034 2.052-4.914zm-21.96 21.168q0 2.988-2.088 5.058t-5.04 2.07q-2.016 0-3.708-1.044t-2.592-2.772q1.872.72 3.528 1.44 2.16.864 4.32-.054t3.06-3.114q.864-2.16-.054-4.32t-3.114-3.024l-2.952-1.188q.792-.18 1.512-.18 2.952 0 5.04 2.07t2.088 5.058zm32.544-29.484v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-5.508l6.192 2.484q.72 3.312 3.366 5.472t6.066 2.16q3.744 0 6.516-2.52t3.132-6.228l12.42-9.072q5.4 0 9.198-3.798t3.798-9.162q0-5.4-3.798-9.198t-9.198-3.798q-5.328 0-9.108 3.762t-3.852 9.09l-8.1 11.592q-.324-.036-1.008-.036-2.7 0-4.932 1.332l-10.692-4.284v-16.848q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326zm-8.892 8.388q0 3.6-2.556 6.138t-6.156 2.538-6.138-2.538-2.538-6.138 2.538-6.156 6.138-2.556q3.636 0 6.174 2.538t2.538 6.174z","RECYCLE":"M30.096-22.355l-.54 13.248-.072.792-15.12-1.044q-1.296-.108-2.412-1.134t-1.692-2.358q-.396-.972-.522-1.98t.144-2.34.432-1.98.774-2.304.684-1.908q2.808.432 18.324 1.008zm-13.932-21.096l6.48 13.644-5.292-3.312q-2.268 2.592-4.014 5.202t-2.61 4.5-1.422 3.402-.666 2.268l-.144.756-6.84-12.852q-.612-.936-.648-2.016t.216-1.692l.288-.648q1.26-2.268 4.104-6.768l-5.04-3.096zm44.316 18.612l-6.768 12.924q-.432 1.044-1.314 1.674t-1.566.738l-.648.144q-2.556.252-7.884.432l.288 5.904-8.28-13.212 7.596-13.032.252 6.228q6.12.576 10.188.18t6.12-1.188zm-28.26-33.264q-1.692 2.268-9.54 15.66l-11.412-6.732-.684-.432 8.1-12.816q.72-1.116 2.16-1.62t2.88-.36q.864.072 1.746.432t1.512.756 1.494 1.188 1.296 1.242 1.296 1.422 1.152 1.26zm23.58 11.052l7.632 13.068q.648 1.332.45 2.736t-.99 2.664q-.468.72-1.188 1.332t-1.368 1.008-1.746.792-1.692.576-1.854.504-1.656.432q-1.224-2.592-9.54-15.696l11.268-7.02zm-5.148-8.136l5.112-2.988-7.92 13.428-15.084-.72 5.436-3.096q-1.224-3.204-2.7-5.976t-2.718-4.446-2.322-2.88-1.692-1.674l-.612-.468 14.58.036q1.116-.108 2.088.378t1.404 1.026l.396.54q1.404 2.196 4.032 6.84z","CAR":"M17.28-25.271q0-2.376-1.692-4.068t-4.068-1.692-4.068 1.692-1.692 4.068 1.692 4.068 4.068 1.692 4.068-1.692 1.692-4.068zm1.296-11.52h36.576l-3.204-12.852q-.072-.288-.504-.63t-.756-.342h-27.648q-.324 0-.756.342t-.504.63zm49.392 11.52q0-2.376-1.692-4.068t-4.068-1.692-4.068 1.692-1.692 4.068 1.692 4.068 4.068 1.692 4.068-1.692 1.692-4.068zm5.76-3.456v13.824q0 .504-.324.828t-.828.324h-3.456v4.608q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896v-4.608h-36.864v4.608q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896v-4.608h-3.456q-.504 0-.828-.324t-.324-.828v-13.824q0-3.348 2.358-5.706t5.706-2.358h1.008l3.78-15.084q.828-3.384 3.744-5.67t6.444-2.286h27.648q3.528 0 6.444 2.286t3.744 5.67l3.78 15.084h1.008q3.348 0 5.706 2.358t2.358 5.706z","TAXI":"M65.664-32.183q3.348 0 5.706 2.358t2.358 5.706v13.824q0 .504-.324.828t-.828.324h-3.456v2.304q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896v-2.304h-36.864v2.304q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896v-2.304h-3.456q-.504 0-.828-.324t-.324-.828v-13.824q0-3.348 2.358-5.706t5.706-2.358h1.008l3.78-15.084q.828-3.384 3.744-5.67t6.444-2.286h4.608v-8.064q0-.504.324-.828t.828-.324h16.128q.504 0 .828.324t.324.828v8.064h4.608q3.528 0 6.444 2.286t3.744 5.67l3.78 15.084h1.008zm-54.144 17.28q2.376 0 4.068-1.692t1.692-4.068-1.692-4.068-4.068-1.692-4.068 1.692-1.692 4.068 1.692 4.068 4.068 1.692zm7.056-17.28h36.576l-3.204-12.852q-.072-.288-.504-.63t-.756-.342h-27.648q-.324 0-.756.342t-.504.63zm43.632 17.28q2.376 0 4.068-1.692t1.692-4.068-1.692-4.068-4.068-1.692-4.068 1.692-1.692 4.068 1.692 4.068 4.068 1.692z","TREE":"M54.144-11.447q0 .936-.684 1.62t-1.62.684h-16.632q.036.612.216 3.15t.18 3.906q0 .9-.648 1.53t-1.548.63h-11.52q-.9 0-1.548-.63t-.648-1.53q0-1.368.18-3.906t.216-3.15h-16.632q-.936 0-1.62-.684t-.684-1.62.684-1.62l14.472-14.508h-8.244q-.936 0-1.62-.684t-.684-1.62.684-1.62l14.472-14.508h-7.092q-.936 0-1.62-.684t-.684-1.62.684-1.62l13.824-13.824q.684-.684 1.62-.684t1.62.684l13.824 13.824q.684.684.684 1.62t-.684 1.62-1.62.684h-7.092l14.472 14.508q.684.684.684 1.62t-.684 1.62-1.62.684h-8.244l14.472 14.508q.684.684.684 1.62z","SPOTIFY":"M40.572-20.879q0-1.152-1.08-1.836-6.948-4.14-16.092-4.14-4.788 0-10.332 1.224-1.512.324-1.512 1.872 0 .72.486 1.242t1.278.522q.18 0 1.332-.288 4.752-.972 8.748-.972 8.136 0 14.292 3.708.684.396 1.188.396.684 0 1.188-.486t.504-1.242zm3.456-7.74q0-1.44-1.26-2.196-8.532-5.076-19.728-5.076-5.508 0-10.908 1.512-1.728.468-1.728 2.304 0 .9.63 1.53t1.53.63q.252 0 1.332-.288 4.392-1.188 9.036-1.188 10.044 0 17.568 4.464.864.468 1.368.468.9 0 1.53-.63t.63-1.53zm3.888-8.928q0-1.692-1.44-2.52-4.536-2.628-10.548-3.978t-12.348-1.35q-7.344 0-13.104 1.692-.828.252-1.386.918t-.558 1.746q0 1.116.738 1.872t1.854.756q.396 0 1.44-.288 4.788-1.332 11.052-1.332 5.724 0 11.142 1.224t9.126 3.42q.756.432 1.44.432 1.044 0 1.818-.738t.774-1.854zm7.38 5.364q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","DEVIANTART":"M36.864-53.531l-10.908 20.952.864 1.116h10.044v14.94h-18.252l-1.584 1.08-5.112 9.828-1.08 1.08h-10.836v-10.908l10.908-20.988-.864-1.08h-10.044v-14.94h18.252l1.584-1.08 5.112-9.828 1.08-1.08h10.836v10.908z","SOUNDCLOUD":"M28.224-15.047l.576-8.676-.576-18.828q-.036-.36-.27-.612t-.594-.252q-.324 0-.576.252t-.252.612l-.504 18.828.504 8.676q.036.36.27.594t.558.234q.792 0 .864-.828zm10.656-1.044l.396-7.596-.432-21.096q0-.576-.468-.864-.288-.18-.576-.18t-.576.18q-.468.288-.468.864l-.036.216-.36 20.844q0 .036.396 8.496v.036q0 .36.216.612.324.396.828.396.396 0 .72-.324.324-.252.324-.72zm-37.62-12.24l.72 4.608-.72 4.536q-.072.324-.324.324t-.324-.324l-.612-4.536.612-4.608q.072-.324.324-.324t.324.324zm3.096-2.844l.936 7.452-.936 7.308q-.072.324-.36.324-.324 0-.324-.36l-.828-7.272.828-7.452q0-.324.324-.324.288 0 .36.324zm10.08 16.308zm-6.768-17.676l.9 8.82-.9 8.532q0 .396-.396.396-.36 0-.432-.396l-.756-8.532.756-8.82q.072-.432.432-.432.396 0 .396.432zm3.384-.252l.828 9.072-.828 8.784q-.072.468-.504.468-.468 0-.468-.468l-.756-8.784.756-9.072q0-.468.468-.468.432 0 .504.468zm3.384.648l.756 8.424-.756 8.856q-.072.576-.576.576-.216 0-.378-.162t-.162-.414l-.72-8.856.72-8.424q0-.216.162-.378t.378-.162q.504 0 .576.54zm13.788 17.1zm-10.404-22.356l.756 13.68-.756 8.856q0 .252-.18.45t-.432.198q-.576 0-.648-.648l-.648-8.856.648-13.68q.072-.648.648-.648.252 0 .432.198t.18.45zm3.384-3.096l.684 16.848-.684 8.784q0 .288-.198.486t-.486.198q-.648 0-.72-.684l-.576-8.784.576-16.848q.072-.684.72-.684.288 0 .486.198t.198.486zm3.528-1.44l.648 18.216-.648 8.712q-.072.756-.792.756-.684 0-.756-.756l-.576-8.712.576-18.216q0-.324.234-.558t.522-.234q.324 0 .54.234t.252.558zm14.112 26.712zm-7.128-26.856l.54 18.36-.54 8.604q0 .36-.27.63t-.63.27-.612-.252-.288-.648l-.504-8.604.504-18.36q0-.396.27-.648t.63-.252.63.252.27.648zm3.564.684l.504 17.712-.504 8.496q0 .396-.288.684t-.684.288-.684-.288-.324-.684l-.432-8.496.432-17.712q.036-.432.324-.72t.684-.288.666.288.306.72zm7.632 17.712l-.504 8.316q0 .468-.324.792t-.792.324-.792-.324-.36-.792l-.216-4.104-.216-4.212.432-22.896v-.108q.072-.54.432-.864.324-.252.72-.252.288 0 .54.18.504.288.576.936zm40.032-.684q0 4.212-2.988 7.182t-7.2 2.97h-28.296q-.468-.072-.792-.396t-.324-.792v-32.364q0-.828 1.008-1.188 3.06-1.224 6.516-1.224 7.02 0 12.168 4.734t5.76 11.646q1.908-.792 3.96-.792 4.212 0 7.2 2.988t2.988 7.236z","DATABASE":"M27.648-36.791q8.532 0 15.948-1.548t11.7-4.572v6.12q0 2.484-3.708 4.608t-10.08 3.366-13.86 1.242-13.86-1.242-10.08-3.366-3.708-4.608v-6.12q4.284 3.024 11.7 4.572t15.948 1.548zm0 27.648q8.532 0 15.948-1.548t11.7-4.572v6.12q0 2.484-3.708 4.608t-10.08 3.366-13.86 1.242-13.86-1.242-10.08-3.366-3.708-4.608v-6.12q4.284 3.024 11.7 4.572t15.948 1.548zm0-13.824q8.532 0 15.948-1.548t11.7-4.572v6.12q0 2.484-3.708 4.608t-10.08 3.366-13.86 1.242-13.86-1.242-10.08-3.366-3.708-4.608v-6.12q4.284 3.024 11.7 4.572t15.948 1.548zm0-41.472q7.488 0 13.86 1.242t10.08 3.366 3.708 4.608v4.608q0 2.484-3.708 4.608t-10.08 3.366-13.86 1.242-13.86-1.242-10.08-3.366-3.708-4.608v-4.608q0-2.484 3.708-4.608t10.08-3.366 13.86-1.242z","FILE_PDF_O":"M52.848-50.759q1.008 1.008 1.728 2.736t.72 3.168v41.472q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h32.256q1.44 0 3.168.72t2.736 1.728zm-15.984-8.784v13.536h13.536q-.36-1.044-.792-1.476l-11.268-11.268q-.432-.432-1.476-.792zm13.824 55.008v-36.864h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-27.648v55.296h46.08zm-18.504-21.348q1.188.936 3.024 2.016 2.124-.252 4.212-.252 5.292 0 6.372 1.764.576.792.072 1.872l-.036.072-.072.072v.036q-.216 1.368-2.556 1.368-1.728 0-4.14-.72t-4.68-1.908q-7.956.864-14.112 2.988-5.508 9.432-8.712 9.432-.54 0-1.008-.252l-.864-.432-.216-.18q-.36-.36-.216-1.296.324-1.44 2.016-3.294t4.752-3.474q.504-.324.828.216.072.072.072.144 1.872-3.06 3.852-7.092 2.448-4.896 3.744-9.432-.864-2.952-1.098-5.742t.234-4.59q.396-1.44 1.512-1.44h.792q.828 0 1.26.54.648.756.324 2.448-.072.216-.144.288.036.108.036.288v1.08q-.072 4.428-.504 6.912 1.98 5.904 5.256 8.568zm-20.736 14.796q1.872-.864 4.932-5.688-1.836 1.44-3.15 3.024t-1.782 2.664zm14.328-33.12q-.54 1.512-.072 4.752.036-.252.252-1.584 0-.108.252-1.548.036-.144.144-.288l-.036-.072-.018-.054-.018-.054q-.036-.792-.468-1.296l-.036.072v.072zm-4.464 23.796q4.86-1.944 10.224-2.916-.072-.036-.468-.342t-.576-.486q-2.736-2.412-4.572-6.336-.972 3.096-2.988 7.092-1.08 2.016-1.62 2.988zm23.256-.576q-.864-.864-5.04-.864 2.736 1.008 4.464 1.008.504 0 .648-.036l-.072-.108z","FILE_WORD_O":"M52.848-50.759q1.008 1.008 1.728 2.736t.72 3.168v41.472q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h32.256q1.44 0 3.168.72t2.736 1.728zm-15.984-8.784v13.536h13.536q-.36-1.044-.792-1.476l-11.268-11.268q-.432-.432-1.476-.792zm13.824 55.008v-36.864h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-27.648v55.296h46.08zm-42.3-32.256v3.852h2.52l5.904 23.796h5.724l4.608-17.46q.252-.72.36-1.656.072-.576.072-.864h.144l.108.864q.036.108.126.72t.198.936l4.608 17.46h5.724l5.904-23.796h2.52v-3.852h-10.8v3.852h3.24l-3.564 15.768q-.18.72-.252 1.656l-.072.756h-.144l-.108-.756q-.036-.18-.144-.756t-.18-.9l-5.184-19.62h-4.104l-5.184 19.62q-.072.324-.162.882t-.126.774l-.144.756h-.144l-.072-.756q-.072-.936-.252-1.656l-3.564-15.768h3.24v-3.852h-10.8z","FILE_EXCEL_O":"M52.848-50.759q1.008 1.008 1.728 2.736t.72 3.168v41.472q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h32.256q1.44 0 3.168.72t2.736 1.728zm-15.984-8.784v13.536h13.536q-.36-1.044-.792-1.476l-11.268-11.268q-.432-.432-1.476-.792zm13.824 55.008v-36.864h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-27.648v55.296h46.08zm-35.244-8.424v3.816h10.116v-3.816h-2.7l3.708-5.796q.18-.252.36-.594t.27-.486.126-.144h.072q.036.144.18.36.072.144.162.27t.216.288.234.306l3.852 5.796h-2.736v3.816h10.476v-3.816h-2.448l-6.912-9.828 7.02-10.152h2.412v-3.852h-10.044v3.852h2.664l-3.708 5.724q-.144.252-.36.594t-.324.486l-.072.108h-.072q-.036-.144-.18-.36-.216-.396-.612-.828l-3.816-5.724h2.736v-3.852h-10.44v3.852h2.448l6.804 9.792-6.984 10.188h-2.448z","FILE_POWERPOINT_O":"M52.848-50.759q1.008 1.008 1.728 2.736t.72 3.168v41.472q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h32.256q1.44 0 3.168.72t2.736 1.728zm-15.984-8.784v13.536h13.536q-.36-1.044-.792-1.476l-11.268-11.268q-.432-.432-1.476-.792zm13.824 55.008v-36.864h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-27.648v55.296h46.08zm-35.712-8.424v3.816h11.772v-3.816h-3.348v-6.012h4.932q2.736 0 4.248-.54 2.412-.828 3.834-3.132t1.422-5.256q0-2.916-1.332-5.076t-3.6-3.132q-1.728-.684-4.68-.684h-13.248v3.852h3.312v19.98h-3.312zm12.708-10.08h-4.284v-9.648h4.32q1.872 0 2.988.648 2.016 1.188 2.016 4.14 0 3.204-2.232 4.32-1.116.54-2.808.54z","FILE_PICTURE_O":"M52.848-50.759q1.008 1.008 1.728 2.736t.72 3.168v41.472q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h32.256q1.44 0 3.168.72t2.736 1.728zm-15.984-8.784v13.536h13.536q-.36-1.044-.792-1.476l-11.268-11.268q-.432-.432-1.476-.792zm13.824 55.008v-36.864h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-27.648v55.296h46.08zm-4.608-16.128v11.52h-36.864v-6.912l6.912-6.912 4.608 4.608 13.824-13.824zm-29.952-6.912q-2.88 0-4.896-2.016t-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896-2.016 4.896-4.896 2.016z","FILE_ZIP_O":"M23.04-50.615v-4.608h-4.608v4.608h4.608zm4.608 4.608v-4.608h-4.608v4.608h4.608zm-4.608 4.608v-4.608h-4.608v4.608h4.608zm4.608 4.608v-4.608h-4.608v4.608h4.608zm25.2-13.968q1.008 1.008 1.728 2.736t.72 3.168v41.472q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h32.256q1.44 0 3.168.72t2.736 1.728zm-15.984-8.784v13.536h13.536q-.36-1.044-.792-1.476l-11.268-11.268q-.432-.432-1.476-.792zm13.824 55.008v-36.864h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-4.608v4.608h-4.608v-4.608h-18.432v55.296h46.08zm-22.572-25.956l3.852 12.564q.288.972.288 1.872 0 2.988-2.61 4.95t-6.606 1.962-6.606-1.962-2.61-4.95q0-.9.288-1.872.756-2.268 4.32-14.256v-4.608h4.608v4.608h2.844q.792 0 1.404.468t.828 1.224zm-5.076 16.74q1.908 0 3.258-.684t1.35-1.62-1.35-1.62-3.258-.684-3.258.684-1.35 1.62 1.35 1.62 3.258.684z","FILE_SOUND_O":"M52.848-50.759q1.008 1.008 1.728 2.736t.72 3.168v41.472q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h32.256q1.44 0 3.168.72t2.736 1.728zm-15.984-8.784v13.536h13.536q-.36-1.044-.792-1.476l-11.268-11.268q-.432-.432-1.476-.792zm13.824 55.008v-36.864h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-27.648v55.296h46.08zm-28.368-29.304q.72.288.72 1.08v19.584q0 .792-.72 1.08-.288.072-.432.072-.432 0-.828-.324l-5.976-6.012h-4.716q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h4.716l5.976-6.012q.576-.54 1.26-.252zm15.012 24.804q1.116 0 1.8-.864 4.644-5.724 4.644-13.068t-4.644-13.068q-.576-.756-1.548-.864t-1.692.504q-.756.612-.846 1.566t.522 1.71q3.6 4.428 3.6 10.152t-3.6 10.152q-.612.756-.522 1.71t.846 1.53q.648.54 1.44.54zm-7.596-5.328q.972 0 1.692-.72 3.132-3.348 3.132-7.884t-3.132-7.884q-.648-.684-1.62-.72t-1.656.612-.72 1.602.648 1.674q1.872 2.052 1.872 4.716t-1.872 4.716q-.684.72-.648 1.674t.72 1.602q.72.612 1.584.612z","FILE_VIDEO_O":"M52.848-50.759q1.008 1.008 1.728 2.736t.72 3.168v41.472q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h32.256q1.44 0 3.168.72t2.736 1.728zm-15.984-8.784v13.536h13.536q-.36-1.044-.792-1.476l-11.268-11.268q-.432-.432-1.476-.792zm13.824 55.008v-36.864h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-27.648v55.296h46.08zm-23.04-32.256q1.872 0 3.24 1.368t1.368 3.24v13.824q0 1.872-1.368 3.24t-3.24 1.368h-13.824q-1.872 0-3.24-1.368t-1.368-3.24v-13.824q0-1.872 1.368-3.24t3.24-1.368h13.824zm17.712.072q.72.288.72 1.08v20.736q0 .792-.72 1.08-.288.072-.432.072-.504 0-.828-.324l-9.54-9.576v-3.24l9.54-9.576q.324-.324.828-.324.144 0 .432.072z","FILE_CODE_O":"M52.848-50.759q1.008 1.008 1.728 2.736t.72 3.168v41.472q0 1.44-1.008 2.448t-2.448 1.008h-48.384q-1.44 0-2.448-1.008t-1.008-2.448v-57.6q0-1.44 1.008-2.448t2.448-1.008h32.256q1.44 0 3.168.72t2.736 1.728zm-15.984-8.784v13.536h13.536q-.36-1.044-.792-1.476l-11.268-11.268q-.432-.432-1.476-.792zm13.824 55.008v-36.864h-14.976q-1.44 0-2.448-1.008t-1.008-2.448v-14.976h-27.648v55.296h46.08zm-33.408-32.256q.288-.396.756-.45t.864.234l1.836 1.368q.396.288.45.756t-.234.864l-6.552 8.748 6.552 8.748q.288.396.234.864t-.45.756l-1.836 1.368q-.396.288-.864.234t-.756-.45l-8.136-10.836q-.504-.684 0-1.368zm28.872 10.836q.504.684 0 1.368l-8.136 10.836q-.288.396-.756.45t-.864-.234l-1.836-1.368q-.396-.288-.45-.756t.234-.864l6.552-8.748-6.552-8.748q-.288-.396-.234-.864t.45-.756l1.836-1.368q.396-.288.864-.234t.756.45zm-22.32 16.596q-.468-.072-.738-.468t-.198-.864l4.968-29.916q.072-.468.468-.738t.864-.198l2.268.36q.468.072.738.468t.198.864l-4.968 29.916q-.072.468-.468.738t-.864.198z","VINE":"M53.892-34.667v7.128q-3.636.828-7.128.828-2.34 4.896-5.958 9.756t-6.534 7.758-4.608 3.834q-2.88 1.62-5.832-.108-1.008-.612-2.178-1.566t-3.06-3.006-3.69-4.626-3.87-6.624-3.798-8.784-3.294-11.322-2.538-14.04h10.188q.936 7.848 2.52 14.346t3.762 11.412 4.374 8.478 5.04 7.02q6.084-6.084 10.332-14.616-5.112-2.592-8.028-7.92t-2.916-11.988q0-6.912 3.744-11.322t10.224-4.41q6.408 0 9.828 3.798t3.42 10.71q0 5.724-2.088 10.296-.252.036-.702.108t-1.656.072-2.268-.216-2.232-.918-1.818-1.854q1.116-3.708 1.116-6.624 0-3.132-1.044-4.752t-2.844-1.62q-1.908 0-3.06 1.782t-1.152 5.058q0 6.696 3.78 10.566t9.612 3.87q2.232 0 4.356-.504z","CODEPEN":"M7.776-22.355l21.708 14.472v-12.924l-12.024-8.028zm-2.232-5.184l6.948-4.644-6.948-4.644v9.288zm29.484 19.656l21.708-14.472-9.684-6.48-12.024 8.028v12.924zm-2.772-17.748l9.792-6.552-9.792-6.552-9.792 6.552zm-14.796-9.9l12.024-8.028v-12.924l-21.708 14.472zm34.56 3.348l6.948 4.644v-9.288zm-4.968-3.348l9.684-6.48-21.708-14.472v12.924zm17.46-6.48v19.656q0 1.476-1.224 2.304l-29.484 19.656q-.756.468-1.548.468t-1.548-.468l-29.484-19.656q-1.224-.828-1.224-2.304v-19.656q0-1.476 1.224-2.304l29.484-19.656q.756-.468 1.548-.468t1.548.468l29.484 19.656q1.224.828 1.224 2.304z","JSFIDDLE":"M64.8-36.647q3.996 1.656 6.462 5.238t2.466 7.974q0 5.904-4.248 10.098t-10.26 4.194l-.414-.018-.378-.018h-43.812000000000005q-6.12-.36-10.368-4.518t-4.248-10.098q0-3.96 1.98-7.308t5.292-5.292q-.432-1.404-.432-2.952 0-4.14 2.952-7.056t7.164-2.916q3.42 0 6.192 2.088 2.7-5.544 8.01-8.928t11.754-3.384q5.976 0 11.016 2.898t7.974 7.866 2.934 10.836l-.018.648-.018.648zm-47.952 9.576q0 4.392 3.024 6.948t7.488 2.556q4.932 0 8.64-3.564-.576-.72-1.71-2.034t-1.566-1.818q-2.412 2.34-5.184 2.34-1.98 0-3.366-1.206t-1.386-3.15q0-1.908 1.386-3.132t3.294-1.224q1.584 0 3.042.756t2.628 1.98 2.34 2.7 2.484 2.952 2.772 2.7 3.492 1.98 4.374.756q4.356 0 7.362-2.574t3.006-6.858q0-4.356-3.024-6.912t-7.452-2.556q-5.148 0-8.676 3.492.504.576 1.062 1.224t1.242 1.44 1.044 1.224q2.376-2.304 5.112-2.304 1.872 0 3.312 1.188t1.44 3.024q0 2.052-1.332 3.294t-3.384 1.242q-1.548 0-2.97-.756t-2.592-1.98-2.358-2.7-2.502-2.952-2.79-2.7-3.474-1.98-4.266-.756q-4.392 0-7.452 2.538t-3.06 6.822z","SUPPORT":"M32.256-64.439q6.552 0 12.528 2.556t10.296 6.876 6.876 10.296 2.556 12.528-2.556 12.528-6.876 10.296-10.296 6.876-12.528 2.556-12.528-2.556-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556zm0 4.608q-6.84 0-12.996 3.24l6.984 6.984q2.952-1.008 6.012-1.008t6.012 1.008l6.984-6.984q-6.156-3.24-12.996-3.24zm-24.408 40.644l6.984-6.984q-1.008-2.952-1.008-6.012t1.008-6.012l-6.984-6.984q-3.24 6.156-3.24 12.996t3.24 12.996zm24.408 14.652q6.84 0 12.996-3.24l-6.984-6.984q-2.952 1.008-6.012 1.008t-6.012-1.008l-6.984 6.984q6.156 3.24 12.996 3.24zm0-13.824q5.724 0 9.774-4.05t4.05-9.774-4.05-9.774-9.774-4.05-9.774 4.05-4.05 9.774 4.05 9.774 9.774 4.05zm17.424-7.812l6.984 6.984q3.24-6.156 3.24-12.996t-3.24-12.996l-6.984 6.984q1.008 2.952 1.008 6.012t-1.008 6.012z","CIRCLE_O_NOTCH":"M63.36-32.183q0 6.336-2.466 12.096t-6.624 9.918-9.918 6.624-12.096 2.466-12.096-2.466-9.918-6.624-6.624-9.918-2.466-12.096q0-7.668 3.492-14.346t9.54-10.998 13.464-5.436v8.208q-7.956 1.62-13.194 7.956t-5.238 14.616q0 4.68 1.836 8.946t4.914 7.344 7.344 4.914 8.946 1.836 8.946-1.836 7.344-4.914 4.914-7.344 1.836-8.946q0-8.28-5.238-14.616t-13.194-7.956v-8.208q7.416 1.116 13.464 5.436t9.54 10.998 3.492 14.346z","REBEL":"M.684-32.975q.288-7.812 4.176-14.616t10.98-11.448h.18l-.036.108q-.288.288-1.008 1.206t-1.872 2.754-2.16 3.978-1.602 4.878-.504 5.418 1.404 5.67 3.906 5.544q1.8 1.8 3.672 2.502t3.258.414 2.502-.846 1.692-1.17l.576-.576q1.404-1.836 1.908-4.194t.234-4.41-.756-3.852-.954-2.88l-.504-1.044q-.36-.9-1.098-1.782t-1.548-1.476-1.566-1.062-1.26-.684l-.468-.216 3.744-4.14q1.404.612 2.808 1.872t2.124 2.196l.684.972q.036-1.728-.666-3.726t-1.458-3.15l-.72-1.116 5.796-6.588 5.76 6.516q-1.188 1.656-1.89 3.69t-.81 3.258l-.144 1.188q.792-1.332 2.214-2.61t2.43-1.89l1.008-.612 3.708 4.14q-1.584.504-3.06 1.8t-2.16 2.34l-.684 1.044q-1.116 2.016-1.728 4.806t-.252 6.12 2.052 5.634q1.188 1.62 2.79 2.178t3.06.198 2.736-.954 2.07-1.206l.756-.576q2.16-1.908 3.474-4.14t1.746-4.374.36-4.374-.648-4.248-1.332-3.87-1.638-3.348-1.62-2.592-1.242-1.71l-.468-.612q-.504-.468-.252-.468l.36.108q1.44 1.044 2.25 1.656t2.232 1.8 2.304 2.088 2.106 2.34 1.998 2.772 1.638 3.168 1.368 3.708.846 4.212.378 4.896q.108 9.324-3.888 16.74t-11.232 11.556-16.416 4.14q-6.66 0-12.636-2.664t-10.206-7.128-6.624-10.548-2.178-12.708z","GE":"M31.464-5.471v2.376q-7.488-.216-13.86-3.942t-10.188-9.918l2.088-1.224q1.044 1.764 2.628 3.564l2.34-2.052q5.328 6.048 13.248 7.632l-.612 3.096q2.34.432 4.356.468zm-21.528-19.08l-2.988 1.008q.792 2.16 1.764 4.032l-2.052 1.188q-3.528-6.48-3.528-13.86t3.528-13.86l2.052 1.188q-1.08 2.016-1.764 4.032l2.952 1.008q-1.26 3.6-1.26 7.632 0 3.924 1.296 7.632zm45.072 6.372l2.088 1.224q-3.816 6.192-10.188 9.918t-13.86 3.942v-2.376q2.016-.036 4.356-.468l-.612-3.096q7.92-1.584 13.248-7.632l2.34 2.052q1.584-1.8 2.628-3.564zm-5.436-19.944l-8.388 2.88q.504 1.512.504 3.06t-.504 3.06l8.352 2.88q-1.116 3.312-3.528 6.084l-6.66-5.832q-2.052 2.412-5.292 3.06l1.728 8.676q-1.872.36-3.528.36t-3.528-.36l1.728-8.676q-3.24-.648-5.292-3.06l-6.66 5.832q-2.412-2.772-3.528-6.084l8.352-2.88q-.504-1.512-.504-3.06t.504-3.06l-8.388-2.88q1.188-3.348 3.564-6.084l6.66 5.832q2.124-2.448 5.292-3.096l-1.728-8.64q1.584-.36 3.528-.36t3.528.36l-1.728 8.64q3.168.648 5.292 3.096l6.66-5.832q2.376 2.736 3.564 6.084zm-18.108-23.148v2.376q-2.34.072-4.356.468l.612 3.096q-7.92 1.512-13.248 7.596l-2.34-2.016q-1.368 1.512-2.628 3.528l-2.052-1.188q3.816-6.192 10.152-9.918t13.86-3.942zm29.916 29.088q0 7.38-3.528 13.86l-2.052-1.188q.972-1.872 1.764-4.032l-2.988-1.008q1.296-3.708 1.296-7.632 0-4.032-1.26-7.632l2.952-1.008q-.684-2.016-1.764-4.032l2.052-1.188q3.528 6.48 3.528 13.86zm-4.32-15.228l-2.052 1.188q-1.26-2.016-2.628-3.528l-2.34 2.016q-5.328-6.084-13.248-7.596l.612-3.096q-2.016-.396-4.356-.468v-2.376q7.524.216 13.86 3.942t10.152 9.918zm5.868 15.228q0-6.228-2.43-11.916t-6.534-9.792-9.792-6.534-11.916-2.43-11.916 2.43-9.792 6.534-6.534 9.792-2.43 11.916 2.43 11.916 6.534 9.792 9.792 6.534 11.916 2.43 11.916-2.43 9.792-6.534 6.534-9.792 2.43-11.916zm1.584 0q0 6.552-2.556 12.528t-6.876 10.296-10.296 6.876-12.528 2.556-12.528-2.556-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556 12.528 2.556 10.296 6.876 6.876 10.296 2.556 12.528z","GIT_SQUARE":"M20.952-17.351q0 2.376-3.348 2.376-3.852 0-3.852-2.268 0-2.304 3.528-2.304 3.672 0 3.672 2.196zm-1.296-16.776q0 3.06-2.664 3.06-2.772 0-2.772-3.024 0-3.24 2.772-3.24 1.296 0 1.98.918t.684 2.286zm5.976-2.7v-4.5q-2.808 1.044-4.86 1.044-1.8-1.044-3.96-1.044-3.096 0-5.22 2.052t-2.124 5.148q0 1.8 1.062 3.672t2.646 2.412v.108q-1.368.612-1.368 3.06 0 1.908 1.476 2.772v.108q-4.068 1.332-4.068 5.004 0 1.62.72 2.826t1.944 1.836 2.592.918 2.916.288q8.064 0 8.064-6.768 0-2.412-1.728-3.564t-4.536-1.656q-.972-.18-1.854-.738t-.882-1.422q0-1.584 1.764-1.872 2.772-.54 4.392-2.52t1.62-4.824q0-.864-.36-1.872 1.332-.324 1.764-.468zm2.124 15.084h4.932q-.072-.972-.072-2.952v-13.932q0-1.656.072-2.484h-4.932q.108.828.108 2.556v14.112q0 1.8-.108 2.7zm18.324-.576v-4.356q-1.08.756-2.448.756-1.908 0-1.908-2.952v-8.1h1.872q.324 0 .954.036t.954.036v-4.212h-3.78q0-2.952.108-3.672h-5.04q.144.864.144 1.98v1.692h-2.16v4.212l1.332-.108.396.018.432.018v.072h-.072v7.812q0 1.332.09 2.304t.414 2.034.882 1.746 1.566 1.116 2.376.432q2.304 0 3.888-.864zm-12.816-25.416q0-1.296-.864-2.286t-2.16-.99-2.178.972-.882 2.304q0 1.296.9 2.25t2.16.954 2.142-.972.882-2.232zm22.032-1.728v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","GIT":"M21.42-9.935q0-3.6-5.94-3.6-5.688 0-5.688 3.744 0 3.636 6.192 3.636 5.436 0 5.436-3.78zm-2.124-27.18q0-2.196-1.08-3.672t-3.204-1.476q-4.464 0-4.464 5.22 0 4.86 4.464 4.86 4.284 0 4.284-4.932zm9.684-11.664v7.272q-1.296.432-2.844.792.576 1.548.576 3.024 0 4.572-2.628 7.794t-7.092 4.05q-1.44.288-2.142.972t-.702 2.088q0 1.116.81 1.854t2.088 1.152 2.826.792 3.096.918 2.826 1.35 2.088 2.304.81 3.546q0 10.944-13.068 10.944-2.484 0-4.68-.45t-4.176-1.476-3.15-2.952-1.17-4.59q0-5.94 6.552-8.1v-.144q-2.412-1.476-2.412-4.536 0-3.924 2.268-4.932v-.144q-2.592-.864-4.302-3.906t-1.71-5.958q0-5.004 3.42-8.334t8.46-3.33q3.456 0 6.408 1.692 3.528 0 7.848-1.692zm11.448 31.716h-7.992q.144-1.62.144-4.824v-21.924q0-3.384-.144-4.608h7.992q-.144 1.188-.144 4.464v22.068q0 3.204.144 4.824zm21.636-7.992v7.056q-2.556 1.404-6.264 1.404-2.232 0-3.852-.72t-2.52-1.8-1.422-2.808-.666-3.312-.144-3.708v-12.636h.072v-.144q-.252 0-.684-.036t-.648-.036q-.756 0-2.124.216v-6.84h3.456v-2.736q0-1.944-.216-3.204h8.172q-.216 1.476-.216 5.94h6.156v6.84q-.54 0-1.566-.072t-1.53-.072h-3.06v13.14q0 4.716 3.132 4.716 2.196 0 3.924-1.188zm-20.736-34.092q0 2.088-1.404 3.654t-3.456 1.566q-2.088 0-3.528-1.566t-1.44-3.654q0-2.124 1.422-3.708t3.546-1.584q2.088 0 3.474 1.602t1.386 3.69z","YC_SQUARE":"M29.124-28.295l9.576-17.964h-4.032l-5.652 11.232q-.864 1.728-1.584 3.312l-1.512-3.312-5.58-11.232h-4.32l9.468 17.748v11.664h3.636v-11.448zm26.172-21.168v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","TENCENT_WEIBO":"M30.312-43.847q0 2.88-2.052 4.914t-4.896 2.034q-2.16 0-3.996-1.26-2.232 2.412-4.14 5.256-8.892 13.356-7.272 30.924.036.792-.45 1.386t-1.242.666h-.18q-.72 0-1.26-.486t-.612-1.206q-.504-4.536-.126-8.91t1.062-7.812 1.944-6.696 2.484-5.598 2.664-4.5q2.196-3.24 4.752-5.94-.576-1.26-.576-2.772 0-2.88 2.034-4.914t4.914-2.034 4.914 2.034 2.034 4.914zm13.716.396q0 5.688-2.808 10.512t-7.65 7.632-10.53 2.808q-2.304 0-4.716-.504-.756-.18-1.17-.846t-.234-1.422q.18-.72.828-1.134t1.404-.27q1.836.468 3.888.468 3.492 0 6.696-1.368t5.508-3.672 3.672-5.508 1.368-6.696-1.368-6.696-3.672-5.508-5.508-3.672-6.696-1.368-6.696 1.368-5.508 3.672-3.672 5.508-1.368 6.696q0 4.104 1.872 7.848.36.72.126 1.44t-.918 1.08-1.422.108-1.098-.936q-2.304-4.428-2.304-9.54 0-4.284 1.674-8.172t4.482-6.696 6.696-4.464 8.136-1.656q5.688 0 10.53 2.808t7.65 7.65 2.808 10.53z","QQ":"M9.72-35.423q-.288-.684-.288-1.872 0-.72.396-1.764t.864-1.62q-.036-.792.27-1.908t.81-1.548q0-5.004 3.33-10.386t7.83-7.542q5.004-2.376 11.664-2.376 4.788 0 9.576 1.98 1.764.756 3.24 1.728t2.556 2.016 1.98 2.448 1.512 2.664 1.17 3.042.918 3.222.792 3.528l.036.18q1.98 2.988 1.98 5.4 0 .504-.324 1.44t-.324 1.368l.054.126.126.18.072.126q2.772 4.104 4.338 7.722t1.566 7.506q0 1.548-.702 3.6t-1.998 2.052q-.324 0-.702-.27t-.684-.63-.684-.936-.576-.954-.486-.936-.324-.63l-.108-.036-.18.144q-2.124 5.544-4.752 8.028.72.72 2.214 1.386t2.484 1.494 1.278 2.34q-.072.144-.144.576t-.252.648q-2.304 3.492-10.872 3.492-1.908 0-3.978-.324t-3.528-.72-3.762-1.08q-.54-.18-.828-.252-.504-.144-1.656-.162t-1.44-.054q-1.476 1.62-4.59 2.34t-6.066.72q-1.26 0-2.484-.054t-3.348-.324-3.636-.738-2.682-1.44-1.17-2.304q0-1.44.36-2.142t1.476-1.746q.396-.072 1.458-.468t1.782-.432q.144 0 .504-.072.072-.072.072-.144l-.072-.108q-1.728-.396-3.888-3.798t-2.628-5.634l-.18-.108q-.144 0-.432.72-.648 1.476-1.962 2.682t-2.79 1.35h-.036q-.144 0-.216-.162t-.18-.198q-.828-1.944-.828-3.6 0-9.9 9.072-16.776z","WEIXIN":"M20.88-47.843q0-1.476-.9-2.376t-2.376-.9q-1.548 0-2.736.918t-1.188 2.358q0 1.404 1.188 2.322t2.736.918q1.476 0 2.376-.882t.9-2.358zm26.748 18.252q0-1.008-.918-1.8t-2.358-.792q-.972 0-1.782.81t-.81 1.782q0 1.008.81 1.818t1.782.81q1.44 0 2.358-.792t.918-1.836zm-8.496-18.252q0-1.476-.882-2.376t-2.358-.9q-1.548 0-2.736.918t-1.188 2.358q0 1.404 1.188 2.322t2.736.918q1.476 0 2.358-.882t.882-2.358zm22.86 18.252q0-1.008-.936-1.8t-2.34-.792q-.972 0-1.782.81t-.81 1.782q0 1.008.81 1.818t1.782.81q1.404 0 2.34-.792t.936-1.836zm-9.576-14.292q-1.116-.144-2.52-.144-6.084 0-11.196 2.772t-8.046 7.506-2.934 10.35q0 2.808.828 5.472-1.26.108-2.448.108-.936 0-1.8-.054t-1.98-.234-1.602-.252-1.962-.378-1.8-.378l-9.108 4.572 2.592-7.848q-10.44-7.308-10.44-17.64 0-6.084 3.51-11.196t9.504-8.046 13.086-2.934q6.336 0 11.97 2.376t9.432 6.57 4.914 9.378zm21.312 20.196q0 4.212-2.466 8.046t-6.678 6.966l1.98 6.516-7.164-3.924q-5.4 1.332-7.848 1.332-6.084 0-11.196-2.538t-8.046-6.894-2.934-9.504 2.934-9.504 8.046-6.894 11.196-2.538q5.796 0 10.908 2.538t8.19 6.912 3.078 9.486z","SEND":"M63.504-64.043q1.188.864.972 2.304l-9.216 55.296q-.18 1.044-1.152 1.62-.504.288-1.116.288-.396 0-.864-.18l-16.308-6.66-8.712 10.62q-.648.828-1.764.828-.468 0-.792-.144-.684-.252-1.098-.846t-.414-1.314v-12.564l31.104-38.124-38.484 33.3-14.22-5.832q-1.332-.504-1.44-1.98-.072-1.44 1.152-2.124l59.904-34.56q.54-.324 1.152-.324.72 0 1.296.396z","SEND_O":"M63.504-64.043q1.188.864.972 2.304l-9.216 55.296q-.18 1.044-1.152 1.62-.504.288-1.116.288-.396 0-.864-.18l-18.972-7.74-10.728 11.772q-.648.756-1.692.756-.504 0-.828-.144-.684-.252-1.08-.846t-.396-1.314v-16.272l-16.992-6.948q-1.332-.504-1.44-1.98-.108-1.404 1.152-2.124l59.904-34.56q1.26-.756 2.448.072zm-12.312 53.964l7.956-47.628-51.624 29.772 12.096 4.932 31.068-23.004-17.208 28.692z","HISTORY":"M55.296-32.183q0 5.616-2.196 10.728t-5.904 8.82-8.82 5.904-10.728 2.196q-6.192 0-11.772-2.61t-9.504-7.362q-.252-.36-.234-.81t.306-.738l4.932-4.968q.36-.324.9-.324.576.072.828.432 2.628 3.42 6.444 5.292t8.1 1.872q3.744 0 7.146-1.458t5.886-3.942 3.942-5.886 1.458-7.146-1.458-7.146-3.942-5.886-5.886-3.942-7.146-1.458q-3.528 0-6.768 1.278t-5.76 3.654l4.932 4.968q1.116 1.08.504 2.484-.612 1.44-2.124 1.44h-16.128q-.936 0-1.62-.684t-.684-1.62v-16.128q0-1.512 1.44-2.124 1.404-.612 2.484.504l4.68 4.644q3.852-3.636 8.802-5.634t10.242-1.998q5.616 0 10.728 2.196t8.82 5.904 5.904 8.82 2.196 10.728zm-23.04-10.368v16.128q0 .504-.324.828t-.828.324h-11.52q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h8.064v-12.672q0-.504.324-.828t.828-.324h2.304q.504 0 .828.324t.324.828z","CIRCLE_THIN":"M27.648-55.223q-4.68 0-8.946 1.836t-7.344 4.914-4.914 7.344-1.836 8.946 1.836 8.946 4.914 7.344 7.344 4.914 8.946 1.836 8.946-1.836 7.344-4.914 4.914-7.344 1.836-8.946-1.836-8.946-4.914-7.344-7.344-4.914-8.946-1.836zm27.648 23.04q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","HEADER":"M60.552-4.535q-1.584 0-4.77-.126t-4.806-.126q-1.584 0-4.752.126t-4.752.126q-.864 0-1.332-.738t-.468-1.638q0-1.116.612-1.656t1.404-.612 1.836-.252 1.62-.54q1.188-.756 1.188-5.04l-.036-14.076q0-.756-.036-1.116-.468-.144-1.8-.144h-24.3q-1.368 0-1.836.144-.036.36-.036 1.116l-.036 13.356q0 5.112 1.332 5.904.576.36 1.728.468t2.052.126 1.62.54.72 1.638q0 .936-.45 1.728t-1.314.792q-1.692 0-5.022-.126t-4.986-.126q-1.548 0-4.608.126t-4.572.126q-.828 0-1.278-.756t-.45-1.62q0-1.08.558-1.62t1.296-.63 1.71-.27 1.512-.54q1.188-.828 1.188-5.148l-.036-2.052v-29.268q0-.108.018-.936t0-1.314-.054-1.386-.126-1.512-.234-1.314-.396-1.134-.576-.648q-.54-.36-1.62-.432t-1.908-.072-1.476-.504-.648-1.62q0-.936.432-1.728t1.296-.792q1.656 0 4.986.126t4.986.126q1.512 0 4.554-.126t4.554-.126q.9 0 1.35.792t.45 1.728q0 1.08-.612 1.566t-1.386.522-1.782.144-1.548.468q-1.26.756-1.26 5.76l.036 11.52q0 .756.036 1.152.468.108 1.404.108h25.164q.9 0 1.368-.108.036-.396.036-1.152l.036-11.52q0-5.004-1.26-5.76-.648-.396-2.106-.45t-2.376-.468-.918-1.782q0-.936.45-1.728t1.35-.792q1.584 0 4.752.126t4.752.126q1.548 0 4.644-.126t4.644-.126q.9 0 1.35.792t.45 1.728q0 1.08-.63 1.584t-1.44.522-1.854.108-1.584.45q-1.26.828-1.26 5.796l.036 33.948q0 4.284 1.224 5.04.576.36 1.656.486t1.926.162 1.494.558.648 1.602q0 .936-.432 1.728t-1.296.792z","PARAGRAPH":"M46.008-57.635v2.628q0 1.044-.666 2.196t-1.53 1.152q-1.8 0-1.944.036-.936.216-1.152 1.116-.108.396-.108 2.304v41.472q0 .9-.648 1.548t-1.548.648h-3.888q-.9 0-1.548-.648t-.648-1.548v-43.848h-5.148v43.848q0 .9-.63 1.548t-1.566.648h-3.888q-.936 0-1.566-.648t-.63-1.548v-17.856q-5.292-.432-8.82-2.124-4.536-2.088-6.912-6.444-2.304-4.212-2.304-9.324 0-5.976 3.168-10.296 3.168-4.248 7.524-5.724 3.996-1.332 15.012-1.332h17.244q.9 0 1.548.648t.648 1.548z","SLIDERS":"M12.672-13.751v4.608h-12.672v-4.608h12.672zm12.672-4.608q.936 0 1.62.684t.684 1.62v9.216q0 .936-.684 1.62t-1.62.684h-9.216q-.936 0-1.62-.684t-.684-1.62v-9.216q0-.936.684-1.62t1.62-.684h9.216zm5.76-13.824v4.608h-31.104v-4.608h31.104zm-23.04-18.432v4.608h-8.064v-4.608h8.064zm47.232 36.864v4.608h-26.496v-4.608h26.496zm-34.56-41.472q.936 0 1.62.684t.684 1.62v9.216q0 .936-.684 1.62t-1.62.684h-9.216q-.936 0-1.62-.684t-.684-1.62v-9.216q0-.936.684-1.62t1.62-.684h9.216zm23.04 18.432q.936 0 1.62.684t.684 1.62v9.216q0 .936-.684 1.62t-1.62.684h-9.216q-.936 0-1.62-.684t-.684-1.62v-9.216q0-.936.684-1.62t1.62-.684h9.216zm11.52 4.608v4.608h-8.064v-4.608h8.064zm0-18.432v4.608h-31.104v-4.608h31.104z","SHARE_ALT":"M43.776-27.575q4.788 0 8.154 3.366t3.366 8.154-3.366 8.154-8.154 3.366-8.154-3.366-3.366-8.154q0-.432.072-1.224l-12.96-6.48q-3.312 3.096-7.848 3.096-4.788 0-8.154-3.366t-3.366-8.154 3.366-8.154 8.154-3.366q4.536 0 7.848 3.096l12.96-6.48q-.072-.792-.072-1.224 0-4.788 3.366-8.154t8.154-3.366 8.154 3.366 3.366 8.154-3.366 8.154-8.154 3.366q-4.536 0-7.848-3.096l-12.96 6.48q.072.792.072 1.224t-.072 1.224l12.96 6.48q3.312-3.096 7.848-3.096z","SHARE_ALT_SQUARE":"M46.08-21.419q0-3.168-2.25-5.436t-5.418-2.268q-3.024 0-5.22 2.088l-8.676-4.32q.072-.576.072-.828t-.072-.828l8.676-4.32q2.196 2.088 5.22 2.088 3.168 0 5.418-2.268t2.25-5.436-2.25-5.418-5.418-2.25-5.436 2.25-2.268 5.418q0 .252.072.828l-8.676 4.32q-2.232-2.052-5.22-2.052-3.168 0-5.418 2.25t-2.25 5.418 2.25 5.418 5.418 2.25q2.988 0 5.22-2.052l8.676 4.32q-.072.576-.072.828 0 3.168 2.268 5.418t5.436 2.25 5.418-2.25 2.25-5.418zm9.216-28.044v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","BOMB":"M20.556-43.235q-.36-.9-1.224-1.26t-1.764 0q-3.888 1.584-6.876 4.572t-4.572 6.876q-.36.9 0 1.764t1.26 1.224q.468.18.864.18 1.512 0 2.16-1.44 1.224-3.024 3.546-5.346t5.346-3.546q.9-.396 1.26-1.26t0-1.764zm33.912-12.816l1.656 1.656-8.784 8.748 2.448 2.448q.684.684.684 1.638t-.684 1.638l-2.304 2.304q3.204 5.796 3.204 12.348 0 5.148-1.998 9.846t-5.4 8.1-8.1 5.4-9.846 1.998-9.846-1.998-8.1-5.4-5.4-8.1-1.998-9.846 1.998-9.846 5.4-8.1 8.1-5.4 9.846-1.998q6.552 0 12.348 3.204l2.304-2.304q.684-.684 1.638-.684t1.638.684l2.448 2.448zm.288-2.016q-.36.36-.792.36-.468 0-.828-.36l-3.276-3.24q-.324-.36-.324-.828t.324-.828q.36-.324.828-.324t.828.324l3.24 3.276q.36.324.36.81t-.36.81zm8.28 8.28q-.396.324-.828.324t-.828-.324l-3.24-3.276q-.36-.324-.36-.81t.36-.81q.324-.36.81-.36t.81.36l3.276 3.24q.324.36.324.828t-.324.828zm1.476-6.588q0 .504-.324.828t-.828.324h-3.456q-.504 0-.828-.324t-.324-.828.324-.828.828-.324h3.456q.504 0 .828.324t.324.828zm-6.912-6.912v3.456q0 .504-.324.828t-.828.324-.828-.324-.324-.828v-3.456q0-.504.324-.828t.828-.324.828.324.324.828zm5.436 1.98l-3.276 3.24q-.36.36-.792.36-.468 0-.828-.36-.36-.324-.36-.81t.36-.81l3.24-3.276q.36-.324.828-.324t.828.324q.324.36.324.828t-.324.828z","SOCCER_BALL_O":"M21.924-35.063l10.332-7.488 10.332 7.488-3.924 12.096h-12.78zm10.332-29.376q6.552 0 12.528 2.556t10.296 6.876 6.876 10.296 2.556 12.528-2.556 12.528-6.876 10.296-10.296 6.876-12.528 2.556-12.528-2.556-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556zm22.284 48.6q5.364-7.308 5.364-16.344v-.108l-3.672 3.204-8.64-8.064 2.268-11.628 4.824.432q-5.4-7.416-14.004-10.152l1.908 4.464-10.332 5.724-10.332-5.724 1.908-4.464q-8.604 2.736-14.004 10.152l4.86-.432 2.232 11.628-8.64 8.064-3.672-3.204v.108q0 9.036 5.364 16.344l1.08-4.752 11.736 1.44 5.004 10.728-4.176 2.484q4.212 1.404 8.64 1.404t8.64-1.404l-4.176-2.484 5.004-10.728 11.736-1.44z","TTY":"M16.128-17.207v6.912q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm-6.912-13.824v6.912q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm20.736 13.824v6.912q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm-6.912-13.824v6.912q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm-20.664-5.76q-1.008 0-1.692-.684t-.684-1.656v-4.644h18.504v4.644q0 .972-.684 1.656t-1.656.684h-13.788zm41.4 19.584v6.912q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm-6.912-13.824v6.912q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm20.736 13.824v6.912q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm-6.912-13.824v6.912q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm13.824-14.688v.468h-18.504v-.36q0-3.744-13.752-3.672-13.752.036-13.752 3.672v.36h-18.504v-.468q0-.612.306-1.548t1.224-2.304 2.358-2.718 3.978-2.736 5.76-2.43 8.064-1.71 10.566-.666 10.548.666 8.064 1.71 5.778 2.43 3.978 2.736 2.358 2.718 1.224 2.304.306 1.548zm0 14.688v6.912q0 .504-.324.828t-.828.324h-6.912q-.504 0-.828-.324t-.324-.828v-6.912q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828zm0-12.744v4.644q0 .972-.684 1.656t-1.656.684h-13.824q-.972 0-1.656-.684t-.684-1.656v-4.644h18.504z","BINOCULARS":"M25.344-52.919v27.648q0 .936-.684 1.62t-1.62.684v20.736q0 .936-.684 1.62t-1.62.684h-18.432q-.936 0-1.62-.684t-.684-1.62v-18.432l8.964-31.428q.252-.828 1.116-.828h15.264zm11.52 0v25.344h-9.216v-25.344h9.216zm27.648 32.256v18.432q0 .936-.684 1.62t-1.62.684h-18.432q-.936 0-1.62-.684t-.684-1.62v-20.736q-.936 0-1.62-.684t-.684-1.62v-27.648h15.264q.864 0 1.116.828zm-38.016-42.624v8.064h-12.672v-8.064q0-.504.324-.828t.828-.324h10.368q.504 0 .828.324t.324.828zm24.192 0v8.064h-12.672v-8.064q0-.504.324-.828t.828-.324h10.368q.504 0 .828.324t.324.828z","PLUG":"M63.18-48.131q1.332 1.332 1.332 3.24t-1.332 3.276l-14.436 14.4 5.4 5.4-5.76 5.76q-5.868 5.868-14.022 6.714t-14.814-3.618l-13.032 13.032h-6.516v-6.516l13.032-13.032q-4.464-6.66-3.618-14.814t6.714-14.022l5.76-5.76 5.4 5.4 14.4-14.436q1.368-1.332 3.276-1.332t3.24 1.332 1.332 3.258-1.332 3.258l-14.4 14.436 8.424 8.424 14.436-14.4q1.368-1.332 3.276-1.332t3.24 1.332z","SLIDESHARE":"M31.428-37.799q0 2.988-2.286 5.13t-5.49 2.142-5.49-2.142-2.286-5.13q0-3.024 2.286-5.148t5.49-2.124 5.49 2.124 2.286 5.148zm18.072 0q0 2.988-2.268 5.13t-5.508 2.142q-3.204 0-5.49-2.142t-2.286-5.13q0-3.024 2.286-5.148t5.49-2.124q3.24 0 5.508 2.124t2.268 5.148zm8.1 6.48v-24.012q0-3.132-1.152-4.446t-3.996-1.314h-40.032q-2.988 0-4.05 1.224t-1.062 4.536v24.228q1.548.828 3.186 1.44t2.916 1.008 2.916.666 2.556.396 2.52.144 2.106.018 2.034-.072 1.602-.072q2.448-.036 3.42.972.216.216.36.324.936.9 2.196 1.836.252-3.276 4.248-3.132.18 0 1.314.054t1.548.072 1.638.036 1.908-.036 1.962-.162 2.196-.306 2.232-.486 2.412-.702 2.43-.972 2.592-1.242zm5.868-.18q-4.356 5.364-13.392 9.072 3.024 10.26-.828 16.74-2.376 4.068-6.588 5.328-3.744 1.152-6.552-.54-3.096-1.836-2.952-5.904l-.036-11.736v-.036q-.288-.072-.882-.216t-.846-.18l-.036 12.168q.144 4.104-2.988 5.904-2.844 1.692-6.588.54-4.212-1.296-6.552-5.4-3.78-6.48-.792-16.668-9.036-3.708-13.392-9.072-.9-1.332-.144-2.268t2.16.036q.108.072.396.252t.396.288v-24.984q0-2.592 1.692-4.428t4.104-1.836h45.252q2.412 0 4.104 1.836t1.692 4.428v24.984l.756-.54q1.404-.972 2.16-.036t-.144 2.268z","TWITCH":"M32.256-48.815v15.624h-5.22v-15.624h5.22zm14.328 0v15.624h-5.22v-15.624h5.22zm0 27.36l9.108-9.144v-28.62h-42.984v37.764h11.736v7.812l7.812-7.812h14.328zm14.328-42.984v36.468l-15.624 15.624h-11.736l-7.812 7.812h-7.812v-7.812h-14.328v-41.688l3.924-10.404h53.388z","YELP":"M27.828-16.955v4.572q-.036 10.512-.216 10.98-.432 1.152-1.836 1.44-1.944.324-6.534-1.368t-5.85-3.204q-.468-.54-.612-1.296-.036-.432.144-.936.144-.36 1.224-1.692t6.516-7.776q.036 0 2.16-2.52.54-.684 1.422-.882t1.782.126q.864.36 1.35 1.044t.45 1.512zm-5.364-9.036q-.108 1.98-1.872 2.52l-4.32 1.404q-9.9 3.168-10.512 3.168-1.26-.072-1.944-1.296-.432-.9-.612-2.7-.288-2.736.036-5.994t1.08-4.482 2.016-1.152q.468 0 7.272 2.772 2.52 1.044 4.14 1.692l3.024 1.224q.828.324 1.278 1.098t.414 1.746zm29.736 10.692q-.252 1.944-3.294 5.796t-4.878 4.572q-1.332.504-2.268-.252-.504-.36-6.624-10.332l-1.692-2.772q-.504-.756-.414-1.656t.702-1.656q1.26-1.548 2.988-.936.036.036 4.284 1.44 7.308 2.376 8.712 2.862t1.692.738q1.008.792.792 2.196zm-24.192-22.752q.18 3.672-1.944 4.392-2.088.612-4.104-2.556l-13.608-21.528q-.288-1.26.684-2.232 1.476-1.548 7.47-3.222t8.082-1.134q1.44.36 1.764 1.62.108.648.792 10.998t.864 13.662zm23.832 3.888q.108 1.404-.936 2.124-.54.36-11.844 3.096-2.412.54-3.276.828l.036-.072q-.828.216-1.656-.144t-1.332-1.152q-1.08-1.692 0-3.132.036-.036 2.7-3.672 4.5-6.156 5.4-7.344t1.224-1.404q1.008-.684 2.34-.072 1.728.828 4.428 4.806t2.916 6.03v.108z","NEWSPAPER_O":"M36.864-46.007h-13.824v13.824h13.824v-13.824zm4.608 23.04v4.608h-23.04v-4.608h23.04zm0-27.648v23.04h-23.04v-23.04h23.04zm23.04 27.648v4.608h-18.432v-4.608h18.432zm0-9.216v4.608h-18.432v-4.608h18.432zm0-9.216v4.608h-18.432v-4.608h18.432zm0-9.216v4.608h-18.432v-4.608h18.432zm-55.296 34.56v-34.56h-4.608v34.56q0 .936.684 1.62t1.62.684 1.62-.684.684-1.62zm59.904 0v-39.168h-55.296v39.168q0 1.188-.396 2.304h53.388q.936 0 1.62-.684t.684-1.62zm4.608-43.776v43.776q0 2.88-2.016 4.896t-4.896 2.016h-59.904q-2.88 0-4.896-2.016t-2.016-4.896v-39.168h9.216v-4.608h64.512z","WIFI":"M36.864-9.611q-.72 0-3.348-2.646t-2.628-3.366q0-1.152 2.25-1.944t3.726-.792 3.726.792 2.25 1.944q0 .72-2.628 3.366t-3.348 2.646zm9.72-9.756q-.072 0-1.44-.9t-3.654-1.8-4.626-.9-4.626.9-3.636 1.8-1.458.9q-.648 0-3.366-2.7t-2.718-3.348q0-.468.36-.828 2.808-2.772 7.056-4.356t8.388-1.584 8.388 1.584 7.056 4.356q.36.36.36.828 0 .648-2.718 3.348t-3.366 2.7zm9.828-9.792q-.396 0-.828-.288-4.896-3.78-9.072-5.562t-9.648-1.782q-3.06 0-6.138.792t-5.364 1.908-4.086 2.232-2.844 1.908-1.116.792q-.612 0-3.312-2.7t-2.7-3.348q0-.432.36-.792 4.752-4.752 11.52-7.38t13.68-2.628 13.68 2.628 11.52 7.38q.36.36.36.792 0 .648-2.7 3.348t-3.312 2.7zm9.756-9.756q-.396 0-.792-.324-6.444-5.652-13.374-8.514t-15.138-2.862-15.138 2.862-13.374 8.514q-.396.324-.792.324-.612 0-3.33-2.7t-2.718-3.348q0-.468.36-.828 6.732-6.696 16.02-10.368t18.972-3.672 18.972 3.672 16.02 10.368q.36.36.36.828 0 .648-2.718 3.348t-3.33 2.7z","CALCULATOR":"M13.824-9.143q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm13.824 0q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm-13.824-13.824q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm27.648 13.824q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm-13.824-13.824q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm-13.824-13.824q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm27.648 13.824q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm-13.824-13.824q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm27.648 27.648v-13.824q0-1.872-1.368-3.24t-3.24-1.368-3.24 1.368-1.368 3.24v13.824q0 1.872 1.368 3.24t3.24 1.368 3.24-1.368 1.368-3.24zm-13.824-27.648q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm13.824-11.52v-9.216q0-.936-.684-1.62t-1.62-.684h-46.08q-.936 0-1.62.684t-.684 1.62v9.216q0 .936.684 1.62t1.62.684h46.08q.936 0 1.62-.684t.684-1.62zm0 11.52q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm4.608-23.04v55.296q0 1.872-1.368 3.24t-3.24 1.368h-50.688q-1.872 0-3.24-1.368t-1.368-3.24v-55.296q0-1.872 1.368-3.24t3.24-1.368h50.688q1.872 0 3.24 1.368t1.368 3.24z","PAYPAL":"M54.684-41.183q.648 3.024-.144 7.344-3.132 15.984-20.34 15.984h-1.584q-.9 0-1.584.594t-.864 1.53l-.144.684-1.98 12.456-.072.54q-.18.936-.882 1.53t-1.602.594h-9.036q-.756 0-1.188-.54t-.324-1.296q.324-2.016.954-6.048t.954-6.048.972-6.03.972-6.03q.18-1.332 1.548-1.332h4.716q4.788.072 8.496-.756 6.3-1.404 10.332-5.184 3.672-3.42 5.58-8.856.864-2.52 1.26-4.788.036-.216.09-.27t.126-.036.216.126q2.844 2.124 3.528 5.832zm-6.192-10.152q0 3.852-1.656 8.496-2.88 8.388-10.872 11.34-4.068 1.44-9.072 1.512 0 .036-3.24.036l-3.24-.036q-3.6 0-4.248 3.456-.072.288-3.06 19.08-.036.36-.432.36h-10.62q-.792 0-1.314-.594t-.414-1.386l8.352-52.956q.18-1.044.99-1.728t1.854-.684h21.528q1.224 0 3.51.468t4.014 1.152q3.852 1.476 5.886 4.428t2.034 7.056z","GOOGLE_WALLET":"M15.876-40.247q1.152 0 1.872.936 9.576 13.104 13.032 27.864h-16.056q-4.572-15.876-13.212-26.964-.432-.576-.108-1.206t1.044-.63h13.428zm20.124 12.852q-1.764 7.164-4.5 14.148-2.844-11.16-9.216-21.384 1.44-7.956 1.584-16.164 7.596 12.24 12.132 23.4zm3.564-25.524q8.46 11.664 13.842 25.146t6.642 27.846h-16.236q-1.476-23.94-19.908-52.992h15.66zm24.948 20.736q0 15.264-3.636 29.232-2.412-20.16-12.924-38.988-.9-10.836-3.816-21.024-.144-.576.198-1.026t.918-.45h12.924q.756 0 1.386.468t.81 1.188q4.14 14.724 4.14 30.6z","CC_VISA":"M71.1-28.799h-4.968q.504-1.332 2.376-6.444l.108-.324q.144-.36.36-.936t.324-.936l.432 1.98zm-51.984-2.34l-2.088-10.62q-.396-1.944-2.7-1.944h-9.648l-.072.468q11.196 2.844 14.508 12.096zm6.444-12.564l-5.832 15.768-.612-3.204q-.936-2.52-3.06-4.662t-4.716-3.186l4.86 18.36h6.3l9.396-23.076h-6.336zm5.004 23.112h5.976l3.744-23.112h-5.976zm27.648-22.536q-2.484-.972-5.364-.972-4.428 0-7.236 2.124t-2.844 5.508q-.036 3.672 5.22 6.264 1.728.828 2.412 1.476t.684 1.404q0 1.08-1.08 1.656t-2.484.576q-3.096 0-5.616-1.188l-.792-.396-.828 5.184q2.664 1.224 6.66 1.224 4.68.036 7.506-2.124t2.898-5.76q0-3.816-5.04-6.264-1.764-.9-2.556-1.512t-.792-1.368q0-.792.882-1.386t2.538-.594q2.52-.036 4.464.864l.54.288zm15.3-.576h-4.608q-2.34 0-3.132 1.944l-8.856 21.168h6.264l1.26-3.456h7.632q.18.792.72 3.456h5.544zm9.432-11.52v46.08q0 1.872-1.368 3.24t-3.24 1.368h-73.728q-1.872 0-3.24-1.368t-1.368-3.24v-46.08q0-1.872 1.368-3.24t3.24-1.368h73.728q1.872 0 3.24 1.368t1.368 3.24z","CC_MASTERCARD":"M24.156-30.851h-.468q-1.692 0-1.692 1.152 0 .792.72.792.612 0 1.008-.54t.432-1.404zm14.22-1.296h2.232v-.108q.036-.144.018-.234t-.036-.252-.072-.288-.162-.234-.27-.18-.414-.072q-1.008 0-1.296 1.368zm19.44 1.296h-.432q-1.728 0-1.728 1.152 0 .792.72.792.612 0 1.008-.54t.432-1.404zm11.484-.936q0-1.476-1.08-1.476-.684 0-1.116.72t-.432 1.836q0 1.512 1.008 1.512.72 0 1.17-.72t.45-1.872zm-52.02-5.076h3.132l-1.584 9.432h-2.016l1.152-7.236-2.556 7.236h-1.404l-.144-7.2-1.224 7.2h-1.908l1.584-9.432h2.916l.072 5.868zm9.108 3.852q0 .216-.144 1.512-.576 3.636-.612 4.068h-1.692l.036-.792q-.72.936-2.088.936-.828 0-1.35-.576t-.522-1.512q0-1.404.936-2.178t2.628-.774q.504 0 .828.036l.018-.198.036-.162.018-.108q0-.72-1.296-.72-1.044 0-2.124.36 0-.144.252-1.728 1.368-.396 2.412-.396 2.664 0 2.664 2.232zm5.616-2.088l-.288 1.764q-.792-.108-1.476-.108-.972 0-.972.612 0 .288.162.432t.774.396q1.44.684 1.44 2.16 0 2.592-3.132 2.556-1.224 0-2.088-.216 0-.072.252-1.764 1.044.288 1.836.288 1.152 0 1.152-.684 0-.252-.162-.414t-.774-.45q-1.548-.72-1.548-2.124 0-2.592 3.024-2.592 1.08 0 1.8.144zm3.168 0h1.008l-.252 1.872h-1.044q-.072.612-.234 1.458t-.252 1.386-.09.648q0 .576.684.576.288 0 .576-.072l-.288 1.692q-.756.252-1.44.252-1.548 0-1.62-1.692 0-.432.288-2.016.108-.72.9-5.256h1.98zm7.308 2.628q0 .828-.252 1.872h-3.996q-.108.792.36 1.188t1.368.396q1.08 0 2.088-.504l-.324 1.944q-1.08.288-2.052.288-3.42 0-3.42-3.42 0-1.98.99-3.258t2.502-1.278q1.26 0 1.998.756t.738 2.016zm5.004-2.664q-.468.828-.792 2.232-.792-.072-1.116.864t-.9 4.608h-2.016l.108-.504q.792-4.68 1.044-7.164h1.836l-.108 1.188q.504-.756.918-1.062t1.026-.162zm6.732-1.476l-.324 2.052q-1.008-.504-1.8-.504-1.116 0-1.836.99t-.72 2.538q0 1.08.486 1.692t1.386.612q.756 0 1.728-.468l-.36 2.124q-1.008.288-1.8.288-1.62 0-2.574-1.098t-.954-2.97q0-2.52 1.278-4.122t3.294-1.602q.936 0 2.196.468zm5.832 3.6q0 .648-.144 1.512-.468 2.844-.612 4.068h-1.656l.036-.792q-.72.936-2.124.936-.828 0-1.332-.576t-.504-1.512q0-1.404.918-2.178t2.61-.774q.54 0 .828.036.072-.252.072-.468 0-.72-1.296-.72-1.044 0-2.124.36 0-.144.288-1.728 1.368-.396 2.412-.396 2.628 0 2.628 2.232zm5.076-2.124q-.504.864-.756 2.232-.828-.072-1.134.828t-.918 4.644h-2.016l.108-.504q.684-3.744 1.044-7.164h1.872q0 .396-.144 1.188.54-.756.954-1.062t.99-.162zm5.076-1.728h2.016l-1.548 9.432h-1.908l.108-.684q-.828.828-1.872.828-1.116 0-1.782-.864t-.666-2.304q0-1.908.99-3.312t2.322-1.404q1.116 0 1.908 1.044zm3.996 4.68q0-5.328-2.61-9.828t-7.128-7.128-9.846-2.628q-6.516 0-11.808 3.96 4.572 4.176 6.156 10.224h-1.8q-1.584-5.4-5.688-9.108-4.104 3.708-5.688 9.108h-1.8q1.584-6.048 6.156-10.224-5.292-3.96-11.808-3.96-5.328 0-9.846 2.628t-7.128 7.128-2.61 9.828 2.61 9.828 7.128 7.128 9.846 2.628q6.516 0 11.808-3.96-4.32-3.996-5.94-9.504h1.8q1.656 4.968 5.472 8.388 3.816-3.42 5.472-8.388h1.8q-1.62 5.508-5.94 9.504 5.292 3.96 11.808 3.96 5.328 0 9.846-2.628t7.128-7.128 2.61-9.828zm8.748-23.04v46.08q0 1.872-1.368 3.24t-3.24 1.368h-73.728q-1.872 0-3.24-1.368t-1.368-3.24v-46.08q0-1.872 1.368-3.24t3.24-1.368h73.728q1.872 0 3.24 1.368t1.368 3.24z","CC_DISCOVER":"M11.268-36.467q0 1.836-1.296 3.024-1.044.936-3.204.936h-.612v-7.92h.612q2.196 0 3.204.972 1.296 1.116 1.296 2.988zm63.936-2.34q0 1.872-2.304 1.872h-.684v-3.636h.72q2.268 0 2.268 1.764zm-61.524 2.34q0-2.664-1.8-4.338t-4.644-1.674h-3.42v11.988h3.42q2.664 0 4.284-1.368 2.16-1.836 2.16-4.608zm1.08 5.976h2.34v-11.988h-2.34v11.988zm11.52-3.636q0-1.44-.738-2.232t-2.718-1.512q-1.044-.36-1.422-.684t-.378-.828q0-.576.486-.954t1.242-.378q1.044 0 1.908.972l1.224-1.584q-1.476-1.332-3.528-1.332-1.584 0-2.664.99t-1.08 2.43q0 1.26.648 1.998t2.304 1.314q1.332.468 1.62.684.684.432.684 1.224 0 .72-.504 1.206t-1.296.486q-1.728 0-2.556-1.584l-1.512 1.44q1.584 2.304 4.14 2.304 1.836 0 2.988-1.098t1.152-2.862zm10.008 3.24v-2.772q-1.332 1.332-2.808 1.332-1.764 0-2.898-1.17t-1.134-2.97q0-1.728 1.134-2.934t2.79-1.206q1.548 0 2.916 1.368v-2.772q-1.44-.72-2.88-.72-2.664 0-4.518 1.818t-1.854 4.446 1.836 4.446 4.5 1.818q1.512 0 2.916-.684zm44.352 21.744v-18.972q-2.34 1.44-5.202 3.024t-8.55 4.212-11.862 4.95-15.03 4.842-18.144 4.248h56.484q.936 0 1.62-.684t.684-1.62zm-30.636-27.252q0-2.7-1.908-4.608t-4.608-1.908-4.608 1.908-1.908 4.608 1.908 4.608 4.608 1.908 4.608-1.908 1.908-4.608zm5.472 6.228l5.184-12.312h-2.556l-3.24 8.064-3.204-8.064h-2.556l5.112 12.312h1.26zm6.228-.324h6.624v-2.016h-4.284v-3.24h4.14v-2.016h-4.14v-2.664h4.284v-2.052h-6.624v11.988zm14.076 0h2.88l-3.78-5.04q2.736-.576 2.736-3.384 0-1.692-1.116-2.628t-3.132-.936h-3.492v11.988h2.34v-4.788h.324zm7.164-24.516v45.648q0 2.016-1.386 3.42t-3.366 1.404h-73.44q-1.98 0-3.366-1.404t-1.386-3.42v-45.648q0-2.016 1.386-3.42t3.366-1.404h73.44q1.98 0 3.366 1.404t1.386 3.42z","CC_AMEX":"M4.284-39.887h3.204l-1.62-3.888zm22.356 18.936l2.664-2.844-2.52-2.844h-5.868v1.764h5.112v1.98h-5.112v1.944h5.724zm5.688-2.808l3.564 3.96v-7.812zm10.368-1.692q0-1.188-1.44-1.188h-3.024v2.484h2.988q1.476 0 1.476-1.296zm10.404-.144q0-1.044-1.512-1.044h-2.952v2.196h2.916q1.548 0 1.548-1.152zm-10.008-16.776q0-1.044-1.512-1.044h-2.952v2.16h2.916q1.548 0 1.548-1.116zm16.524 2.484h3.204l-1.584-3.888zm-34.452-5.58v9.756h-2.376v-7.632l-3.384 7.632h-2.052l-3.384-7.632v7.632h-4.752l-.9-2.16h-4.86l-.9 2.16h-2.52l4.176-9.756h3.456l3.96 9.252v-9.252h3.816l3.06 6.624 2.772-6.624h3.888zm20.016 20.016q0 .72-.198 1.26t-.504.9-.81.594-.936.36-1.134.162-1.134.036-1.17-.018-1.062-.018v3.276h-4.536l-2.88-3.24-2.988 3.24h-9.216v-9.756h9.36l2.88 3.204 2.952-3.204h7.452q3.924 0 3.924 3.204zm-10.476-12.276v2.016h-7.812v-9.756h7.812v2.052h-5.472v1.764h5.328v1.98h-5.328v1.944h5.472zm48.24 20.124v8.244q0 1.98-1.386 3.402t-3.366 1.422h-73.44q-1.98 0-3.366-1.422t-1.386-3.402v-24.408h3.996l.9-2.196h1.98l.9 2.196h7.848v-1.656l.684 1.656h4.068l.72-1.692v1.692h19.476v-3.564l.36-.036q.36 0 .36.504v3.096h10.044v-.828q.828.432 1.98.648t1.89.234 2.268-.018 1.854-.036l.9-2.196h2.016l.9 2.196h8.172v-2.088l1.224 2.088h6.552v-13.608h-6.48v1.584l-.9-1.584h-6.66v1.584l-.828-1.584h-8.964q-2.484 0-3.924.792v-.792h-6.192v.792q-.864-.792-2.628-.792h-22.608l-1.548 3.492-1.548-3.492h-7.128v1.584l-.792-1.584h-6.084l-2.808 6.444v-14.076q0-1.98 1.386-3.402t3.366-1.422h73.44q1.98 0 3.366 1.422t1.386 3.402v24.408h-4.32q-1.836 0-2.916.792v-.792h-6.372q-1.98 0-2.808.792v-.792h-11.376v.792q-1.116-.792-3.132-.792h-7.524v.792q-.828-.792-3.276-.792h-8.424l-1.944 2.088-1.8-2.088h-12.564v13.608h12.348l1.98-2.124 1.872 2.124h7.596v-3.204h.756q2.124 0 3.24-.468v3.672h6.264v-3.564h.288q.288 0 .36.072t.072.36v3.132h19.044q2.052 0 3.168-.864v.864h6.048q2.16 0 3.42-.612zm-27.288-8.424q0 .828-.432 1.548t-1.224 1.044q.9.324 1.224.936t.324 1.656v1.944h-2.34v-1.62q0-1.188-.432-1.566t-1.656-.378h-2.484v3.564h-2.34v-9.756h5.544q1.728 0 2.772.54t1.044 2.088zm-9.972-16.812q0 .864-.45 1.584t-1.206 1.044q.936.324 1.242.918t.306 1.674v1.908h-2.34q0-.324.018-.954t0-.9-.108-.666-.306-.576-.63-.306-1.062-.126h-2.52v3.528h-2.304v-9.756l5.508.036q1.764 0 2.808.522t1.044 2.07zm19.044 21.924v2.016h-7.776v-9.756h7.776v2.016h-5.436v1.764h5.328v1.98h-5.328v1.944zm-15.336-24.552v9.756h-2.376v-9.756h2.376zm24.948 23.472q0 3.096-3.672 3.096h-4.536v-2.088h4.536q1.224 0 1.224-.9 0-.576-.612-.756t-1.494-.18-1.782-.126-1.512-.81-.612-1.98q0-1.404.936-2.16t2.376-.756h4.68v2.052h-4.284q-1.296 0-1.296.9 0 .576.63.738t1.512.144 1.764.09 1.512.774.63 1.962zm8.604-1.8v3.636q-.864 1.26-3.168 1.26h-4.5v-2.088h4.5q1.188 0 1.188-.9 0-.468-.45-.684t-1.116-.198-1.44-.072-1.44-.288-1.116-.864-.45-1.746q0-1.404.954-2.16t2.394-.756h4.644v2.052h-4.248q-1.296 0-1.296.9 0 .72 1.044.792t2.466.18 2.034.936zm-5.94-21.636v9.72h-3.312l-4.392-7.308v7.308h-4.752l-.936-2.16h-4.824l-.9 2.16h-2.7q-4.644 0-4.644-4.788 0-4.968 4.788-4.968h2.268v2.124q-.252 0-1.008-.036t-1.026-.018-.828.072-.774.234-.522.486-.414.828-.108 1.206q0 1.368.486 2.088t1.782.72h1.044l3.312-7.668h3.492l3.924 9.216v-9.216h3.564l4.104 6.768v-6.768h2.376z","CC_PAYPAL":"M26.82-31.823q0 1.332-.918 2.214t-2.25.882q-1.044 0-1.674-.576t-.63-1.584q0-1.332.9-2.25t2.232-.918q1.008 0 1.674.594t.666 1.638zm28.26-5.364q0 1.512-.792 2.052t-2.376.54l-1.152.036.612-3.852q.072-.396.468-.396h.648q.792 0 1.26.072t.9.45.432 1.098zm12.636 5.364q0 1.296-.918 2.196t-2.214.9q-1.044 0-1.692-.576t-.648-1.584q0-1.332.9-2.25t2.232-.918q1.008 0 1.674.594t.666 1.638zm-49.248-6.156q0-2.124-1.386-3.078t-3.618-.954h-5.76q-.684 0-.756.684l-2.34 14.688q-.036.216.108.396t.36.18h2.736q.72 0 .792-.684l.648-3.96q.036-.288.252-.468t.54-.234.612-.054.684.036.504.036q3.096 0 4.86-1.746t1.764-4.842zm11.124 11.232l1.476-9.396q.036-.216-.108-.396t-.36-.18h-2.736q-.504 0-.612 1.188-.972-1.44-3.42-1.44-2.592 0-4.41 1.944t-1.818 4.572q0 2.124 1.242 3.384t3.33 1.26q1.008 0 2.088-.432t1.728-1.152q-.144.432-.144.756 0 .576.468.576h2.484q.684 0 .792-.684zm16.092-9.468q0-.18-.144-.342t-.324-.162h-2.772q-.396 0-.648.36l-3.816 5.616-1.584-5.4q-.18-.576-.792-.576h-2.7q-.18 0-.324.162t-.144.342q0 .072.702 2.124t1.512 4.428.846 2.52q-2.952 4.032-2.952 4.32 0 .468.468.468h2.772q.396 0 .648-.36l9.18-13.248q.072-.072.072-.252zm13.68-1.764q0-2.124-1.386-3.078t-3.618-.954h-5.724q-.72 0-.792.684l-2.34 14.688q-.036.216.108.396t.36.18h2.952q.432 0 .576-.468l.648-4.176q.036-.288.252-.468t.54-.234.612-.054.684.036.504.036q3.096 0 4.86-1.746t1.764-4.842zm11.124 11.232l1.476-9.396q.036-.216-.108-.396t-.36-.18h-2.736q-.504 0-.612 1.188-.936-1.44-3.42-1.44-2.592 0-4.41 1.944t-1.818 4.572q0 2.124 1.242 3.384t3.33 1.26q1.044 0 2.124-.432t1.692-1.152q0 .036-.072.324t-.072.432q0 .576.468.576h2.484q.684 0 .792-.684zm7.848-14.724v-.036q0-.504-.468-.504h-2.664q-.396 0-.468.396l-2.34 14.976-.036.072q0 .18.144.342t.36.162h2.376q.684 0 .756-.684zm-64.224 4.824q-.18 1.26-.936 1.656t-2.16.396l-1.188.036.612-3.852q.072-.396.468-.396h.684q1.44 0 2.088.414t.432 1.746zm68.832-18.576v46.08q0 1.872-1.368 3.24t-3.24 1.368h-73.728q-1.872 0-3.24-1.368t-1.368-3.24v-46.08q0-1.872 1.368-3.24t3.24-1.368h73.728q1.872 0 3.24 1.368t1.368 3.24z","CC_STRIPE":"M57.492-31.931q0 2.484-.756 3.816-.684 1.26-1.872 1.26-.828 0-1.476-.324v-8.064q1.044-1.08 2.052-1.08 2.052 0 2.052 4.392zm15.768-1.296h-3.96q.216-3.528 2.016-3.528 1.836 0 1.944 3.528zm-56.124 4.86q0-2.124-1.188-3.294t-3.636-2.07q-1.296-.468-1.872-.864t-.576-.9q0-.936 1.368-.936 2.088 0 4.464 1.188l.648-4.032q-2.412-1.152-5.364-1.152-2.772 0-4.428 1.368-1.728 1.404-1.728 3.924 0 2.088 1.17 3.258t3.582 2.034q1.404.504 1.962.918t.558.99q0 1.116-1.728 1.116-1.044 0-2.52-.45t-2.592-1.098l-.648 4.068q2.592 1.476 6.048 1.476 2.916 0 4.644-1.332 1.836-1.476 1.836-4.212zm10.62-7.74l.684-3.996h-3.456v-4.86l-4.644.756-.648 4.104-1.656.288-.612 3.708h2.232v7.884q0 3.024 1.584 4.32 1.368 1.08 3.996 1.08 1.152 0 2.844-.396v-4.248q-1.152.252-1.584.252-1.512 0-1.512-1.8v-7.092h2.772zm11.376.9v-5.004q-.54-.108-1.008-.108-1.152 0-1.998.576t-1.206 1.656l-.36-2.016h-4.716v16.956h5.4v-11.016q.936-1.116 2.952-1.116.576 0 .936.072zm1.332 12.06h5.4v-16.956h-5.4v16.956zm22.392-8.964q0-4.392-1.62-6.444-1.44-1.872-3.996-1.872-2.304 0-4.212 2.016l-.288-1.692h-4.752v23.22l5.4-.9v-5.436q1.296.396 2.448.396 2.988 0 4.824-2.016 2.196-2.34 2.196-7.272zm-16.848-12.528q0-1.188-.828-2.016t-2.016-.828-2.016.828-.828 2.016.828 2.034 2.016.846 2.016-.846.828-2.034zm32.328 12.852q0-4.068-1.728-6.336-1.8-2.304-5.184-2.304-3.456 0-5.454 2.376t-1.998 6.48q0 4.608 2.268 6.768 1.98 1.98 5.796 1.98 3.636 0 5.76-1.44l-.576-3.708q-2.052 1.116-4.608 1.116-1.548 0-2.268-.684-.828-.684-1.008-2.376h8.928q.072-.504.072-1.872zm4.608-23.436v46.08q0 1.872-1.368 3.24t-3.24 1.368h-73.728q-1.872 0-3.24-1.368t-1.368-3.24v-46.08q0-1.872 1.368-3.24t3.24-1.368h73.728q1.872 0 3.24 1.368t1.368 3.24z","BELL_SLASH":"M56.088-33.767q2.196 12.816 10.728 20.016 0 1.872-1.368 3.24t-3.24 1.368h-16.128q0 3.816-2.7 6.516t-6.516 2.7-6.498-2.682-2.718-6.498zm-19.224 30.96q.576 0 .576-.576t-.576-.576q-2.124 0-3.654-1.53t-1.53-3.654q0-.576-.576-.576t-.576.576q0 2.628 1.854 4.482t4.482 1.854zm36.072-57.6q.288.36.27.846t-.378.81l-67.392 58.392q-.36.288-.846.252t-.774-.396l-3.024-3.456q-.288-.36-.27-.846t.378-.774l6.696-5.796q-.684-1.152-.684-2.376 1.8-1.512 3.276-3.168t3.06-4.302 2.682-5.706 1.8-7.416.702-9.36q0-5.472 4.212-10.17t11.052-5.706q-.288-.684-.288-1.404 0-1.44 1.008-2.448t2.448-1.008 2.448 1.008 1.008 2.448q0 .72-.288 1.404 4.464.648 7.884 2.97t5.328 5.67l15.048-13.068q.36-.288.846-.252t.774.396z","BELL_SLASH_O":"M37.44-3.383q0-.576-.576-.576-2.124 0-3.654-1.53t-1.53-3.654q0-.576-.576-.576t-.576.576q0 2.628 1.854 4.482t4.482 1.854q.576 0 .576-.576zm-19.332-17.1l31.572-27.36q-1.512-3.168-4.77-5.274t-8.046-2.106q-3.348 0-6.102 1.134t-4.374 2.898-2.484 3.708-.864 3.78q0 13.824-4.932 23.22zm48.708 6.732q0 1.872-1.368 3.24t-3.24 1.368h-16.128q0 3.816-2.7 6.516t-6.516 2.7-6.498-2.682-2.718-6.498l5.364-4.644h27.252q-5.976-6.732-8.172-16.524l3.996-3.492q2.196 12.816 10.728 20.016zm3.096-50.112l3.024 3.456q.288.36.27.846t-.378.81l-67.392 58.392q-.36.288-.846.252t-.774-.396l-3.024-3.456q-.288-.36-.27-.846t.378-.774l6.696-5.796q-.684-1.152-.684-2.376 1.8-1.512 3.276-3.168t3.06-4.302 2.682-5.706 1.8-7.416.702-9.36q0-5.472 4.212-10.17t11.052-5.706q-.288-.684-.288-1.404 0-1.44 1.008-2.448t2.448-1.008 2.448 1.008 1.008 2.448q0 .72-.288 1.404 4.464.648 7.884 2.97t5.328 5.67l15.048-13.068q.36-.288.846-.252t.774.396z","TRASH":"M18.432-14.903v-25.344q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v25.344q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm9.216 0v-25.344q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v25.344q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm9.216 0v-25.344q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v25.344q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm-19.584-35.712h16.128l-1.728-4.212q-.252-.324-.612-.396h-11.412q-.36.072-.612.396zm33.408 1.152v2.304q0 .504-.324.828t-.828.324h-3.456v34.128q0 2.988-1.692 5.166t-4.068 2.178h-29.952q-2.376 0-4.068-2.106t-1.692-5.094v-34.272h-3.456q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h11.124l2.52-6.012q.54-1.332 1.944-2.268t2.844-.936h11.52q1.44 0 2.844.936t1.944 2.268l2.52 6.012h11.124q.504 0 .828.324t.324.828z","COPYRIGHT":"M41.4-25.775v3.924q0 1.8-1.314 3.204t-3.384 2.178-4.248 1.17-4.23.396q-7.38 0-12.33-5.004t-4.95-12.456q0-7.308 4.896-12.204t12.204-4.896q1.224 0 2.718.162t3.348.648 3.33 1.224 2.484 2.034 1.008 2.916v3.924q0 .576-.576.576h-4.248q-.576 0-.576-.576v-2.52q0-1.548-2.358-2.43t-4.95-.882q-5.04 0-8.226 3.294t-3.186 8.55q0 5.436 3.294 8.982t8.406 3.546q2.448 0 4.968-.864t2.52-2.376v-2.52q0-.252.162-.414t.378-.162h4.284q.216 0 .396.162t.18.414zm-13.752-29.448q-4.68 0-8.946 1.836t-7.344 4.914-4.914 7.344-1.836 8.946 1.836 8.946 4.914 7.344 7.344 4.914 8.946 1.836 8.946-1.836 7.344-4.914 4.914-7.344 1.836-8.946-1.836-8.946-4.914-7.344-7.344-4.914-8.946-1.836zm27.648 23.04q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","AT":"M34.992-36.539q0-3.888-1.926-6.084t-5.31-2.196q-2.268 0-4.464 1.098t-3.96 3.042-2.862 4.932-1.098 6.48q0 4.032 1.926 6.228t5.418 2.196q3.456 0 6.336-2.394t4.41-5.976 1.53-7.326zm20.304 4.356q0 3.996-1.332 7.092t-3.546 4.86-4.734 2.682-5.22.99l-.558.018-.594.018q-3.42 0-5.112-1.908-1.008-1.188-1.188-2.988-1.872 2.376-4.734 3.96t-6.246 1.584q-5.796 0-8.982-3.438t-3.186-9.702q0-5.652 2.376-10.44t6.444-7.578 8.856-2.79q3.132 0 5.58 1.278t3.816 3.582l.072-.684.396-2.016q.036-.216.198-.432t.342-.216h4.248q.18 0 .468.396.18.18.108.576l-4.32 22.104q-.18.864-.18 1.728 0 1.404.45 1.872t1.602.468q1.008-.036 2.052-.198t2.628-.864 2.772-1.8 2.052-3.222.864-4.932q0-10.512-6.264-16.776t-16.776-6.264q-4.68 0-8.946 1.836t-7.344 4.914-4.914 7.344-1.836 8.946 1.836 8.946 4.914 7.344 7.344 4.914 8.946 1.836q8.208 0 14.58-5.184.396-.324.864-.288t.756.432l1.476 1.764q.288.432.252.864-.072.468-.432.792-3.672 2.988-8.19 4.608t-9.306 1.62q-5.616 0-10.728-2.196t-8.82-5.904-5.904-8.82-2.196-10.728 2.196-10.728 5.904-8.82 8.82-5.904 10.728-2.196q12.384 0 20.016 7.632t7.632 20.016z","EYEDROPPER":"M61.128-61.055q3.384 3.384 3.384 8.154t-3.384 8.118l-8.1 8.028 3.744 3.744q.36.36.36.828t-.36.828l-7.56 7.56q-.36.36-.828.36t-.828-.36l-3.78-3.78-21.708 21.708q-1.332 1.332-3.24 1.332h-7.308l-9.216 4.608-2.304-2.304 4.608-9.216v-7.308q0-1.908 1.332-3.24l21.708-21.708-3.78-3.78q-.36-.36-.36-.828t.36-.828l7.56-7.56q.36-.36.828-.36t.828.36l3.744 3.744 8.028-8.1q3.348-3.384 8.118-3.384t8.154 3.384zm-42.696 49.608l20.736-20.736-6.912-6.912-20.736 20.736v6.912h6.912z","PAINT_BRUSH":"M58.14-64.439q2.52 0 4.41 1.674t1.89 4.194q0 2.268-1.62 5.436-11.952 22.644-16.74 27.072-3.492 3.276-7.848 3.276-4.536 0-7.794-3.33t-3.258-7.902q0-4.608 3.312-7.632l22.968-20.844q2.124-1.944 4.68-1.944zm-32.724 37.224q1.404 2.736 3.834 4.68t5.418 2.736l.036 2.556q.144 7.668-4.662 12.492t-12.546 4.824q-4.428 0-7.848-1.674t-5.49-4.59-3.114-6.588-1.044-7.92q.252.18 1.476 1.08t2.232 1.602 2.124 1.314 1.656.612q1.476 0 1.98-1.332.9-2.376 2.07-4.05t2.502-2.736 3.168-1.71 3.708-.918 4.5-.378z","BIRTHDAY_CAKE":"M64.512-13.751v13.824h-64.512v-13.824q1.62 0 3.06-.504t2.124-.99 1.692-1.35q1.08-.972 1.854-1.368t2.034-.396 1.998.396 1.89 1.368q1.044.9 1.692 1.368t2.088.972 3.096.504q1.62 0 3.06-.522t2.088-.972 1.728-1.35q.756-.684 1.17-.972t1.116-.54 1.566-.252q1.26 0 2.034.396t1.854 1.368q1.008.864 1.692 1.35t2.124.99 3.06.504 3.06-.504 2.124-.99 1.692-1.35q1.08-.972 1.854-1.368t2.034-.396q1.224 0 1.998.396t1.854 1.368q1.008.864 1.692 1.35t2.124.99 3.06.504zm0-11.52v6.912q-1.26 0-1.998-.396t-1.89-1.368q-1.044-.9-1.692-1.368t-2.088-.972-3.06-.504q-1.656 0-3.096.504t-2.088.972-1.692 1.368q-.792.684-1.188.972t-1.116.54-1.584.252q-1.26 0-2.034-.396t-1.854-1.368q-1.044-.9-1.692-1.368t-2.088-.972-3.096-.504q-1.62 0-3.06.522t-2.088.972-1.728 1.35q-.756.684-1.17.972t-1.116.54-1.566.252q-1.26 0-2.034-.396t-1.854-1.368q-1.008-.864-1.692-1.35t-2.124-.99-3.06-.504q-1.656 0-3.096.504t-2.088.972-1.692 1.368q-1.08.972-1.854 1.368t-2.034.396v-6.912q0-2.88 2.016-4.896t4.896-2.016h2.304v-16.128h9.216v16.128h9.216v-16.128h9.216v16.128h9.216v-16.128h9.216v16.128h2.304q2.88 0 4.896 2.016t2.016 4.896zm-46.08-31.104q0 2.772-1.296 4.266t-3.312 1.494q-1.908 0-3.258-1.35t-1.35-3.258q0-1.044.342-1.836t.846-1.224 1.116-1.008 1.116-1.134.846-1.602.342-2.412q1.368 0 2.988 2.664t1.62 5.4zm18.432 0q0 2.772-1.296 4.266t-3.312 1.494q-1.908 0-3.258-1.35t-1.35-3.258q0-1.044.342-1.836t.846-1.224 1.116-1.008 1.116-1.134.846-1.602.342-2.412q1.368 0 2.988 2.664t1.62 5.4zm18.432 0q0 2.772-1.296 4.266t-3.312 1.494q-1.908 0-3.258-1.35t-1.35-3.258q0-1.044.342-1.836t.846-1.224 1.116-1.008 1.116-1.134.846-1.602.342-2.412q1.368 0 2.988 2.664t1.62 5.4z","AREA_CHART":"M73.728-9.143v4.608h-73.728v-55.296h4.608v50.688h69.12zm-13.824-36.864l9.216 32.256h-59.904v-20.736l16.128-20.736 20.736 20.736z","PIE_CHART":"M27.648-32.399l19.656 19.656q-3.816 3.888-8.91 6.048t-10.746 2.16q-7.524 0-13.878-3.708t-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708v27.432zm6.732.216h27.828q0 5.652-2.16 10.746t-6.048 8.91zm25.524-4.608h-27.648v-27.648q7.524 0 13.878 3.708t10.062 10.062 3.708 13.878z","LINE_CHART":"M73.728-9.143v4.608h-73.728v-55.296h4.608v50.688h69.12zm-4.608-44.928v15.66q0 .756-.702 1.062t-1.278-.27l-4.356-4.356-22.788 22.788q-.36.36-.828.36t-.828-.36l-8.388-8.388-14.976 14.976-6.912-6.912 21.06-21.06q.36-.36.828-.36t.828.36l8.388 8.388 16.704-16.704-4.356-4.356q-.576-.576-.27-1.278t1.062-.702h15.66q.504 0 .828.324t.324.828z","LASTFM":"M46.512-39.095q0 .216.36 1.476.36 1.044.9 1.782t1.476 1.224 1.584.72 1.98.594q11.7 3.276 11.7 11.952 0 5.256-3.798 8.73t-9.162 3.474q-2.124 0-4.014-.666t-3.294-1.638-2.772-2.682-2.268-3.15-1.926-3.726-1.566-3.708-1.422-3.834-1.278-3.42q-1.152-2.916-2.214-4.806t-2.646-3.474-3.744-2.304-5.112-.72q-3.456 0-6.588 1.998t-4.968 5.202-1.836 6.66q0 5.76 3.834 10.062t9.486 4.302q6.372 0 9.288-3.42 2.016-2.268 2.988-4.176l3.024 5.472q-.54 1.224-1.584 2.52l.036.036q-4.716 5.472-13.968 5.472-5.292 0-9.702-2.844t-6.858-7.47-2.448-9.882q0-3.78 1.566-7.416t4.176-6.354 6.192-4.374 7.362-1.656q3.132 0 5.724.684t4.446 1.8 3.42 2.88 2.61 3.564 2.106 4.212 1.818 4.482 1.8 4.698 1.98 4.572q3.456 7.2 8.388 7.2 2.916 0 4.986-1.746t2.07-4.626q0-1.512-.684-2.592t-1.818-1.656-2.61-1.134-3.042-.972-3.15-1.224-2.916-1.872-2.34-2.952-1.404-4.41q-.108-.576-.108-1.188 0-3.96 3.15-6.912t7.146-2.808q2.808.108 4.338.522t3.258 1.926h-.036q.432.396.828.882t.936 1.296.684.99l-4.644 3.564q-.936-1.764-1.944-2.52v-.036q-.828-.756-3.492-.756-1.764 0-3.024 1.188t-1.26 2.988z","LASTFM_SQUARE":"M51.552-26.567q0-6.228-8.424-8.604-1.26-.36-1.908-.594t-1.368-.9-1.044-1.674q0-.072-.072-.306t-.108-.432-.036-.27q0-1.296.882-2.142t2.178-.846q1.944 0 2.556.54h-.036q.72.54 1.404 1.836l3.348-2.556q-1.404-1.944-1.764-2.304-1.188-1.044-2.43-1.404t-3.078-.36q-2.88 0-5.112 2.07t-2.232 4.95q0 .252.072.828.576 3.456 2.322 5.04t5.346 2.628q1.044.288 1.764.558t1.62.774 1.386 1.242.486 1.674v.18q.036 2.088-1.458 3.348t-3.618 1.26q-3.492 0-6.012-5.184-.828-1.692-1.854-4.374t-1.728-4.518-1.944-3.978-2.664-3.438-3.726-2.178-5.292-.882q-3.636 0-6.912 2.016t-5.184 5.328-1.8 6.912v.036q.144 3.888 1.818 7.164t4.806 5.31 7.056 2.034q6.696 0 10.044-3.96.72-.972 1.116-1.836l-2.16-3.924q-1.512 2.88-3.564 4.176t-5.256 1.296q-4.14 0-6.876-3.132t-2.736-7.344q0-3.78 2.952-6.804t6.696-3.024q4.032 0 6.12 1.926t3.744 6.21q.288.756.918 2.466t1.026 2.754 1.134 2.682 1.386 2.664 1.638 2.25 1.998 1.926 2.376 1.188 2.88.486q3.852 0 6.588-2.502t2.736-6.282zm3.744-22.896v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","TOGGLE_OFF":"M41.472-32.183q0-3.744-1.458-7.146t-3.942-5.886-5.886-3.942-7.146-1.458-7.146 1.458-5.886 3.942-3.942 5.886-1.458 7.146 1.458 7.146 3.942 5.886 5.886 3.942 7.146 1.458 7.146-1.458 5.886-3.942 3.942-5.886 1.458-7.146zm27.648 0q0-3.744-1.458-7.146t-3.942-5.886-5.886-3.942-7.146-1.458h-13.896q4.284 3.24 6.786 8.064t2.502 10.368-2.502 10.368-6.786 8.064h13.896q3.744 0 7.146-1.458t5.886-3.942 3.942-5.886 1.458-7.146zm4.608 0q0 4.68-1.836 8.946t-4.914 7.344-7.344 4.914-8.946 1.836h-27.648q-4.68 0-8.946-1.836t-7.344-4.914-4.914-7.344-1.836-8.946 1.836-8.946 4.914-7.344 7.344-4.914 8.946-1.836h27.648q4.68 0 8.946 1.836t7.344 4.914 4.914 7.344 1.836 8.946z","TOGGLE_ON":"M0-32.183q0-4.68 1.836-8.946t4.914-7.344 7.344-4.914 8.946-1.836h27.648q4.68 0 8.946 1.836t7.344 4.914 4.914 7.344 1.836 8.946-1.836 8.946-4.914 7.344-7.344 4.914-8.946 1.836h-27.648q-4.68 0-8.946-1.836t-7.344-4.914-4.914-7.344-1.836-8.946zm50.688 18.432q3.744 0 7.146-1.458t5.886-3.942 3.942-5.886 1.458-7.146-1.458-7.146-3.942-5.886-5.886-3.942-7.146-1.458-7.146 1.458-5.886 3.942-3.942 5.886-1.458 7.146 1.458 7.146 3.942 5.886 5.886 3.942 7.146 1.458z","BICYCLE":"M27.432-22.967h-11.304q-1.44 0-2.07-1.26t.234-2.412l6.768-9.036q-2.34-1.116-4.932-1.116-4.752 0-8.136 3.384t-3.384 8.136 3.384 8.136 8.136 3.384q4.14 0 7.308-2.61t3.996-6.606zm-6.696-4.608h6.696q-.648-3.06-2.7-5.328zm17.28 0l10.368-13.824h-17.28l-3.564 4.752q3.78 3.708 4.536 9.072h5.94zm40.32 2.304q0-4.752-3.384-8.136t-8.136-3.384q-2.16 0-4.356.864l6.264 9.36q.54.828.36 1.764t-.972 1.44q-.54.396-1.296.396-1.26 0-1.908-1.044l-6.264-9.36q-3.348 3.42-3.348 8.1 0 4.752 3.384 8.136t8.136 3.384 8.136-3.384 3.384-8.136zm4.608 0q0 6.66-4.734 11.394t-11.394 4.734-11.394-4.734-4.734-11.394q0-3.492 1.422-6.606t3.942-5.382l-2.34-3.528-12.708 16.884q-.648.936-1.836.936h-7.092q-.828 5.904-5.364 9.864t-10.584 3.96q-6.66 0-11.394-4.734t-4.734-11.394 4.734-11.394 11.394-4.734q4.104 0 7.74 1.98l4.932-6.588h-8.064q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684h13.824v4.608h15.66l-3.06-4.608h-7.992q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684h9.216q1.188 0 1.908 1.008l9.612 14.4q3.276-1.584 6.912-1.584 6.66 0 11.394 4.734t4.734 11.394z","BUS":"M13.824-20.663q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm36.864 0q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm-1.656-14.256l-2.592-13.824q-.18-.828-.81-1.35t-1.458-.522h-33.048q-.828 0-1.458.522t-.81 1.35l-2.592 13.824q-.18 1.08.504 1.908t1.764.828h38.232q1.08 0 1.764-.828t.504-1.908zm-8.136-22.032q0-.72-.504-1.224t-1.224-.504h-23.04q-.72 0-1.224.504t-.504 1.224.504 1.224 1.224.504h23.04q.72 0 1.224-.504t.504-1.224zm14.4 26.1v21.708h-4.608v4.608q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258v-4.608h-27.648v4.608q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258v-4.608h-4.608v-21.708q0-4.032.9-8.028l3.708-16.344q.324-2.808 3.51-4.932t8.28-3.204 11.25-1.08 11.25 1.08 8.28 3.204 3.51 4.932l3.78 16.344q.828 3.672.828 8.028z","IOXHOST":"M52.668-34.487q0 1.26-.9 2.178t-2.196.918h-25.272q-1.296 0-2.196-.918t-.9-2.178.9-2.178 2.196-.918h25.272q1.296 0 2.196.918t.9 2.178zm7.704 0q0-3.096-.828-6.12h-35.352q-1.296 0-2.196-.9t-.9-2.16q0-1.296.9-2.196t2.196-.9h32.688q-3.168-5.148-8.46-8.172t-11.52-3.024q-6.372 0-11.79 3.15t-8.568 8.55-3.15 11.772q0 3.096.828 6.12h35.352q1.296 0 2.196.9t.9 2.16q0 1.296-.9 2.196t-2.196.9h-32.688q3.168 5.148 8.478 8.172t11.538 3.024q4.752 0 9.108-1.854t7.488-5.004 5.004-7.488 1.872-9.126zm13.356-9.18q0 1.26-.9 2.16t-2.196.9h-4.716q.612 3.06.612 6.12 0 6.012-2.358 11.502t-6.318 9.468-9.45 6.336-11.502 2.358q-8.856 0-16.146-4.788t-10.854-12.6h-6.804q-1.296 0-2.196-.9t-.9-2.196q0-1.26.9-2.16t2.196-.9h4.752q-.612-3.06-.612-6.12 0-6.012 2.358-11.502t6.318-9.468 9.45-6.336 11.538-2.358q8.82 0 16.11 4.788t10.854 12.6h6.768q1.296 0 2.196.9t.9 2.196z","ANGELLIST":"M34.308-50.831l-4.104 11.808 4.212.756q5.94-16.236 5.94-18.648 0-2.016-1.368-2.016-2.052 0-4.68 8.1zm-10.764 24.732l1.188 3.168q1.332-1.512 2.556-2.412l-1.188-.198-1.386-.252-1.17-.306zm-10.512-32.256q0 3.528 5.724 18.756.648-.36 1.764-.36.54 0 2.7.18l-4.356-12.636q-2.7-7.92-4.428-7.92-.684 0-1.044.63t-.36 1.35zm-2.844 27.324q0 1.296 1.854 4.284t4.23 5.508 3.6 2.52q.504 0 .918-.468t.414-.972q0-.864-1.152-3.672-.468-1.152-1.152-2.592t-1.71-3.204-2.214-2.916-2.232-1.152q-.72 0-1.638.972t-.918 1.692zm-5.688 12.06q0 1.476.9 3.744 2.124 5.22 6.606 8.172t10.134 2.952q8.172 0 13.752-6.12 5.472-6.084 5.472-15.372 0-1.548-.036-2.412t-.414-2.232-1.098-2.016q-2.016-1.764-7.614-2.718t-9.738-.954q-1.332 0-1.764.396-.432.18-.432 1.26 0 1.224.774 2.16t1.998 1.44 2.79.846 3.15.414 3.06.144 2.52 0h.828q.864 0 1.44.684.54.684.684 1.98-1.008 1.008-3.456 1.944-2.196.792-3.348 1.656-2.304 1.656-3.906 4.104t-1.602 4.932q0 1.116.666 3.186t.666 3.15l-.108.432q-.144.432-.144.504-4.932-.36-5.256-7.776-.288.072-1.476.072.072.252.072.756 0 1.908-1.458 3.222t-3.402 1.314q-2.952 0-5.994-2.808t-3.042-5.724q0-1.224 1.188-2.412 1.872 2.304 2.16 2.736 2.772 3.744 4.788 3.744.432 0 .954-.306t.522-.738q0-1.224-3.15-5.22t-4.194-3.996q-1.548 0-2.52 1.602t-.972 3.258zm-4.104.324q0-3.636 1.53-5.868t4.914-3.168q-1.008-2.664-1.008-3.744 0-2.232 2.196-4.428t4.392-2.196q1.044 0 2.52.54-5.868-16.632-5.868-20.412 0-2.88 1.476-4.698t4.284-1.818q4.716 0 11.7 20.916l.288.828q.216-.576 1.044-2.862t1.566-4.266 1.944-4.59 2.322-4.428 2.538-3.114 2.754-1.296q2.556 0 4.032 1.764t1.476 4.392q0 3.888-5.724 19.8 2.196.54 3.618 1.656t2.106 2.808.936 3.366.252 3.978q0 5.4-1.692 10.08t-4.752 8.1-7.596 5.4-10.008 1.98q-3.996 0-8.028-1.512-5.364-2.052-9.288-6.894t-3.924-10.314z","CC":"M28.26-28.151h7.452q-.504 5.688-3.546 8.946t-7.722 3.258q-5.832 0-9.162-4.176t-3.33-11.376q0-6.984 3.348-11.214t8.388-4.23q5.328 0 8.352 3.132t3.492 8.892h-7.308q-.18-2.304-1.278-3.564t-2.934-1.26q-2.052 0-3.186 2.178t-1.134 6.39q0 1.728.18 3.024t.648 2.502 1.44 1.854 2.376.648q3.42 0 3.924-5.004zm25.632 0h7.416q-.504 5.688-3.528 8.946t-7.704 3.258q-5.832 0-9.162-4.176t-3.33-11.376q0-6.984 3.348-11.214t8.388-4.23q5.328 0 8.352 3.132t3.492 8.892h-7.344q-.144-2.304-1.26-3.564t-2.916-1.26q-2.052 0-3.186 2.178t-1.134 6.39q0 1.728.18 3.024t.648 2.502 1.422 1.854 2.358.648q1.764 0 2.754-1.368t1.206-3.636zm12.924-4.284q0-7.452-.558-11.052t-2.178-5.796q-.216-.288-.486-.504t-.774-.54-.576-.396q-3.096-2.268-25.092-2.268-22.5 0-25.56 2.268-.18.144-.63.414t-.756.504-.522.522q-1.62 2.16-2.16 5.742t-.54 11.106q0 7.488.54 11.07t2.16 5.778q.216.288.54.54t.738.504.63.432q1.584 1.188 8.622 1.764t16.938.576q21.96 0 25.092-2.34.18-.144.612-.396t.738-.504.486-.576q1.656-2.16 2.196-5.724t.54-11.124zm6.912-27.396v55.296h-73.728v-55.296h73.728z","SHEQEL":"M35.712-41.975v17.856q0 .504-.324.828t-.828.324h-5.76q-.504 0-.828-.324t-.324-.828v-17.856q0-4.032-2.88-6.912t-6.912-2.88h-9.792v41.472q0 .504-.324.828t-.828.324h-5.76q-.504 0-.828-.324t-.324-.828v-48.384q0-.504.324-.828t.828-.324h16.704q4.86 0 8.964 2.394t6.498 6.498 2.394 8.964zm13.824-16.704v31.68q0 4.86-2.394 8.964t-6.498 6.498-8.964 2.394h-16.704q-.504 0-.828-.324t-.324-.828v-34.56q0-.504.324-.828t.828-.324h5.76q.504 0 .828.324t.324.828v27.648h9.792q4.032 0 6.912-2.88t2.88-6.912v-31.68q0-.504.324-.828t.828-.324h5.76q.504 0 .828.324t.324.828z","MEANPATH":"M47.196-34.127v4.104q0 .864-.486 1.368t-1.35.504h-7.272q-.864 0-1.368-.504t-.504-1.368v-4.104q0-.864.504-1.368t1.368-.504h7.272q.864 0 1.35.504t.486 1.368zm-17.64 8.28v-9q0-1.908-1.17-3.078t-3.078-1.17h-4.788q-2.448 0-3.456 1.872-1.008-1.872-3.456-1.872h-4.68q-1.908 0-3.078 1.17t-1.17 3.078v9q0 .792.756.792h1.98q.792 0 .792-.792v-8.28q0-.864.486-1.368t1.386-.504h3.384q.864 0 1.368.504t.504 1.368v8.28q0 .792.756.792h1.944q.792 0 .792-.792v-8.28q0-.864.504-1.368t1.368-.504h3.492q.864 0 1.35.504t.486 1.368v8.28q0 .792.792.792h1.98q.756 0 .756-.792zm21.204-3.456v-5.544q0-1.908-1.188-3.078t-3.096-1.17h-9.504q-1.908 0-3.096 1.17t-1.188 3.078v14.76q0 .756.792.756h1.98q.756 0 .756-.756v-6.48q1.116 1.512 3.384 1.512h6.876q1.908 0 3.096-1.17t1.188-3.078zm4.536-22.176v38.592q0 3.456-2.448 5.904t-5.904 2.448h-38.592q-3.456 0-5.904-2.448t-2.448-5.904v-38.592q0-3.456 2.448-5.904t5.904-2.448h38.592q3.456 0 5.904 2.448t2.448 5.904z","BUYSELLADS":"M32.94-25.343h-10.584l5.292-19.836zm3.096 11.592h11.196l-11.664-36.864h-15.84l-11.664 36.864h11.196l13.788-11.304zm19.26-35.712v34.56q0 4.248-3.06 7.308t-7.308 3.06h-34.56q-4.248 0-7.308-3.06t-3.06-7.308v-34.56q0-4.248 3.06-7.308t7.308-3.06h34.56q4.248 0 7.308 3.06t3.06 7.308z","CONNECTDEVELOP":"M73.728-32.219q0 .756-.468 1.314t-1.188.702l-7.38 12.816q.108.324.108.648 0 .72-.45 1.278t-1.17.702l-6.948 12.132q.108.288.108.576 0 .828-.594 1.44t-1.458.612q-.9 0-1.476-.648h-14.4q-.612.72-1.548.72t-1.548-.72h-14.364q-.612.72-1.548.72-.828 0-1.44-.594t-.612-1.458q0-.288.144-.72l-6.948-12.06q-.72-.144-1.17-.702t-.45-1.278q0-.324.108-.648l-7.416-12.816q-.72-.18-1.17-.738t-.45-1.278q0-.756.486-1.314t1.206-.702l7.164-12.384-.018-.108-.018-.108q0-1.296 1.224-1.836l7.524-13.068q-.144-.36-.144-.648 0-.864.612-1.458t1.44-.594q.936 0 1.584.756h14.256q.576-.756 1.548-.756t1.548.756h14.328q.648-.756 1.584-.756.828 0 1.44.594t.612 1.458q0 .216-.144.648l7.452 12.888q.828.036 1.404.63t.576 1.386q0 .468-.252.972l6.732 11.664q.684.144 1.134.702t.45 1.278zm-35.46 28.764h14.004l-12.312-12.744h-5.148l-12.312 12.744h12.96q.648-.576 1.404-.576t1.404.576zm-34.236-29.232q.036.144.036.468 0 .36-.072.54l7.488 12.96.162.036.198.09.18.09 6.768-7.164v-12.492l-6.732-6.984q-.468.288-1.044.36zm31.464-28.224h-13.968l6.84 7.2 19.944-7.2h-10.08q-.576.576-1.368.576t-1.368-.576zm25.308 43.632q.036-.216.18-.396l-2.304-2.448-.612 2.844h2.736zm-3.816 0l.792-3.78-9.072-9.576-10.656 11.052 2.268 2.304h16.668zm-3.168 13.248l.576-1.008 2.34-11.16h-15.372l11.988 12.348q.288-.144.468-.18zm-33.012.576h.18l12.312-12.744h-13.428v12.06l.144.216q.504.18.792.468zm-.936-13.824h14.472l2.304-2.376-11.124-11.556-5.652 5.976v7.956zm-6.948 0h5.868v-6.804l-6.048 6.372q.144.288.18.432zm-.036-29.7l.018.072.018.072q0 .576-.288 1.044l6.156 6.372v-9.684zm6.984-2.52v11.196l5.508 5.652 10.692-11.304-8.028-8.496zm.144-10.944l-.144.288v9.504l7.38-2.664-6.876-7.236-.36.108zm32.076-.468h-.576l-22.356 8.064 7.668 8.1zm-15.264 17.712l-10.692 11.34 11.196 11.484 10.656-11.052zm-12.06 11.232l-4.896-5.076v10.224zm12.6 13.104l-1.512 1.584h3.06zm12.096-12.528l8.568 9.036 4.752-22.464-.108-.18-.036-.036zm12.384-14.4q-.288-.468-.288-1.044v-.072l-7.776-13.536q-.18-.036-.468-.18l-15.732 16.668 11.16 11.772zm-43.056-4.464v-8.028l-5.868 10.152zm0 34.056h-5.868l5.868 10.188v-10.188zm39.06 0l-1.728 8.172 4.68-8.172h-2.952zm4.392-2.52l7.452-12.996q-.072-.36-.072-.504l.108-.576-6.156-10.656-4.644 22.032 2.772 2.952q.18-.108.54-.252z","DASHCUBE":"M0-39.959q0-4.716 3.294-8.154t8.01-3.438h26.712l12.672-12.888v52.92q0 4.752-3.294 8.172t-8.01 3.42h-28.08q-4.716 0-8.01-3.42t-3.294-8.172v-28.44zm44.352 27.144l-6.336-6.48v-15.3q0-1.656-1.152-2.844t-2.808-1.188h-17.424q-1.656 0-2.808 1.188t-1.152 2.844v17.712q0 1.656 1.17 2.862t2.79 1.206h27.72z","FORUMBEE":"M33.624-59.039q-11.412 4.356-20.016 13.05t-12.888 20.178q-.72-3.204-.72-6.336 0-7.488 3.69-13.842t10.026-10.044 13.824-3.69q2.952 0 6.084.684zm9.684 4.284q3.348 2.34 5.904 5.58-14.004 4.068-24.282 14.418t-14.274 24.354q-3.348-2.592-5.58-5.832 4.032-13.896 14.22-24.156t24.012-14.364zm-26.388 48.024q4.14-12.816 13.662-22.392t22.302-13.824q1.44 3.312 1.944 7.02-10.512 4.32-18.576 12.42t-12.348 18.648q-3.708-.504-6.984-1.872zm38.376 2.088q-6.948-1.8-13.212-4.14-4.86 3.024-10.44 3.852 3.924-7.38 9.864-13.338t13.284-9.918q-.756 5.472-3.636 10.224 2.34 6.3 4.14 13.32z","LEANPUB":"M68.148-50.327l5.58 45.792q-4.716 0-9.252-2.052-7.2-3.276-14.148-3.276-8.136 0-13.464 5.328-5.328-5.328-13.464-5.328-6.948 0-14.148 3.276-4.608 2.052-9.072 2.052h-.18l5.58-45.792q8.064-4.572 17.352-4.572 8.388 0 13.932 3.816 5.544-3.816 13.932-3.816 9.288 0 17.352 4.572zm-17.82 35.532q4.644 0 8.352 1.026t9.36 3.366l-4.464-36.756q-6.156-2.808-13.248-2.808-8.064 0-13.464 5.076-5.4-5.076-13.464-5.076-7.092 0-13.248 2.808l-4.464 36.756q3.78-1.548 5.958-2.34t5.346-1.422 6.408-.63q7.272 0 13.464 3.888 6.192-3.888 13.464-3.888zm1.44-1.224l-1.98-32.652q-7.596.144-12.924 5.58-5.472-5.58-13.464-5.58-6.336 0-12.096 2.376l-4.104 33.876q4.464-1.836 8.226-2.736t7.974-.9q7.524 0 13.464 3.672 6.192-3.852 13.464-3.672z","SELLSY":"M54-15.083v-26.388q0-.756-.54-1.296t-1.26-.54h-3.348q-.72 0-1.26.54t-.54 1.296v26.388q0 .72.54 1.26t1.26.54h3.348q.72 0 1.26-.54t.54-1.26zm-10.224 0v-19.116q0-.72-.54-1.26t-1.26-.54h-3.636q-.72 0-1.26.54t-.54 1.26v19.116q0 .72.54 1.26t1.26.54h3.636q.72 0 1.26-.54t.54-1.26zm-10.512 0v-15.444q0-.72-.54-1.26t-1.26-.54h-3.636q-.72 0-1.26.54t-.54 1.26v15.444q0 .72.54 1.26t1.26.54h3.636q.72 0 1.26-.54t.54-1.26zm-10.512 0v-13.032q0-.72-.54-1.26t-1.26-.54h-3.636q-.72 0-1.26.54t-.54 1.26v13.032q0 .72.54 1.26t1.26.54h3.636q.72 0 1.26-.54t.54-1.26zm50.976-5.256q0 5.976-4.248 10.224t-10.224 4.248h-44.784q-5.976 0-10.224-4.248t-4.248-10.224q0-4.176 2.268-7.722t6.048-5.346q-.36-1.224-.36-2.628 0-4.068 2.898-6.966t6.966-2.898q3.672 0 6.48 2.412 1.62-6.588 6.984-10.8t12.168-4.212q5.364 0 9.9 2.646t7.182 7.182 2.646 9.9q0 2.376-.504 4.392 4.86 1.188 7.956 5.13t3.096 8.91z","SHIRTSINBULK":"M0-64.439h55.296v50.112l-27.936 12.168-27.36-12.168v-50.112zm51.696 47.772v-33.336h-48.096v33.336l23.796 10.584zm0-36.936v-7.236h-48.096v7.236h48.096zm-45.18 10.728v4.14h-1.332v-4.14h1.332zm0 5.328v4.14h-1.332v-4.14h1.332zm0 5.328v4.14h-1.332v-4.14h1.332zm0 5.328v4.14h-1.332v-4.14h1.332zm0 5.328v4.14h-1.332v-4.14h1.332zm.936 5.148l.54-1.224 3.78 1.692-.54 1.188zm4.896 2.16l.54-1.224 3.78 1.656-.54 1.224zm4.86 2.16l.54-1.224 3.78 1.656-.54 1.224zm4.896 2.124l.54-1.188 3.744 1.656-.54 1.224zm6.588.468l3.78-1.656.54 1.188-3.78 1.692zm4.86-2.16l3.78-1.656.54 1.224-3.78 1.656zm4.896-2.16l3.78-1.656.54 1.224-3.78 1.656zm4.86-2.124l3.78-1.692.54 1.224-3.78 1.656zm-33.984-43.2v1.296h-4.104v-1.296h4.104zm5.832 0v1.296h-4.14v-1.296h4.14zm5.832 0v1.296h-4.14v-1.296h4.14zm5.796 0v1.296h-4.104v-1.296h4.104zm5.832 0v1.296h-4.104v-1.296h4.104zm5.832 0v1.296h-4.14v-1.296h4.14zm5.832 0v1.296h-4.14v-1.296h4.14zm5.796 0v1.296h-4.104v-1.296h4.104zm-43.56 12.24v2.844h-1.332v-4.14h4.14v1.296h-2.808zm8.64-1.296v1.296h-4.14v-1.296h4.14zm5.832 0v1.296h-4.14v-1.296h4.14zm5.796 0v1.296h-4.104v-1.296h4.104zm5.832 0v1.296h-4.104v-1.296h4.104zm5.832 0v1.296h-4.14v-1.296h4.14zm5.832 0v1.296h-4.14v-1.296h4.14zm4.5 4.14v-2.844h-2.808v-1.296h4.14v4.14h-1.332zm0 5.328v-4.14h1.332v4.14h-1.332zm0 5.328v-4.14h1.332v4.14h-1.332zm0 5.328v-4.14h1.332v4.14h-1.332zm0 5.328v-4.14h1.332v4.14h-1.332zm0 5.328v-4.14h1.332v4.14h-1.332zm-21.42-1.26q-4.644 0-7.956-3.294t-3.312-7.974q0-4.644 3.312-7.956t7.956-3.312q4.68 0 7.974 3.312t3.294 7.956q0 4.68-3.294 7.974t-7.974 3.294zm-5.94-13.716q0 1.296.702 2.034t1.782.9 2.304.252 2.304.072 1.782.324.702 1.098q0 1.764-4.032 1.764-3.492 0-4.428-1.836h-.108l-1.116 2.268q2.412 1.512 5.832 1.512 1.044 0 2.034-.18t1.998-.576 1.638-1.188.63-1.908q0-1.656-.99-2.502t-2.43-.972-2.862-.108-2.412-.18-.99-.918q0-.756.738-1.188t1.458-.54 1.476-.108q1.224 0 2.538.396t1.854 1.224h.108l1.08-2.088q-.108-.036-.756-.306t-.81-.324-.702-.252-.792-.252-.72-.162-.864-.144-.828-.036q-1.044 0-2.034.18t-1.944.594-1.548 1.224-.594 1.926z","SIMPLYBUILT":"M31.068-27.287q0-4.032-2.862-6.894t-6.894-2.862-6.876 2.862-2.844 6.894 2.844 6.876 6.876 2.844 6.894-2.844 2.862-6.876zm31.068-.036q0-4.032-2.844-6.876t-6.876-2.844-6.894 2.844-2.862 6.876q0 4.068 2.862 6.912t6.894 2.844 6.876-2.862 2.844-6.894zm11.592-29.124v48.528q0 1.584-1.134 2.718t-2.754 1.134h-65.952q-1.62 0-2.754-1.134t-1.134-2.718v-48.528q0-1.584 1.134-2.718t2.754-1.134h15.516q1.584 0 2.736 1.134t1.152 2.718v5.796h27.144v-5.796q0-1.584 1.152-2.718t2.736-1.134h15.516q1.62 0 2.754 1.134t1.134 2.718z","SKYATLAS":"M51.48-43.451zm9.36 7.344q5.328 0 9.108 3.546t3.78 8.802q0 5.652-3.924 9.414t-9.612 3.762q-3.06 0-5.832-.99t-4.968-2.646-4.248-3.816-3.924-4.554-3.726-4.77-3.906-4.536-4.212-3.816-4.896-2.646-5.724-.99q-5.544 0-9.054 3.294t-3.51 8.802q0 5.652 3.744 9t9.468 3.348q3.6 0 7.488-1.35t6.948-3.546q.18-.144.756-.666t1.08-.864.792-.342q.504 0 .882.378t.378.882q0 .864-2.16 2.772-3.636 3.168-8.442 5.112t-9.378 1.944q-4.788 0-8.838-2.088t-6.48-5.94-2.43-8.676q0-7.38 5.094-12.276t12.51-4.896q4.32 0 8.154 1.566t6.678 4.068 5.454 5.508 5.004 6.03 4.806 5.526 5.382 4.068 6.21 1.566q3.672 0 6.066-2.214t2.394-5.85q0-3.42-2.322-5.724t-5.742-2.304q-1.08 0-2.934.666t-2.466.666q-.72 0-1.278-.54t-.558-1.26q0-.648.306-2.052t.306-2.124q0-5.724-3.87-9.468t-9.594-3.744q-2.088 0-4.014.666t-3.024 1.458-1.998 1.458-1.188.666q-.54 0-.918-.378t-.378-.918q0-.684.9-1.656 2.124-2.412 5.292-3.726t6.552-1.314q6.876 0 11.448 4.518t4.572 11.358q0 1.332-.144 2.376 2.052-.54 4.14-.54z","CART_PLUS":"M43.776-39.095q0-.936-.684-1.62t-1.62-.684h-4.608v-4.608q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62v4.608h-4.608q-.936 0-1.62.684t-.684 1.62.684 1.62 1.62.684h4.608v4.608q0 .936.684 1.62t1.62.684 1.62-.684.684-1.62v-4.608h4.608q.936 0 1.62-.684t.684-1.62zm-20.736 29.952q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm32.256 0q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm4.608-39.168v18.432q0 .864-.576 1.53t-1.476.774l-37.584 4.392q.036.252.162.774t.216.954.09.792q0 .576-.864 2.304h33.12q.936 0 1.62.684t.684 1.62-.684 1.62-1.62.684h-36.864q-.936 0-1.62-.684t-.684-1.62q0-.504.396-1.422t1.062-2.142.738-1.368l-6.372-29.628h-7.344q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684h9.216q.576 0 1.026.234t.72.558.468.882.27.954.198 1.062.162.918h43.236q.936 0 1.62.684t.684 1.62z","CART_ARROW_DOWN":"M46.08-39.095q0-.936-.684-1.62t-1.62-.684-1.62.684l-5.292 5.256v-10.548q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62v10.548l-5.292-5.256q-.684-.684-1.62-.684t-1.62.684-.684 1.62.684 1.62l9.216 9.216q.684.684 1.62.684t1.62-.684l9.216-9.216q.684-.684.684-1.62zm-23.04 29.952q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm32.256 0q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm4.608-39.168v18.432q0 .864-.576 1.53t-1.476.774l-37.584 4.392q.036.252.162.774t.216.954.09.792q0 .576-.864 2.304h33.12q.936 0 1.62.684t.684 1.62-.684 1.62-1.62.684h-36.864q-.936 0-1.62-.684t-.684-1.62q0-.504.396-1.422t1.062-2.142.738-1.368l-6.372-29.628h-7.344q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684h9.216q.576 0 1.026.234t.72.558.468.882.27.954.198 1.062.162.918h43.236q.936 0 1.62.684t.684 1.62z","DIAMOND":"M7.632-36.791l22.428 23.94-10.8-23.94h-11.628zm29.232 27.792l12.564-27.792h-25.128zm-17.496-32.4l7.344-13.824h-9.432l-10.368 13.824h12.456zm24.3 28.548l22.428-23.94h-11.628zm-19.08-28.548h24.552l-7.344-13.824h-9.864zm29.772 0h12.456l-10.368-13.824h-9.432zm5.076-17.496l13.824 18.432q.504.648.468 1.494t-.612 1.458l-34.56 36.864q-.648.72-1.692.72t-1.692-.72l-34.56-36.864q-.576-.612-.612-1.458t.468-1.494l13.824-18.432q.648-.936 1.836-.936h41.472q1.188 0 1.836.936z","SHIP":"M65.196-8.459q.684-.684 1.62-.684t1.62.684l4.608 4.608-3.24 3.24-2.988-2.988-2.988 2.988q-.648.684-1.62.684t-1.62-.684l-2.988-2.988-2.988 2.988q-.684.684-1.62.684t-1.62-.684l-2.988-2.988-2.988 2.988q-.684.684-1.62.684t-1.62-.684l-2.988-2.988-2.988 2.988q-.684.684-1.62.684t-1.62-.684l-2.988-2.988-2.988 2.988q-.684.684-1.62.684t-1.62-.684l-2.988-2.988-2.988 2.988q-.684.684-1.62.684t-1.62-.684l-2.988-2.988-2.988 2.988q-.684.684-1.62.684t-1.62-.684l-4.608-4.608 3.24-3.24 2.988 2.988 2.988-2.988q.684-.684 1.62-.684t1.62.684l2.988 2.988 2.988-2.988q.684-.684 1.62-.684t1.62.684l2.988 2.988 2.988-2.988q.684-.684 1.62-.684t1.62.684l2.988 2.988 2.988-2.988q.684-.684 1.62-.684t1.62.684l2.988 2.988 2.988-2.988q.684-.684 1.62-.684t1.62.684l2.988 2.988 2.988-2.988q.684-.684 1.62-.684t1.62.684l2.988 2.988zm-56.664-1.368q-.684.684-1.62.684t-1.62-.684l-4.608-4.608 3.24-3.24 2.988 2.952 2.988-2.952q.684-.684 1.62-.684t1.62.684l2.988 2.952 2.304-2.304v-10.548l-7.56-11.304q-.612-.936-.252-2.034t1.44-1.458l6.372-2.088v-10.764h4.608v-4.608h9.216v-4.608h9.216v4.608h9.216v4.608h4.608v10.764l6.372 2.088q1.08.36 1.44 1.458t-.252 2.034l-7.56 11.304v10.548l.684-.648q.684-.684 1.62-.684t1.62.684l2.988 2.952 2.988-2.952q.684-.684 1.62-.684t1.62.684l4.608 4.608-3.24 3.24-2.988-2.988-2.988 2.988q-.648.684-1.62.684t-1.62-.684l-2.988-2.988-2.988 2.988q-.684.684-1.62.684t-1.62-.684l-2.988-2.988-2.988 2.988q-.684.684-1.62.684t-1.62-.684l-2.988-2.988-2.988 2.988q-.684.684-1.62.684t-1.62-.684l-2.988-2.988-2.988 2.988q-.684.684-1.62.684t-1.62-.684l-2.988-2.988-2.988 2.988q-.684.684-1.62.684t-1.62-.684l-2.988-2.988zm14.508-40.788v4.608l13.824-4.608 13.824 4.608v-4.608h-4.608v-4.608h-18.432v4.608h-4.608z","USER_SECRET":"M20.736-9.143l3.456-16.128-3.456-4.608-4.608-2.304zm9.216 0l4.608-23.04-4.608 2.304-3.456 4.608zm5.76-36.36q-.072-.144-.144-.216-.36-.288-3.456-.288-2.52 0-6.012.684-.252.072-.756.072t-.756-.072q-3.492-.684-6.012-.684-3.096 0-3.456.288-.072.072-.144.216.072.648.144.972.072.108.27.234t.27.378q.072.144.27.738t.252.738.27.612.306.612.324.504.432.486.504.342.63.288.738.144.882.072q1.296 0 2.124-.45t1.17-1.08.522-1.242.414-1.062.63-.45h.432q.396 0 .63.45t.414 1.062.522 1.242 1.17 1.08 2.124.45q.468 0 .882-.072t.738-.144.63-.288.504-.342.432-.486.324-.504.306-.612.27-.612.252-.738.27-.738q.072-.252.27-.378t.27-.234q.072-.324.144-.972zm14.976 31.644q0 4.356-2.628 6.84t-6.984 2.484h-31.464q-4.356 0-6.984-2.484t-2.628-6.84q0-2.196.162-4.248t.684-4.518 1.35-4.446 2.286-3.726 3.366-2.682l-3.24-7.92h7.704q-.792-2.304-.792-4.608 0-.432.072-1.152-6.984-1.44-6.984-3.456 0-2.052 7.56-3.564.612-2.232 1.854-4.824t2.538-4.104q1.152-1.332 2.736-1.332 1.08 0 3.024 1.116t3.024 1.116 3.024-1.116 3.024-1.116q1.584 0 2.736 1.332 1.296 1.512 2.538 4.104t1.854 4.824q7.56 1.512 7.56 3.564 0 2.016-6.984 3.456.252 2.916-.72 5.76h7.704l-2.952 8.1q2.268 1.188 3.87 3.474t2.358 5.166 1.044 5.454.288 5.346z","MOTORCYCLE":"M82.836-27.143q.432 3.708-.792 7.146t-3.564 5.886-5.706 3.816-7.074 1.116q-5.796-.396-10.062-4.5t-4.842-9.864q-.432-3.996.99-7.578t4.266-6.138l-2.556-3.852q-3.456 2.88-5.436 6.984t-1.98 8.784q0 .972-.666 1.674t-1.638.702h-11.7q-.828 5.904-5.364 9.864t-10.584 3.96q-6.66 0-11.394-4.734t-4.734-11.394 4.734-11.394 11.394-4.734q2.736 0 5.472.972l.864-1.62q-4.428-3.96-10.944-3.96h-2.304q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684h4.608q2.808 0 5.22.486t4.194 1.386 2.574 1.422 1.836 1.314h22.572l-3.06-4.608h-7.992q-1.08 0-1.764-.81t-.504-1.89q.144-.828.828-1.368t1.548-.54h9.108q1.188 0 1.908 1.008l2.52 3.78 4.104-4.104q.684-.684 1.656-.684h3.636q.936 0 1.62.684t.684 1.62v4.608q0 .936-.684 1.62t-1.62.684h-6.444l4.14 6.192q4.716-2.268 9.9-1.296 5.148.936 8.784 4.842t4.248 9.126zm-66.708 13.392q4.14 0 7.308-2.61t3.996-6.606h-11.304q-1.26 0-1.98-1.116-.648-1.152-.036-2.268l5.292-9.972q-1.692-.468-3.276-.468-4.752 0-8.136 3.384t-3.384 8.136 3.384 8.136 8.136 3.384zm50.688 0q4.752 0 8.136-3.384t3.384-8.136-3.384-8.136-8.136-3.384q-2.16 0-4.356.864l6.264 9.36q.54.828.36 1.764t-.972 1.44q-.54.396-1.296.396-1.26 0-1.908-1.044l-6.264-9.36q-3.348 3.42-3.348 8.1 0 4.752 3.384 8.136t8.136 3.384z","STREET_VIEW":"M50.688-9.143q0 2.268-2.214 4.086t-5.904 2.916-8.1 1.656-9.126.558-9.126-.558-8.1-1.656-5.904-2.916-2.214-4.086q0-1.764 1.188-3.186t3.276-2.394 4.248-1.602 4.716-1.062q.936-.18 1.728.378t.936 1.494q.18.936-.378 1.728t-1.494.936q-2.088.36-3.816.846t-2.754.918-1.746.846-.99.702-.306.432q.108.396.972.954t2.628 1.188 4.104 1.17 5.778.9 7.254.36 7.254-.36 5.778-.9 4.104-1.188 2.628-1.206.972-.99q-.036-.144-.306-.396t-.99-.684-1.746-.846-2.754-.9-3.816-.846q-.936-.144-1.494-.936t-.378-1.728q.144-.936.936-1.494t1.728-.378q2.556.432 4.716 1.062t4.248 1.602 3.276 2.394 1.188 3.186zm-13.824-32.256v13.824q0 .936-.684 1.62t-1.62.684h-2.304v13.824q0 .936-.684 1.62t-1.62.684h-9.216q-.936 0-1.62-.684t-.684-1.62v-13.824h-2.304q-.936 0-1.62-.684t-.684-1.62v-13.824q0-1.908 1.35-3.258t3.258-1.35h13.824q1.908 0 3.258 1.35t1.35 3.258zm-3.456-13.824q0 3.348-2.358 5.706t-5.706 2.358-5.706-2.358-2.358-5.706 2.358-5.706 5.706-2.358 5.706 2.358 2.358 5.706z","HEARTBEAT":"M46.08-27.575h10.98q-.18.216-.36.378t-.324.27l-.108.144-22.428 21.6q-.648.648-1.584.648t-1.584-.648l-22.464-21.672q-.18-.072-.756-.72h13.284q.792 0 1.422-.486t.81-1.242l2.52-10.116 6.84 24.012q.216.72.828 1.188t1.404.468q.756 0 1.368-.468t.828-1.188l5.256-17.46 2.016 4.032q.648 1.26 2.052 1.26zm18.432-15.408q0 5.22-3.708 10.8h-13.284l-3.996-7.956q-.288-.612-.918-.972t-1.314-.288q-1.62.18-2.016 1.656l-4.644 15.48-7.056-24.696q-.216-.72-.846-1.188t-1.422-.468-1.404.486-.792 1.242l-4.176 16.704h-15.228q-3.708-5.58-3.708-10.8 0-7.92 4.572-12.384t12.636-4.464q2.232 0 4.554.774t4.32 2.088 3.438 2.466 2.736 2.448q1.296-1.296 2.736-2.448t3.438-2.466 4.32-2.088 4.554-.774q8.064 0 12.636 4.464t4.572 12.384z","VENUS":"M41.472-43.703q0 7.956-5.31 13.842t-13.122 6.75v9.36h8.064q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-8.064v8.064q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-8.064h-8.064q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h8.064v-9.36q-5.4-.576-9.774-3.708t-6.696-8.064-1.89-10.512q.396-4.824 2.898-8.964t6.552-6.768 8.838-3.168q6.12-.684 11.484 1.944t8.496 7.632 3.132 11.016zm-36.864 0q0 6.66 4.734 11.394t11.394 4.734 11.394-4.734 4.734-11.394-4.734-11.394-11.394-4.734-11.394 4.734-4.734 11.394z","MARS":"M52.992-59.831q.936 0 1.62.684t.684 1.62v14.976q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-9.432l-13.752 13.788q4.536 5.616 4.536 12.924 0 4.212-1.638 8.046t-4.428 6.624-6.624 4.428-8.046 1.638-8.046-1.638-6.624-4.428-4.428-6.624-1.638-8.046 1.638-8.046 4.428-6.624 6.624-4.428 8.046-1.638q7.308 0 12.924 4.536l13.752-13.752h-9.396q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h14.976zm-32.256 50.688q6.66 0 11.394-4.734t4.734-11.394-4.734-11.394-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734z","MERCURY":"M29.88-53.063q5.22 2.592 8.406 7.578t3.186 10.998q0 7.956-5.31 13.842t-13.122 6.75v4.752h3.456q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-3.456v3.456q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-3.456h-3.456q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h3.456v-4.752q-7.812-.864-13.122-6.75t-5.31-13.842q0-6.012 3.186-10.998t8.406-7.578q-5.94-3.456-8.208-9.828-.216-.576.126-1.062t.954-.486h2.484q.756 0 1.044.72 1.584 3.816 5.04 6.156t7.704 2.34 7.704-2.34 5.04-6.156q.288-.72 1.332-.72h2.196q.612 0 .954.486t.126 1.062q-2.268 6.372-8.208 9.828zm-9.144 34.704q6.66 0 11.394-4.734t4.734-11.394-4.734-11.394-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734z","TRANSGENDER":"M36.864-63.287q0-.504.324-.828t.828-.324h10.368q.936 0 1.62.684t.684 1.62v10.368q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-4.824l-9.144 9.18q4.536 5.688 4.536 12.924 0 7.956-5.31 13.842t-13.122 6.75v4.752h3.456q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-3.456v3.456q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-3.456h-3.456q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h3.456v-4.752q-5.364-.576-9.738-3.708t-6.714-8.046-1.908-10.494q.576-7.344 5.76-12.726t12.492-6.21q4.248-.504 8.208.684t7.128 3.708l9.18-9.144h-4.824q-.504 0-.828-.324t-.324-.828v-2.304zm-16.128 44.928q6.66 0 11.394-4.734t4.734-11.394-4.734-11.394-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734z","TRANSGENDER_ALT":"M46.08-63.287q0-.504.324-.828t.828-.324h10.368q.936 0 1.62.684t.684 1.62v10.368q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-4.824l-9.144 9.18q4.536 5.688 4.536 12.924 0 7.956-5.31 13.842t-13.122 6.75v4.752h3.456q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-3.456v3.456q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-3.456h-3.456q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h3.456v-4.752q-7.812-.864-13.122-6.75t-5.31-13.842q0-7.236 4.536-12.924l-1.872-1.908-3.636 3.996q-.324.36-.792.378t-.828-.27l-1.728-1.584q-.36-.288-.378-.774t.306-.846l3.78-4.14-3.996-4.032v4.824q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-10.368q0-.936.684-1.62t1.62-.684h10.368q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-4.788l3.816 3.852 3.096-3.384q.324-.36.792-.378t.828.27l1.728 1.584q.36.288.378.774t-.306.846l-3.24 3.564 2.052 2.016q5.688-4.536 12.924-4.536t12.924 4.536l9.18-9.144h-4.824q-.504 0-.828-.324t-.324-.828v-2.304zm-16.128 44.928q6.66 0 11.394-4.734t4.734-11.394-4.734-11.394-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734z","VENUS_DOUBLE":"M64.44-45.395q.432 5.58-1.89 10.512t-6.696 8.064-9.774 3.708v9.36h8.064q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-8.064v8.064q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-8.064h-18.432v8.064q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-8.064h-8.064q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h8.064v-9.36q-5.4-.576-9.774-3.708t-6.696-8.064-1.89-10.512q.612-7.416 5.922-12.834t12.69-6.102q7.416-.756 13.572 3.384 6.156-4.14 13.572-3.384 7.38.684 12.69 6.102t5.922 12.834zm-32.184 12.96q4.608-4.716 4.608-11.268t-4.608-11.268q-4.608 4.716-4.608 11.268t4.608 11.268zm-11.52 4.86q4.14 0 7.848-2.052-5.544-5.94-5.544-14.076 0-8.064 5.544-14.076-3.708-2.052-7.848-2.052-6.66 0-11.394 4.734t-4.734 11.394 4.734 11.394 11.394 4.734zm20.736 13.824v-9.36q-4.932-.54-9.216-3.384-4.284 2.844-9.216 3.384v9.36h18.432zm2.304-13.824q6.66 0 11.394-4.734t4.734-11.394-4.734-11.394-11.394-4.734q-4.14 0-7.848 2.052 5.544 6.012 5.544 14.076 0 8.136-5.544 14.076 3.708 2.052 7.848 2.052z","MARS_DOUBLE":"M55.296-49.463q0-.504.324-.828t.828-.324h10.368q.936 0 1.62.684t.684 1.62v10.368q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-4.824l-9.144 9.18q2.736 3.42 3.87 7.704t.342 8.892q-1.116 6.552-5.976 11.232t-11.448 5.616q-7.56 1.044-13.842-2.88t-8.694-10.8q-4.212-.216-7.956-2.07t-6.39-4.788-4.086-6.93-1.152-8.28q.324-4.86 2.808-9.072t6.552-6.894 8.928-3.222q4.248-.504 8.19.684t7.146 3.708l9.18-9.144h-4.824q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h10.368q.936 0 1.62.684t.684 1.62v10.368q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-4.824l-9.144 9.18q2.124 2.664 3.348 6.084 6.552.324 11.808 4.464l9.18-9.144h-4.824q-.504 0-.828-.324t-.324-.828v-2.304zm-18.432 14.976q0-.72-.144-2.088-5.832.9-9.756 5.4t-3.924 10.512q0 .72.144 2.088 5.832-.9 9.756-5.4t3.924-10.512zm-32.256 0q0 6.048 3.996 10.584t9.936 5.364q-.108-1.044-.108-2.124 0-7.56 4.86-13.302t12.168-7.074q-1.908-4.32-5.886-6.948t-8.838-2.628q-6.66 0-11.394 4.734t-4.734 11.394zm34.56 29.952q6.66 0 11.394-4.734t4.734-11.394q0-6.048-3.996-10.584t-9.936-5.364q.108 1.044.108 2.124 0 7.56-4.86 13.302t-12.168 7.074q1.908 4.32 5.886 6.948t8.838 2.628z","VENUS_MARS":"M59.904-63.287q0-.504.324-.828t.828-.324h10.368q.936 0 1.62.684t.684 1.62v10.368q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-4.824l-9.144 9.18q2.736 3.42 3.87 7.704t.342 8.892q-1.152 6.48-5.922 11.16t-11.286 5.652q-8.028 1.224-14.724-3.24-4.212 2.808-9.216 3.348v4.752h3.456q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-3.456v3.456q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-3.456h-3.456q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h3.456v-4.752q-5.58-.612-10.062-3.942t-6.732-8.55-1.422-11.052q.9-6.732 5.742-11.61t11.538-5.922q8.064-1.224 14.76 3.24 5.256-3.492 11.52-3.492 7.236 0 12.924 4.536l9.18-9.144h-4.824q-.504 0-.828-.324t-.324-.828v-2.304zm-27.648 40.068q4.608-4.716 4.608-11.268t-4.608-11.268q-4.608 4.716-4.608 11.268t4.608 11.268zm-27.648-11.268q0 6.66 4.734 11.394t11.394 4.734q4.212 0 7.848-2.052-5.544-6.012-5.544-14.076t5.544-14.076q-3.636-2.052-7.848-2.052-6.66 0-11.394 4.734t-4.734 11.394zm39.168 16.128q6.66 0 11.394-4.734t4.734-11.394-4.734-11.394-11.394-4.734q-4.212 0-7.848 2.052 5.544 6.012 5.544 14.076t-5.544 14.076q3.636 2.052 7.848 2.052z","MARS_STROKE":"M52.992-59.831q.936 0 1.62.684t.684 1.62v14.976q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-9.432l-7.668 7.704 5.04 5.04q.324.36.324.828t-.324.792l-1.656 1.656q-.324.324-.792.324t-.828-.324l-5.04-5.076-2.808 2.844q4.536 5.616 4.536 12.924 0 4.212-1.638 8.046t-4.428 6.624-6.624 4.428-8.046 1.638-8.046-1.638-6.624-4.428-4.428-6.624-1.638-8.046 1.638-8.046 4.428-6.624 6.624-4.428 8.046-1.638q7.308 0 12.924 4.536l2.808-2.808-6.192-6.192q-.324-.36-.324-.828t.324-.792l1.656-1.656q.324-.324.792-.324t.828.324l6.192 6.192 7.668-7.668h-9.396q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h14.976zm-32.256 50.688q6.66 0 11.394-4.734t4.734-11.394-4.734-11.394-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734z","MARS_STROKE_V":"M23.04-41.255q7.812.864 13.122 6.75t5.31 13.842q0 6.012-3.132 11.016t-8.496 7.632-11.484 1.944q-4.788-.54-8.838-3.168t-6.552-6.768-2.898-8.964q-.432-5.58 1.89-10.512t6.696-8.064 9.774-3.708v-4.752h-5.76q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h5.76v-5.94l-3.312 3.312q-.36.324-.828.324t-.792-.324l-1.656-1.656q-.324-.324-.324-.792t.324-.828l7.272-7.236q.684-.684 1.62-.684t1.62.684l7.272 7.236q.324.36.324.828t-.324.792l-1.656 1.656q-.324.324-.792.324t-.828-.324l-3.312-3.312v5.94h5.76q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-5.76v4.752zm-2.304 36.72q6.66 0 11.394-4.734t4.734-11.394-4.734-11.394-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734z","MARS_STROKE_H":"M68.436-31.499q.684.684.684 1.62t-.684 1.62l-10.584 10.584q-.324.36-.81.36t-.81-.36l-1.62-1.62q-.36-.324-.36-.81t.36-.81l6.66-6.66h-10.584v8.064q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-8.064h-4.752q-.864 7.812-6.75 13.122t-13.842 5.31q-6.012 0-11.016-3.132t-7.632-8.496-1.944-11.484q.54-4.788 3.168-8.838t6.768-6.552 8.964-2.898q5.58-.432 10.512 1.89t8.064 6.696 3.708 9.774h4.752v-8.064q0-.504.324-.828t.828-.324h2.304q.504 0 .828.324t.324.828v8.064h10.584l-6.66-6.66q-.36-.324-.36-.81t.36-.81l1.62-1.62q.324-.36.81-.36t.81.36zm-47.7 17.748q6.66 0 11.394-4.734t4.734-11.394-4.734-11.394-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734z","NEUTER":"M41.472-43.703q0 7.956-5.31 13.842t-13.122 6.75v22.032q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-22.032q-7.812-.864-13.122-6.75t-5.31-13.842q0-4.212 1.638-8.046t4.428-6.624 6.624-4.428 8.046-1.638 8.046 1.638 6.624 4.428 4.428 6.624 1.638 8.046zm-20.736 16.128q6.66 0 11.394-4.734t4.734-11.394-4.734-11.394-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734z","GENDERLESS":"M36.864-29.879q0-6.66-4.734-11.394t-11.394-4.734-11.394 4.734-4.734 11.394 4.734 11.394 11.394 4.734 11.394-4.734 4.734-11.394zm4.608 0q0 4.212-1.638 8.046t-4.428 6.624-6.624 4.428-8.046 1.638-8.046-1.638-6.624-4.428-4.428-6.624-1.638-8.046 1.638-8.046 4.428-6.624 6.624-4.428 8.046-1.638 8.046 1.638 6.624 4.428 4.428 6.624 1.638 8.046z","FACEBOOK_OFFICIAL":"M52.236-59.831q1.26 0 2.16.9t.9 2.16v49.176q0 1.26-.9 2.16t-2.16.9h-14.076v-21.42h7.164l1.08-8.352h-8.244v-5.328q0-2.016.846-3.024t3.294-1.008l4.392-.036v-7.452q-2.268-.324-6.408-.324-4.896 0-7.83 2.88t-2.934 8.136v6.156h-7.2v8.352h7.2v21.42h-26.46q-1.26 0-2.16-.9t-.9-2.16v-49.176q0-1.26.9-2.16t2.16-.9h49.176z","PINTEREST_P":"M0-42.947q0-3.888 1.35-7.326t3.726-5.994 5.472-4.428 6.66-2.808 7.272-.936q5.688 0 10.584 2.394t7.956 6.966 3.06 10.332q0 3.456-.684 6.768t-2.16 6.372-3.6 5.382-5.22 3.708-6.804 1.386q-2.448 0-4.86-1.152t-3.456-3.168q-.36 1.404-1.008 4.05t-.846 3.42-.738 2.556-.936 2.556-1.152 2.25-1.656 2.79-2.232 3.114l-.504.18-.324-.36q-.54-5.652-.54-6.768 0-3.312.774-7.434t2.394-10.35 1.872-7.308q-1.152-2.34-1.152-6.084 0-2.988 1.872-5.616t4.752-2.628q2.196 0 3.42 1.458t1.224 3.69q0 2.376-1.584 6.876t-1.584 6.732q0 2.268 1.62 3.762t3.924 1.494q1.98 0 3.672-.9t2.826-2.448 2.016-3.42 1.368-3.978.72-3.996.234-3.582q0-6.228-3.942-9.702t-10.278-3.474q-7.2 0-12.024 4.662t-4.824 11.826q0 1.584.45 3.06t.972 2.34.972 1.638.45 1.098q0 1.008-.54 2.628t-1.332 1.62q-.072 0-.612-.108-1.836-.54-3.258-2.016t-2.196-3.402-1.17-3.888-.396-3.834z","WHATSAPP":"M35.46-29.375q.468 0 3.51 1.584t3.222 1.908q.072.18.072.54 0 1.188-.612 2.736-.576 1.404-2.556 2.358t-3.672.954q-2.052 0-6.84-2.232-3.528-1.62-6.12-4.248t-5.328-6.66q-2.592-3.852-2.556-6.984v-.288q.108-3.276 2.664-5.688.864-.792 1.872-.792.216 0 .648.054t.684.054q.684 0 .954.234t.558.99q.288.72 1.188 3.168t.9 2.7q0 .756-1.242 2.07t-1.242 1.674q0 .252.18.54 1.224 2.628 3.672 4.932 2.016 1.908 5.436 3.636.432.252.792.252.54 0 1.944-1.746t1.872-1.746zm-7.308 19.08q4.572 0 8.766-1.8t7.218-4.824 4.824-7.218 1.8-8.766-1.8-8.766-4.824-7.218-7.218-4.824-8.766-1.8-8.766 1.8-7.218 4.824-4.824 7.218-1.8 8.766q0 7.308 4.32 13.248l-2.844 8.388 8.712-2.772q5.688 3.744 12.42 3.744zm0-49.752q5.508 0 10.53 2.16t8.658 5.796 5.796 8.658 2.16 10.53-2.16 10.53-5.796 8.658-8.658 5.796-10.53 2.16q-7.02 0-13.14-3.384l-15.012 4.824 4.896-14.58q-3.888-6.408-3.888-14.004 0-5.508 2.16-10.53t5.796-8.658 8.658-5.796 10.53-2.16z","SERVER":"M4.608-13.751h36.864v-4.608h-36.864v4.608zm0-18.432h36.864v-4.608h-36.864v4.608zm56.448 16.128q0-1.44-1.008-2.448t-2.448-1.008-2.448 1.008-1.008 2.448 1.008 2.448 2.448 1.008 2.448-1.008 1.008-2.448zm-56.448-34.56h36.864v-4.608h-36.864v4.608zm56.448 16.128q0-1.44-1.008-2.448t-2.448-1.008-2.448 1.008-1.008 2.448 1.008 2.448 2.448 1.008 2.448-1.008 1.008-2.448zm0-18.432q0-1.44-1.008-2.448t-2.448-1.008-2.448 1.008-1.008 2.448 1.008 2.448 2.448 1.008 2.448-1.008 1.008-2.448zm3.456 29.952v13.824h-64.512v-13.824h64.512zm0-18.432v13.824h-64.512v-13.824h64.512zm0-18.432v13.824h-64.512v-13.824h64.512z","USER_PLUS":"M25.344-32.183q-5.724 0-9.774-4.05t-4.05-9.774 4.05-9.774 9.774-4.05 9.774 4.05 4.05 9.774-4.05 9.774-9.774 4.05zm34.56 4.608h12.672q.468 0 .81.342t.342.81v6.912q0 .468-.342.81t-.81.342h-12.672v12.672q0 .468-.342.81t-.81.342h-6.912q-.468 0-.81-.342t-.342-.81v-12.672h-12.672q-.468 0-.81-.342t-.342-.81v-6.912q0-.468.342-.81t.81-.342h12.672v-12.672q0-.468.342-.81t.81-.342h6.912q.468 0 .81.342t.342.81v12.672zm-26.496 8.064q0 1.872 1.368 3.24t3.24 1.368h9.216v8.568q-2.448 1.8-6.156 1.8h-31.464q-4.356 0-6.984-2.484t-2.628-6.84q0-1.908.126-3.726t.504-3.924.954-3.906 1.548-3.51 2.232-2.916 3.078-1.926 4.014-.72q.684 0 1.404.612 2.844 2.196 5.562 3.294t5.922 1.098 5.922-1.098 5.562-3.294q.72-.612 1.404-.612 4.752 0 7.812 3.456h-8.028q-1.872 0-3.24 1.368t-1.368 3.24v6.912z","USER_TIMES":"M25.344-32.183q-5.724 0-9.774-4.05t-4.05-9.774 4.05-9.774 9.774-4.05 9.774 4.05 4.05 9.774-4.05 9.774-9.774 4.05zm38.772 11.52l8.964 8.964q.324.324.324.828 0 .468-.324.792l-4.896 4.896q-.324.324-.792.324-.504 0-.828-.324l-8.964-8.964-8.964 8.964q-.324.324-.828.324-.468 0-.792-.324l-4.896-4.896q-.324-.324-.324-.792 0-.504.324-.828l8.964-8.964-8.964-8.964q-.324-.324-.324-.828 0-.468.324-.792l4.896-4.896q.324-.324.792-.324.504 0 .828.324l8.964 8.964 8.964-8.964q.324-.324.828-.324.468 0 .792.324l4.896 4.896q.324.324.324.792 0 .504-.324.828zm-17.928 0l-6.516 6.516q-1.332 1.332-1.332 3.276 0 1.908 1.332 3.24l2.988 2.988q-.756.108-1.584.108h-31.464q-4.356 0-6.984-2.484t-2.628-6.84q0-1.908.126-3.726t.504-3.924.954-3.906 1.548-3.51 2.232-2.916 3.078-1.926 4.014-.72q.684 0 1.404.612 5.544 4.392 11.484 4.392t11.484-4.392q.72-.612 1.404-.612 1.008 0 2.052.216-1.008.972-1.476 1.8t-.468 2.016q0 1.944 1.332 3.276z","HOTEL":"M9.216-27.575h62.208q.936 0 1.62.684t.684 1.62v16.128h-9.216v-9.216h-55.296v9.216h-9.216v-43.776q0-.936.684-1.62t1.62-.684h4.608q.936 0 1.62.684t.684 1.62v25.344zm20.736-11.52q0-3.816-2.7-6.516t-6.516-2.7-6.516 2.7-2.7 6.516 2.7 6.516 6.516 2.7 6.516-2.7 2.7-6.516zm43.776 9.216v-2.304q0-5.724-4.05-9.774t-9.774-4.05h-25.344q-.936 0-1.62.684t-.684 1.62v13.824h41.472z","VIACOIN":"M55.296-64.439l-6.912 16.128h6.912v6.912h-9.864l-1.98 4.608h11.844v6.912h-14.796l-12.852 29.952-12.852-29.952h-14.796v-6.912h11.844l-1.98-4.608h-9.864v-6.912h6.912l-6.912-16.128h9.216l11.628 27.648h13.608l11.628-27.648h9.216zm-27.648 43.776l3.888-9.216h-7.776z","TRAIN":"M39.168-64.439q6.66 0 11.394 3.366t4.734 8.154v32.256q0 4.68-4.518 7.992t-10.998 3.492l7.668 7.272q.576.54.288 1.26t-1.08.72h-38.016q-.792 0-1.08-.72t.288-1.26l7.668-7.272q-6.48-.18-10.998-3.492t-4.518-7.992v-32.256q0-4.788 4.734-8.154t11.394-3.366h23.04zm-11.52 48.384q2.88 0 4.896-2.016t2.016-4.896-2.016-4.896-4.896-2.016-4.896 2.016-2.016 4.896 2.016 4.896 4.896 2.016zm20.736-20.736v-18.432h-41.472v18.432h41.472z","SUBWAY":"M39.168-64.439q6.66 0 11.394 3.366t4.734 8.154v32.256q0 4.68-4.518 7.992t-10.998 3.492l7.668 7.272q.576.54.288 1.26t-1.08.72h-38.016q-.792 0-1.08-.72t.288-1.26l7.668-7.272q-6.48-.18-10.998-3.492t-4.518-7.992v-32.256q0-4.788 4.734-8.154t11.394-3.366h23.04zm-28.8 47.232q2.376 0 4.068-1.692t1.692-4.068-1.692-4.068-4.068-1.692-4.068 1.692-1.692 4.068 1.692 4.068 4.068 1.692zm14.976-19.584v-18.432h-19.584v18.432h19.584zm19.584 19.584q2.376 0 4.068-1.692t1.692-4.068-1.692-4.068-4.068-1.692-4.068 1.692-1.692 4.068 1.692 4.068 4.068 1.692zm5.76-19.584v-18.432h-20.736v18.432h20.736z","MEDIUM":"M21.492-49.283v42.228q0 .9-.45 1.53t-1.314.63q-.612 0-1.188-.288l-16.74-8.388q-.756-.36-1.278-1.206t-.522-1.674v-41.04q0-.72.36-1.224t1.044-.504q.504 0 1.584.54l18.396 9.216q.108.108.108.18zm2.304 3.636l19.224 31.176-19.224-9.576v-21.6zm40.716.648v37.944q0 .9-.504 1.458t-1.368.558-1.692-.468l-15.876-7.92zm-.108-4.32q0 .108-9.234 15.102t-10.818 17.55l-14.04-22.824 11.664-18.972q.612-1.008 1.872-1.008.504 0 .936.216l19.476 9.72q.144.072.144.216z","YC":"M29.124-28.295l9.576-17.964h-4.032l-5.652 11.232q-.864 1.728-1.584 3.312l-1.512-3.312-5.58-11.232h-4.32l9.468 17.748v11.664h3.636v-11.448zm26.172-31.536v55.296h-55.296v-55.296h55.296z","OPTIN_MONSTER":"M17.208-4.139q-.288.576-.972 1.242t-1.332.918q-.9.324-1.854-.126t-1.026-1.134q-.036-.792 1.44-1.98t2.448-1.368q.828-.144 1.224.774t.072 1.674zm48.276 0q.252.576.936 1.242t1.368.918q.9.324 1.854-.126t.99-1.134q.072-.792-1.422-1.98t-2.466-1.368q-.792-.144-1.188.774t-.072 1.674zm1.728-3.924q.468.972 2.034 2.142t2.79 1.494q1.62.468 2.952-.162t1.332-1.818q0-1.656-2.43-3.618t-4.158-2.142q-1.44-.18-2.286 1.35t-.234 2.754zm-51.804 0q-.468.972-2.016 2.142t-2.772 1.494q-1.62.468-2.952-.162t-1.332-1.818q0-1.656 2.43-3.618t4.158-2.142q1.44-.18 2.268 1.35t.216 2.754zm26.28-40.464h.036q-1.476 0-2.736.54.972.288 1.584 1.098t.612 1.782q0 1.26-.972 2.16t-2.34.9q-1.872 0-2.88-1.548-.18.828-.18 1.512 0 2.664 2.016 4.554t4.86 1.89q2.88 0 4.896-1.89t2.016-4.554-2.016-4.554-4.896-1.89zm10.944-7.848q-3.564-3.924-7.938-4.734t-8.838 1.602q.972-2.16 2.97-3.474t4.248-1.422 4.374.612 3.582 2.682 1.602 4.734zm27 44.604q.288.396-.396 1.512.252.828.252 1.44.036 2.016-1.602 4.05t-3.942 3.294-4.248 1.332q-1.728.072-3.312-.774t-2.376-2.358q-24.732.9-45.324 0-.828 1.476-2.394 2.34t-3.33.792q-3.096-.108-6.462-2.898t-3.33-5.778q.072-.792.252-1.44-.684-1.116-.396-1.512.216-.36 1.116-.036.504-.792 1.476-1.836-.252-1.044.072-1.368.396-.36 1.404.144 1.044-.72 2.124-1.224 0-1.044.468-1.332.828-.432 1.836.576 1.26-.18 2.196.072.648.144 1.368.684v-2.628q-.396 0-.648-.072-1.908-.36-3.492-1.602t-1.98-3.15q-.324-1.368 0-2.916.54-2.232 3.348-3.42.072-.612.684-1.278t1.296-.846 1.188.27.684 1.098h.468q1.656.18 2.16.828.108.108.18.252.36-.036 1.098-.126t1.098-.126q-.54-.396-1.08-.612-.828-1.44-3.276-1.548 0-.216.036-.36-2.232-.072-4.266-.666t-3.042-1.71q-1.152-1.296-1.53-3.312t-.09-4.032q.576-4.536 3.24-6.444.828-.576 1.872-.162t1.152 1.458l.054.504.09.756.108.72.198.684.306.36q.972.504 2.736.432 1.728-1.656 3.528-2.664-1.44-.144-5.832.504l1.692-1.656q2.196-2.088 5.868-3.996 5.22-2.628 10.152-3.096-.72-.288-1.476-.558t-1.692-.504-1.53-.378-1.71-.396-1.548-.36q21.42-4.536 32.544 5.004 3.528 3.024 5.688 7.992 3.06.36 4.356-.324h.036q.18-.108.306-.36t.198-.684.108-.702.108-.774l.036-.504q.108-1.008 1.152-1.44t1.872.18q2.628 1.872 3.276 6.408.252 2.052-.126 4.068t-1.53 3.276q-1.008 1.152-3.006 1.746t-4.158.666v.36q-2.556.072-3.42 1.548-.504.18-1.116.612.396.036 1.152.126t1.08.126q.036-.144.18-.288.576-.648 2.16-.828h.468q.18-.648.684-1.08t1.188-.288 1.296.828.684 1.296q2.844 1.152 3.348 3.42.324 1.44.036 2.916-.432 1.908-2.016 3.168t-3.492 1.584q-.36.072-.612.072 0 1.764-.036 2.628.72-.54 1.368-.684.936-.252 2.196-.072 1.008-1.008 1.836-.576.504.324.504 1.332 1.188.576 2.124 1.224.972-.468 1.368-.144.36.36.072 1.368 1.008 1.08 1.476 1.836.828-.288 1.116.036zm-9.9-34.272q0 1.044-.324 1.944 2.952 1.152 4.032 4.752.144-1.332-.342-3.546t-1.494-3.258q-.72-.684-1.296-.612t-.576.72zm-2.808 3.6q1.26 1.512 1.71 3.906t-.018 4.482q2.412-.468 3.492-1.62.468-.504.648-1.008-.108-2.304-1.116-4.122t-2.844-2.394q-.54.54-1.872.756zm-1.332.144q-1.08 0-1.584-.036 1.512 4.14 1.908 8.604.756 0 1.548-.108.576-2.448.036-4.86t-1.908-3.6zm-56.304 2.952q1.08-3.6 4.032-4.752-.324-.9-.324-1.944 0-.648-.594-.72t-1.278.612q-1.008 1.044-1.494 3.258t-.342 3.546zm1.296 3.672q1.044 1.116 3.492 1.62-.468-2.088-.018-4.482t1.71-3.906q-1.332-.216-1.872-.756-1.836.576-2.826 2.376t-1.134 4.14q.324.612.648 1.008zm6.372 1.944q.504-4.464 2.628-8.46-.684.144-1.98.648l-1.62.684v-.036q-1.656 3.204-.72 7.056.9.108 1.692.108zm34.668 1.404q.288 1.368.594 3.906t.414 3.222q.108.648.342.774t.846-.162q1.44-.72 2.232-3.078t.828-4.518q-.864-.072-5.256-.144zm-10.152-23.076q-4.176 0-7.164 2.97t-2.988 7.146q0 4.212 2.988 7.182t7.164 2.97 7.164-2.97 2.988-7.182q0-4.176-2.988-7.146t-7.164-2.97zm8.208 23.004q-3.816-.072-7.596 0v-.036q-.036.972.09 3.096t.486 2.376q1.044.504 3.366.522t3.438-.378q.324-.108.396-1.404t-.018-2.502-.162-1.674zm-9.648 7.164q.288-.144.342-1.728t-.018-3.168-.144-2.268v-.036q-7.632.108-7.704.108-.144.72-.252 2.232t0 2.988.504 1.656q1.224.54 3.636.576t3.636-.36zm-14.184-6.804q-.576 2.124.162 4.266t2.79 3.042q.54.288.864.18t.432-.756q.108-.576.288-3.24t.36-3.708q-2.484.072-4.896.216zm-4.572 4.536q.108.828-1.224 1.296 4.752 5.076 9.774 8.64t10.998 5.544q6.192-1.764 11.178-5.256t10.566-9q-1.188-.468-1.08-1.224l.108-.324v0q-.612-.072-1.8-.198t-1.728-.162q-.936 3.24-2.952 4.752-1.836 1.368-2.952-.036-.18-.216-.324-.504-.252-.468-.612-2.232-.072.18-.18.324t-.27.252-.288.198-.342.144l-.36.09-.432.072-.432.054-.486.036-.486.018q-3.816.324-5.868-.396-.144.612-.36.954t-.756.54-.828.252-1.296.126l-.108.018-.108.018h-.108q-6.444.612-7.308-1.44-.072 2.268-2.016 1.944-1.692-.288-3.276-1.944-.432-.468-.72-.936-.612-1.044-.936-2.34-2.088.216-3.132.36l.144.36zm-3.024 22.608q.108-.504.108-1.08-.612-2.556-1.836-4.68t-2.628-2.52q-1.476-.432-3.654.522t-3.762 2.88-1.404 3.87q1.26 1.908 3.6 3.348t4.284 1.512q1.836.072 3.384-1.008t1.908-2.844zm.108-6.156q.828 2.268.972 4.284 7.02-4.068 14.112-6.264-3.528-1.872-6.498-4.32t-6.462-5.94q-.216.144-1.044.468l-.036.18-.036.144q1.116.648.792 1.332-.432.828-2.016 1.224-.36.468-1.044.864h-.036q-.072 2.988.036 5.4.684 1.224 1.26 2.628zm2.484 5.976q19.152.756 41.22 0-9.144-5.292-15.408-7.056-2.736 1.26-5.616 2.052-.288.108-.576 0-2.34-.756-4.644-1.764-7.488 2.16-14.976 6.768h-.036v.036l.036-.036zm42.624-1.656q.144-1.944 1.008-4.32.504-1.368 1.188-2.556l-.036.036q.108-2.772.108-5.508-.54-.288-1.08-.9-1.512-.324-2.016-1.188-.324-.72.792-1.368-.072-.144-.072-.324-.576-.144-1.008-.432-7.344 6.84-13.788 10.224 7.128 2.124 14.904 6.336zm14.112.828q.18-1.944-1.404-3.87t-3.744-2.88-3.672-.522q-1.368.396-2.61 2.538t-1.854 4.662q0 .576.108 1.08.36 1.764 1.908 2.844t3.384 1.008q1.944-.072 4.284-1.512t3.6-3.348z","OPENCART":"M54.864-8.243q0 2.448-1.728 4.176t-4.176 1.728-4.194-1.728-1.746-4.176 1.746-4.194 4.194-1.746 4.176 1.746 1.728 4.194zm-26.964 0q0 2.448-1.746 4.176t-4.194 1.728-4.176-1.728-1.728-4.176 1.728-4.194 4.176-1.746 4.194 1.746 1.746 4.194zm-27.9-53.784q2.052 2.16 3.978 3.762t4.356 2.952 4.896 2.268 5.976 1.638 7.2 1.134 9 .666 10.944.342 13.41.09q5.004 0 8.802.18t6.516.594 4.464.99 2.556 1.422.864 1.854-.702 2.304-2.034 2.754-3.222 3.276-4.176 3.762-5.004 4.284q-6.66 5.652-10.296 8.892 1.044-1.836 2.754-3.924t3.384-3.798 3.402-3.546 2.988-3.294 1.944-2.898.468-2.52-1.638-1.998-4.194-1.476-7.344-.846-10.944-.18q-6.048.072-11.304-.216t-9.216-.828-7.362-1.476-5.742-1.854-4.41-2.25-3.294-2.394-2.448-2.574-1.818-2.502-1.44-2.448-1.314-2.142z","EXPEDITEDSSL":"M32.256-62.135q-6.084 0-11.628 2.376t-9.558 6.39-6.39 9.558-2.376 11.628 2.376 11.628 6.39 9.558 9.558 6.39 11.628 2.376 11.628-2.376 9.558-6.39 6.39-9.558 2.376-11.628-2.376-11.628-6.39-9.558-9.558-6.39-11.628-2.376zm0-2.304q6.552 0 12.528 2.556t10.296 6.876 6.876 10.296 2.556 12.528-2.556 12.528-6.876 10.296-10.296 6.876-12.528 2.556-12.528-2.556-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556zm-14.4 29.952q.576 0 .576.576v17.28q0 .576-.576.576h-1.152q-.576 0-.576-.576v-17.28q0-.576.576-.576h1.152zm14.4 2.304q1.908 0 3.258 1.35t1.35 3.258q0 1.26-.63 2.304t-1.674 1.656v4.104q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-4.104q-1.044-.612-1.674-1.656t-.63-2.304q0-1.908 1.35-3.258t3.258-1.35zm0-27.648q7.524 0 13.878 3.708t10.062 10.062 3.708 13.878-3.708 13.878-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708zm-12.672 17.28v3.456q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828v-3.456q0-3.348 2.358-5.706t5.706-2.358 5.706 2.358 2.358 5.706v3.456q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828v-3.456q0-5.256-3.708-8.964t-8.964-3.708-8.964 3.708-3.708 8.964zm31.104 26.496v-18.432q0-.936-.684-1.62t-1.62-.684h-32.256q-.936 0-1.62.684t-.684 1.62v18.432q0 .936.684 1.62t1.62.684h32.256q.936 0 1.62-.684t.684-1.62z","BATTERY_FULL":"M69.12-46.007v27.648h-59.904v-27.648h59.904zm4.608 20.736h4.608v-13.824h-4.608v-10.368q0-.504-.324-.828t-.828-.324h-66.816q-.504 0-.828.324t-.324.828v34.56q0 .504.324.828t.828.324h66.816q.504 0 .828-.324t.324-.828v-10.368zm9.216-13.824v13.824q0 1.908-1.35 3.258t-3.258 1.35v5.76q0 2.376-1.692 4.068t-4.068 1.692h-66.816q-2.376 0-4.068-1.692t-1.692-4.068v-34.56q0-2.376 1.692-4.068t4.068-1.692h66.816q2.376 0 4.068 1.692t1.692 4.068v5.76q1.908 0 3.258 1.35t1.35 3.258z","BATTERY_THREE_QUARTERS":"M9.216-18.359v-27.648h46.08v27.648h-46.08zm69.12-25.344q1.908 0 3.258 1.35t1.35 3.258v13.824q0 1.908-1.35 3.258t-3.258 1.35v5.76q0 2.376-1.692 4.068t-4.068 1.692h-66.816q-2.376 0-4.068-1.692t-1.692-4.068v-34.56q0-2.376 1.692-4.068t4.068-1.692h66.816q2.376 0 4.068 1.692t1.692 4.068v5.76zm0 18.432v-13.824h-4.608v-10.368q0-.504-.324-.828t-.828-.324h-66.816q-.504 0-.828.324t-.324.828v34.56q0 .504.324.828t.828.324h66.816q.504 0 .828-.324t.324-.828v-10.368h4.608z","BATTERY_HALF":"M9.216-18.359v-27.648h32.256v27.648h-32.256zm69.12-25.344q1.908 0 3.258 1.35t1.35 3.258v13.824q0 1.908-1.35 3.258t-3.258 1.35v5.76q0 2.376-1.692 4.068t-4.068 1.692h-66.816q-2.376 0-4.068-1.692t-1.692-4.068v-34.56q0-2.376 1.692-4.068t4.068-1.692h66.816q2.376 0 4.068 1.692t1.692 4.068v5.76zm0 18.432v-13.824h-4.608v-10.368q0-.504-.324-.828t-.828-.324h-66.816q-.504 0-.828.324t-.324.828v34.56q0 .504.324.828t.828.324h66.816q.504 0 .828-.324t.324-.828v-10.368h4.608z","BATTERY_QUARTER":"M9.216-18.359v-27.648h18.432v27.648h-18.432zm69.12-25.344q1.908 0 3.258 1.35t1.35 3.258v13.824q0 1.908-1.35 3.258t-3.258 1.35v5.76q0 2.376-1.692 4.068t-4.068 1.692h-66.816q-2.376 0-4.068-1.692t-1.692-4.068v-34.56q0-2.376 1.692-4.068t4.068-1.692h66.816q2.376 0 4.068 1.692t1.692 4.068v5.76zm0 18.432v-13.824h-4.608v-10.368q0-.504-.324-.828t-.828-.324h-66.816q-.504 0-.828.324t-.324.828v34.56q0 .504.324.828t.828.324h66.816q.504 0 .828-.324t.324-.828v-10.368h4.608z","BATTERY_EMPTY":"M78.336-43.703q1.908 0 3.258 1.35t1.35 3.258v13.824q0 1.908-1.35 3.258t-3.258 1.35v5.76q0 2.376-1.692 4.068t-4.068 1.692h-66.816q-2.376 0-4.068-1.692t-1.692-4.068v-34.56q0-2.376 1.692-4.068t4.068-1.692h66.816q2.376 0 4.068 1.692t1.692 4.068v5.76zm0 18.432v-13.824h-4.608v-10.368q0-.504-.324-.828t-.828-.324h-66.816q-.504 0-.828.324t-.324.828v34.56q0 .504.324.828t.828.324h66.816q.504 0 .828-.324t.324-.828v-10.368h4.608z","MOUSE_POINTER":"M40.788-26.891q1.116 1.08.504 2.484-.612 1.44-2.124 1.44h-13.752l7.236 17.136q.36.9 0 1.764t-1.224 1.26l-6.372 2.7q-.9.36-1.764 0t-1.26-1.224l-6.876-16.272-11.232 11.232q-.684.684-1.62.684-.432 0-.864-.18-1.44-.612-1.44-2.124v-54.144q0-1.512 1.44-2.124.432-.18.864-.18.972 0 1.62.684z","I_CURSOR":"M29.952-59.831q-11.52 0-11.52 8.064v14.976h4.608v4.608h-4.608v19.584q0 8.064 11.52 8.064h2.304v4.608h-2.304q-9.792 0-13.824-5.256-4.032 5.256-13.824 5.256h-2.304v-4.608h2.304q11.52 0 11.52-8.064v-19.584h-4.608v-4.608h4.608v-14.976q0-8.064-11.52-8.064h-2.304v-4.608h2.304q9.792 0 13.824 5.256 4.032-5.256 13.824-5.256h2.304v4.608h-2.304z","OBJECT_GROUP":"M73.728-50.615h-4.608v36.864h4.608v13.824h-13.824v-4.608h-46.08v4.608h-13.824v-13.824h4.608v-36.864h-4.608v-13.824h13.824v4.608h46.08v-4.608h13.824v13.824zm-9.216-9.216v4.608h4.608v-4.608h-4.608zm-59.904 0v4.608h4.608v-4.608h-4.608zm4.608 55.296v-4.608h-4.608v4.608h4.608zm50.688-4.608v-4.608h4.608v-36.864h-4.608v-4.608h-46.08v4.608h-4.608v36.864h4.608v4.608h46.08zm9.216 4.608v-4.608h-4.608v4.608h4.608zm-23.04-36.864h13.824v27.648h-32.256v-9.216h-13.824v-27.648h32.256v9.216zm-27.648 13.824h23.04v-18.432h-23.04v18.432zm36.864 9.216v-18.432h-9.216v13.824h-13.824v4.608h23.04z","OBJECT_UNGROUP":"M82.944-36.791h-4.608v23.04h4.608v13.824h-13.824v-4.608h-32.256v4.608h-13.824v-13.824h4.608v-4.608h-13.824v4.608h-13.824v-13.824h4.608v-23.04h-4.608v-13.824h13.824v4.608h32.256v-4.608h13.824v13.824h-4.608v4.608h13.824v-4.608h13.824v13.824zm-9.216-9.216v4.608h4.608v-4.608h-4.608zm-23.04-13.824v4.608h4.608v-4.608h-4.608zm-46.08 0v4.608h4.608v-4.608h-4.608zm4.608 41.472v-4.608h-4.608v4.608h4.608zm46.08-4.608h-4.608v4.608h4.608v-4.608zm-41.472 0h32.256v-4.608h4.608v-23.04h-4.608v-4.608h-32.256v4.608h-4.608v23.04h4.608v4.608zm18.432 18.432v-4.608h-4.608v4.608h4.608zm46.08 0v-4.608h-4.608v4.608h4.608zm-4.608-9.216v-23.04h-4.608v-4.608h-13.824v13.824h4.608v13.824h-13.824v-4.608h-13.824v4.608h4.608v4.608h32.256v-4.608h4.608z","STICKY_NOTE":"M36.864-19.511v14.976h-33.408q-1.44 0-2.448-1.008t-1.008-2.448v-48.384q0-1.44 1.008-2.448t2.448-1.008h48.384q1.44 0 2.448 1.008t1.008 2.448v33.408h-14.976q-1.44 0-2.448 1.008t-1.008 2.448zm4.608 1.152h13.716q-.54 2.952-2.34 4.752l-6.624 6.624q-1.8 1.8-4.752 2.34v-13.716z","STICKY_NOTE_O":"M50.4-18.359h-8.928v8.928q1.044-.36 1.476-.792l6.66-6.66q.432-.432.792-1.476zm-10.08-4.608h10.368v-32.256h-46.08v46.08h32.256v-10.368q0-1.44 1.008-2.448t2.448-1.008zm14.976-33.408v36.864q0 1.44-.72 3.168t-1.728 2.736l-6.624 6.624q-1.008 1.008-2.736 1.728t-3.168.72h-36.864q-1.44 0-2.448-1.008t-1.008-2.448v-48.384q0-1.44 1.008-2.448t2.448-1.008h48.384q1.44 0 2.448 1.008t1.008 2.448z","CC_JCB":"M70.236-28.511q0 .936-.558 1.602t-1.386.846q-.288.072-.648.072h-5.508v-5.04h5.508q.36 0 .648.072.828.18 1.386.846t.558 1.602zm-.648-7.668q0 .9-.54 1.512t-1.368.756q-.108.036-.54.036h-5.004v-4.644h5.004l.306.018.234.018q.828.144 1.368.774t.54 1.53zm-43.38 5.904v-11.088h-8.208v11.088q0 2.088-1.368 3.402t-3.78 1.314q-3.888 0-8.244-2.124v4.032q1.908.54 4.356.828t3.924.324l1.512.036q11.808 0 11.808-7.812zm25.704 6.624v-4.068q-3.564 1.872-7.2 2.124-3.888.288-6.084-1.476t-2.196-5.112 2.196-5.112 6.084-1.476q3.636.252 7.2 2.088v-4.032q-1.728-.432-3.6-.702t-2.88-.342l-1.008-.072q-4.572-.216-7.866.504t-5.058 2.16-2.556 3.168-.792 3.816.792 3.816 2.556 3.168 5.058 2.16 7.866.504q3.636-.144 7.488-1.116zm26.424-4.14q0-1.944-1.548-3.186t-3.924-1.422v-.108q2.052-.288 3.204-1.494t1.152-2.862q0-1.98-1.476-3.168t-3.852-1.296l-.432-.018-.504-.018h-16.38v18.36h17.676q2.664 0 4.374-1.314t1.71-3.474zm4.608-27.432v46.08q0 1.872-1.368 3.24t-3.24 1.368h-73.728q-1.872 0-3.24-1.368t-1.368-3.24v-46.08q0-1.872 1.368-3.24t3.24-1.368h73.728q1.872 0 3.24 1.368t1.368 3.24z","CC_DINERS_CLUB":"M30.888-19.763v-24.948q-3.816 1.476-6.192 4.878t-2.376 7.614 2.376 7.614 6.192 4.842zm18.144-12.456q0-4.212-2.376-7.614t-6.192-4.878v24.984q3.816-1.476 6.192-4.878t2.376-7.614zm7.74 0q0 5.724-2.826 10.584t-7.686 7.686-10.584 2.826q-4.284 0-8.19-1.674t-6.732-4.5-4.5-6.732-1.674-8.19q0-5.724 2.826-10.584t7.686-7.686 10.584-2.826 10.584 2.826 7.686 7.686 2.826 10.584zm13.788.252q0-5.004-1.998-9.414t-5.31-7.398-7.686-4.716-9.09-1.728h-10.836q-6.336 0-11.646 2.916t-8.46 8.28-3.15 12.06q0 6.156 3.132 11.43t8.496 8.334 11.628 3.06h10.836q4.644 0 9.054-1.818t7.722-4.86 5.31-7.29 1.998-8.856zm12.384-23.256v46.08q0 1.872-1.368 3.24t-3.24 1.368h-73.728q-1.872 0-3.24-1.368t-1.368-3.24v-46.08q0-1.872 1.368-3.24t3.24-1.368h73.728q1.872 0 3.24 1.368t1.368 3.24z","CLONE":"M59.904-5.687v-39.168q0-.468-.342-.81t-.81-.342h-39.168q-.468 0-.81.342t-.342.81v39.168q0 .468.342.81t.81.342h39.168q.468 0 .81-.342t.342-.81zm4.608-39.168v39.168q0 2.376-1.692 4.068t-4.068 1.692h-39.168q-2.376 0-4.068-1.692t-1.692-4.068v-39.168q0-2.376 1.692-4.068t4.068-1.692h39.168q2.376 0 4.068 1.692t1.692 4.068zm-13.824-13.824v5.76h-4.608v-5.76q0-.468-.342-.81t-.81-.342h-39.168q-.468 0-.81.342t-.342.81v39.168q0 .468.342.81t.81.342h5.76v4.608h-5.76q-2.376 0-4.068-1.692t-1.692-4.068v-39.168q0-2.376 1.692-4.068t4.068-1.692h39.168q2.376 0 4.068 1.692t1.692 4.068z","BALANCE_SCALE":"M62.208-48.311l-13.824 25.344h27.648zm-46.08 0l-13.824 25.344h27.648zm29.556-6.912q-.504 1.44-1.638 2.574t-2.574 1.638v46.476h21.888q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-48.384q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h21.888v-46.476q-1.44-.504-2.574-1.638t-1.638-2.574h-17.676q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h17.676q.756-2.052 2.52-3.33t3.996-1.278 3.996 1.278 2.52 3.33h17.676q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-17.676zm-6.516.576q1.188 0 2.034-.846t.846-2.034-.846-2.034-2.034-.846-2.034.846-.846 2.034.846 2.034 2.034.846zm39.168 31.68q0 2.628-1.674 4.716t-4.23 3.276-5.202 1.782-5.022.594-5.022-.594-5.202-1.782-4.23-3.276-1.674-4.716q0-.396 1.26-2.916t3.312-6.282 3.852-7.038 3.672-6.624 2.016-3.6q.648-1.188 2.016-1.188t2.016 1.188q.144.252 2.016 3.6t3.672 6.624 3.852 7.038 3.312 6.282 1.26 2.916zm-46.08 0q0 2.628-1.674 4.716t-4.23 3.276-5.202 1.782-5.022.594-5.022-.594-5.202-1.782-4.23-3.276-1.674-4.716q0-.396 1.26-2.916t3.312-6.282 3.852-7.038 3.672-6.624 2.016-3.6q.648-1.188 2.016-1.188t2.016 1.188q.144.252 2.016 3.6t3.672 6.624 3.852 7.038 3.312 6.282 1.26 2.916z","HOURGLASS_O":"M50.688-59.831q0 9.396-3.834 16.614t-9.594 11.034q5.76 3.816 9.594 11.034t3.834 16.614h3.456q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-52.992q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h3.456q0-9.396 3.834-16.614t9.594-11.034q-5.76-3.816-9.594-11.034t-3.834-16.614h-3.456q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h52.992q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-3.456zm-19.224 25.488q2.772-1.044 5.364-3.33t4.662-5.49 3.33-7.56 1.26-9.108h-36.864q0 4.752 1.26 9.108t3.33 7.56 4.662 5.49 5.364 3.33q.684.252 1.098.846t.414 1.314-.414 1.314-1.098.846q-2.772 1.044-5.364 3.33t-4.662 5.49-3.33 7.56-1.26 9.108h36.864q0-4.752-1.26-9.108t-3.33-7.56-4.662-5.49-5.364-3.33q-.684-.252-1.098-.846t-.414-1.314.414-1.314 1.098-.846z","HOURGLASS_START":"M50.688-59.831q0 9.396-3.834 16.614t-9.594 11.034q5.76 3.816 9.594 11.034t3.834 16.614h3.456q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-52.992q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h3.456q0-9.396 3.834-16.614t9.594-11.034q-5.76-3.816-9.594-11.034t-3.834-16.614h-3.456q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h52.992q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-3.456zm-4.608 0h-36.864q0 2.376.324 4.608h36.216q.324-2.196.324-4.608zm0 55.296q0-4.68-1.224-8.982t-3.258-7.488-4.554-5.472-5.256-3.402h-8.28q-2.736 1.116-5.256 3.402t-4.554 5.472-3.258 7.488-1.224 8.982h36.864z","HOURGLASS_HALF":"M50.688-59.831q0 9.396-3.834 16.614t-9.594 11.034q5.76 3.816 9.594 11.034t3.834 16.614h3.456q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-52.992q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h3.456q0-9.396 3.834-16.614t9.594-11.034q-5.76-3.816-9.594-11.034t-3.834-16.614h-3.456q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h52.992q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-3.456zm-4.608 0h-36.864q0 7.416 3.06 13.824h30.744q3.06-6.408 3.06-13.824zm-2.052 43.776q-1.944-5.076-5.238-8.694t-7.002-5.13h-8.28q-3.708 1.512-7.002 5.13t-5.238 8.694h32.76z","HOURGLASS_END":"M50.688-59.831q0 9.396-3.834 16.614t-9.594 11.034q5.76 3.816 9.594 11.034t3.834 16.614h3.456q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-52.992q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h3.456q0-9.396 3.834-16.614t9.594-11.034q-5.76-3.816-9.594-11.034t-3.834-16.614h-3.456q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h52.992q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-3.456zm-19.224 25.488q2.772-1.044 5.364-3.33t4.662-5.49 3.33-7.56 1.26-9.108h-36.864q0 4.752 1.26 9.108t3.33 7.56 4.662 5.49 5.364 3.33q.684.252 1.098.846t.414 1.314-.414 1.314-1.098.846q-4.932 1.836-8.784 7.056h25.2q-3.852-5.22-8.784-7.056-.684-.252-1.098-.846t-.414-1.314.414-1.314 1.098-.846z","HOURGLASS":"M54.144-6.839q.504 0 .828.324t.324.828v4.608q0 .504-.324.828t-.828.324h-52.992q-.504 0-.828-.324t-.324-.828v-4.608q0-.504.324-.828t.828-.324h52.992zm-49.464-2.304q.108-1.98.576-3.852t1.08-3.42 1.656-3.132 1.926-2.736 2.322-2.502 2.376-2.16 2.538-1.98 2.394-1.71 2.34-1.548q-1.548-1.008-2.34-1.548t-2.394-1.71-2.538-1.98-2.376-2.16-2.322-2.502-1.926-2.736-1.656-3.132-1.08-3.42-.576-3.852h45.936q-.108 1.98-.576 3.852t-1.08 3.42-1.656 3.132-1.926 2.736-2.322 2.502-2.376 2.16-2.538 1.98-2.394 1.71-2.34 1.548q1.548 1.008 2.34 1.548t2.394 1.71 2.538 1.98 2.376 2.16 2.322 2.502 1.926 2.736 1.656 3.132 1.08 3.42.576 3.852h-45.936zm49.464-55.296q.504 0 .828.324t.324.828v4.608q0 .504-.324.828t-.828.324h-52.992q-.504 0-.828-.324t-.324-.828v-4.608q0-.504.324-.828t.828-.324h52.992z","HAND_ROCK_O":"M27.648-50.615q-1.908 0-3.258 1.35t-1.35 3.258v4.608h-1.152v-3.348q0-1.728-1.152-2.934t-2.88-1.206q-1.656 0-2.844 1.188t-1.188 2.844v15.444l-1.152-1.08v-6.192q0-1.728-1.152-2.934t-2.88-1.206q-1.656 0-2.844 1.188t-1.188 2.844v8.064q0 1.692 1.26 2.952l11.16 10.656q1.404 1.404 1.404 3.672 0 .936.684 1.62t1.62.684h23.04q.936 0 1.62-.684t.684-1.62v-.9q0-1.476.36-2.772l3.888-15.696q.36-1.296.36-2.772v-8.856q0-1.728-1.152-2.934t-2.88-1.206q-1.656 0-2.844 1.188t-1.188 2.844v1.152h-1.152v-4.5q0-1.44-.9-2.61t-2.304-1.458q-.504-.072-.828-.072-1.656 0-2.844 1.188t-1.188 2.844v4.608h-1.152v-4.392q0-1.836-1.17-3.222t-2.97-1.566q-.18-.036-.468-.036zm0-4.608q3.024 0 5.364 1.8 2.052-1.224 4.428-1.224 2.124 0 3.996.972t3.096 2.736q.972-.252 2.124-.252 3.6 0 6.12 2.574t2.52 6.174v8.856q0 1.836-.468 3.888l-3.924 15.696q-.216.864-.216 2.556 0 2.88-2.016 4.896t-4.896 2.016h-23.04q-3.024 0-4.968-2.106t-1.944-5.13l-11.088-10.656q-2.736-2.628-2.736-6.3v-8.064q0-3.564 2.538-6.102t6.102-2.538q.396 0 .576.036.216-3.42 2.718-5.76t5.922-2.34q1.872 0 3.528.756 2.592-2.484 6.264-2.484z","HAND_STOP_O":"M31.68-59.831q-1.656 0-2.844 1.188t-1.188 2.844v23.616h-1.152v-19.008q0-1.656-1.188-2.844t-2.844-1.188-2.844 1.188-1.188 2.844v28.223999999999997l-5.544-7.38q-1.368-1.836-3.672-1.836-1.908 0-3.258 1.35t-1.35 3.258q0 1.548.936 2.772l13.824 18.432q1.368 1.836 3.672 1.836h24.768q1.224 0 2.196-.792t1.224-2.016l2.736-14.58q.18-1.152.18-2.124v-17.928q0-1.656-1.188-2.844t-2.844-1.188-2.844 1.188-1.188 2.844v9.792h-1.152v-19.008q0-1.656-1.188-2.844t-2.844-1.188-2.844 1.188-1.188 2.844v19.008h-1.152v-23.616q0-1.656-1.188-2.844t-2.844-1.188zm0-4.608q2.448 0 4.518 1.278t3.186 3.474q.684-.144 1.512-.144 3.564 0 6.102 2.538t2.538 6.102v.612q3.78-.216 6.498 2.304t2.718 6.3v17.928q0 1.44-.288 2.988l-2.736 14.544q-.504 2.844-2.754 4.716t-5.166 1.872h-24.768q-2.16 0-4.122-.99t-3.258-2.682l-13.824-18.432q-1.836-2.448-1.836-5.544 0-3.816 2.7-6.516t6.516-2.7q2.808 0 4.608 1.224v-15.624q0-3.564 2.538-6.102t6.102-2.538q.828 0 1.512.144 1.116-2.196 3.186-3.474t4.518-1.278z","HAND_SCISSORS_O":"M38.628-4.535h-6.372q-5.868 0-8.136-5.076-.828-1.764-.828-3.672v-.18q-2.232-1.08-3.546-3.186t-1.314-4.59q0-1.368.18-1.728h-9.396q-3.816 0-6.516-2.7t-2.7-6.516 2.7-6.516 6.516-2.7h4.068l-1.584-.612q-2.664-1.008-4.302-3.366t-1.638-5.238q0-3.816 2.7-6.516t6.516-2.7q1.656 0 3.276.612l22.608 8.604h14.436q3.816 0 6.516 2.7t2.7 6.516v24.048q0 3.168-1.944 5.67t-5.04 3.258l-12.204 3.06q-3.312.828-6.696.828zm-1.764-25.596l-5.58 2.556-5.868 2.664q-1.08.504-1.728 1.494t-.648 2.178q0 1.656 1.188 2.844t2.844 1.188q.936 0 1.656-.36l12.168-5.544q-1.764-.36-2.898-1.8t-1.134-3.24v-1.98zm11.52 11.196q0-1.656-1.188-2.844t-2.844-1.188q-.936 0-1.656.36l-10.44 4.752q-1.008.468-1.332.612t-1.098.612-1.062.846-.576 1.044-.288 1.458q0 1.8 1.134 2.952t2.934 1.152q.72 0 1.368-.324l12.672-5.76q1.08-.504 1.728-1.494t.648-2.178zm-8.352-27.072l-23.4-8.928q-.864-.288-1.656-.288-1.908 0-3.258 1.35t-1.35 3.258q0 1.44.81 2.628t2.142 1.692l18.936 7.2v2.304h-23.04q-1.908 0-3.258 1.35t-1.35 3.258 1.35 3.258 3.258 1.35h19.26l8.388-3.816v-7.128q0-2.268 1.656-3.816l3.996-3.672h-2.484zm-1.404 36.864q2.952 0 5.58-.684l12.204-3.06q1.548-.396 2.52-1.638t.972-2.826v-24.048q0-1.908-1.35-3.258t-3.258-1.35h-11.088l-4.896 4.536q-1.296 1.188-1.296 2.952v10.656q0 1.656 1.188 2.772t2.844 1.116 2.844-1.26 1.188-2.916v-7.488h1.152v7.488q0 2.52-2.052 4.104 1.872.288 3.114 1.746t1.242 3.366q0 1.512-.828 2.808t-2.196 1.908l-11.16 5.076h3.276z","HAND_LIZARD_O":"M41.436-64.439q2.196 0 4.176 1.008t3.276 2.772l20.592 28.116q4.248 5.724 4.248 12.924v12.78q0 2.88-2.016 4.896t-4.896 2.016h-13.824q-2.88 0-4.896-2.016t-2.016-4.896v-6.372l-10.296-5.148h-19.656q-2.88 0-4.896-2.016t-2.016-4.896v-1.152q0-4.284 3.042-7.326t7.326-3.042h15.12l1.512-4.608h-24.696q-3.6 0-6.246-2.43t-2.934-5.994q-2.34-2.844-2.34-6.552v-1.152q0-2.88 2.016-4.896t4.896-2.016h34.524zm27.684 57.6v-12.78q0-5.652-3.348-10.224l-20.628-28.116q-1.404-1.872-3.708-1.872h-34.524q-.936 0-1.62.684t-.684 1.62q0 1.152.054 1.782t.342 1.458.9 1.548q.36-1.116 1.278-1.8t2.034-.684h29.952v1.152h-29.952q-.936 0-1.62.684t-.684 1.62q0 1.584.108 2.088.288 1.584 1.584 2.628t2.916 1.044h26.316q1.44 0 2.448 1.008t1.008 2.448q0 .54-.18 1.08l-2.304 6.912q-.36 1.044-1.26 1.71t-2.016.666h-15.948q-2.376 0-4.068 1.692t-1.692 4.068v1.152q0 .936.684 1.62t1.62.684h20.196q.576 0 1.044.252l11.412 5.688q.864.468 1.386 1.296t.522 1.8v7.092q0 .936.684 1.62t1.62.684h13.824q.936 0 1.62-.684t.684-1.62z","HAND_SPOCK_O":"M29.376-59.831q-1.728 0-2.862 1.224t-1.134 2.952q0 .504.108 1.008l5.4 22.464h-.936l-4.176-17.352q-.324-1.368-1.422-2.232t-2.502-.864q-1.692 0-2.844 1.224t-1.152 2.916q0 .396.144 1.044.108.468 1.404 5.796t2.448 10.152 1.152 4.968v8.172l-11.052-8.28q-1.224-.936-2.772-.936-1.872 0-3.222 1.314t-1.35 3.186q0 2.412 2.016 3.96l18.252 13.644q1.224.936 2.736.936h24.984q1.188 0 2.124-.738t1.224-1.89l3.6-14.436q.288-1.08.36-3.168t.324-3.096l4.176-17.208q.108-.432.108-.936 0-1.656-1.188-2.844t-2.88-1.188q-1.368 0-2.484.918t-1.44 2.25l-3.564 14.688h-.936l4.752-19.692q.108-.504.108-1.008 0-1.692-1.152-2.88t-2.88-1.188q-1.368 0-2.466.864t-1.422 2.232l-5.22 21.672h-4.572l-5.904-24.552q-.324-1.368-1.422-2.232t-2.466-.864zm23.22 59.904h-24.984q-3.06 0-5.508-1.836l-18.252-13.68q-1.8-1.368-2.826-3.384t-1.026-4.248q0-3.78 2.7-6.444t6.48-2.664q.9 0 1.782.198t1.494.396 1.476.738 1.26.828 1.386 1.062 1.35 1.026l-4.428-18.432q-.252-1.26-.252-2.124 0-3.348 2.16-5.832t5.472-2.844q.504-3.132 2.898-5.202t5.598-2.07q2.988 0 5.328 1.854t3.06 4.77l3.708 15.408 2.988-12.528q.72-2.916 3.06-4.77t5.328-1.854q3.132 0 5.49 1.944t2.97 5.004q3.348.36 5.58 2.808t2.232 5.796q0 1.08-.252 2.052l-4.176 17.172q-.18.792-.18 2.412 0 1.836-.468 3.888l-3.636 14.436q-.684 2.7-2.862 4.41t-4.95 1.71z","HAND_POINTER_O":"M23.04-59.831q-1.908 0-3.258 1.35t-1.35 3.258v32.256l-5.436-7.272q-1.476-1.944-3.852-1.944-1.872 0-3.204 1.368t-1.332 3.24q0 1.548.936 2.772l13.824 18.432q1.368 1.836 3.672 1.836h25.848q.792 0 1.422-.486t.81-1.242l3.312-13.248q.864-3.456.864-6.984v-7.812q0-1.476-1.008-2.556t-2.448-1.08-2.448 1.008-1.008 2.448h-1.152v-2.196q0-1.728-1.152-2.934t-2.88-1.206q-1.656 0-2.844 1.188t-1.188 2.844v2.304h-1.152v-3.24q0-1.98-1.332-3.402t-3.276-1.422q-1.908 0-3.258 1.35t-1.35 3.258v3.456h-1.152v-20.52q0-1.98-1.332-3.402t-3.276-1.422zm0-4.608q3.852 0 6.534 2.79t2.682 6.642v7.92q.792-.072 1.152-.072 3.564 0 6.228 2.484 1.692-.756 3.564-.756 4.068 0 6.624 3.132.972-.252 2.016-.252 3.384 0 5.724 2.43t2.34 5.814v7.812q0 4.176-1.008 8.1l-3.312 13.248q-.576 2.304-2.448 3.762t-4.248 1.458h-25.848q-2.16 0-4.122-.99t-3.258-2.682l-13.824-18.432q-1.836-2.448-1.836-5.544 0-3.78 2.682-6.498t6.462-2.718q2.556 0 4.68 1.26v-19.692q0-3.816 2.7-6.516t6.516-2.7zm4.608 50.688v-13.824h-1.152v13.824h1.152zm9.216 0v-13.824h-1.152v13.824h1.152zm9.216 0v-13.824h-1.152v13.824h1.152z","HAND_PEACE_O":"M46.368-41.147q2.16 0 3.852.828 5.076 2.268 5.076 8.136v6.372q0 3.384-.828 6.696l-3.06 12.204q-.756 3.096-3.258 5.04t-5.67 1.944h-24.048q-3.816 0-6.516-2.7t-2.7-6.516v-14.436l-8.604-22.608q-.612-1.62-.612-3.276 0-3.816 2.7-6.516t6.516-2.7q2.88 0 5.238 1.638t3.366 4.302l.612 1.584v-4.068q0-3.816 2.7-6.516t6.516-2.7 6.516 2.7 2.7 6.516v9.396q.972-.18 1.728-.18 2.484 0 4.59 1.314t3.186 3.546zm-7.776-.252q-1.188 0-2.178.648t-1.494 1.728l-2.664 5.868-2.556 5.58h1.98q1.8 0 3.24 1.134t1.8 2.898l5.544-12.168q.36-.72.36-1.656 0-1.656-1.188-2.844t-2.844-1.188zm7.956 4.86q-.792 0-1.458.288t-1.044.576-.846 1.062-.612 1.098-.612 1.332l-4.752 10.44q-.36.72-.36 1.656 0 1.656 1.188 2.844t2.844 1.188q1.188 0 2.178-.648t1.494-1.728l5.76-12.672q.324-.648.324-1.368 0-1.8-1.152-2.934t-2.952-1.134zm-41.94-12.924q0 .792.288 1.656l8.928 23.4v2.484l3.672-3.996q1.548-1.656 3.816-1.656h7.128l3.816-8.388v-19.26q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258v23.04h-2.304l-7.2-18.936q-.504-1.332-1.692-2.142t-2.628-.81q-1.908 0-3.258 1.35t-1.35 3.258zm37.872 44.928q1.584 0 2.826-.972t1.638-2.52l3.06-12.204q.684-2.628.684-5.58v-3.276l-5.076 11.16q-.612 1.368-1.908 2.196t-2.808.828q-1.908 0-3.366-1.242t-1.746-3.114q-1.584 2.052-4.104 2.052h-7.488v-1.152h7.488q1.656 0 2.916-1.188t1.26-2.844-1.116-2.844-2.772-1.188h-10.656q-1.764 0-2.952 1.296l-4.536 4.896v11.088q0 1.908 1.35 3.258t3.258 1.35h24.048z","TRADEMARK":"M30.852-44.855v4.212q0 .468-.342.792t-.81.324h-10.728v29.232q0 .468-.324.81t-.792.342h-4.86q-.468 0-.81-.324t-.342-.828v-29.232h-10.692q-.468 0-.81-.324t-.342-.792v-4.212q0-.504.324-.828t.828-.324h28.548q.468 0 .81.342t.342.81zm37.368-.108l2.772 34.596q.036.468-.288.864-.36.36-.828.36h-4.824q-.432 0-.756-.306t-.36-.738l-1.656-21.168-6.804 15.3q-.288.684-1.044.684h-4.32q-.72 0-1.044-.684l-6.768-15.372-1.62 21.24q-.036.432-.36.738t-.756.306h-4.86q-.468 0-.828-.36-.324-.36-.324-.864l2.808-34.596q.036-.432.36-.738t.756-.306h5.112q.72 0 1.044.684l7.92 18.72q.36.864.72 1.836.108-.252.342-.882t.378-.954l7.956-18.72q.324-.684 1.044-.684h5.076q.468 0 .792.306t.36.738z","REGISTERED":"M37.512-39.131q0-3.168-2.16-4.356-1.188-.648-4.212-.648h-4.428v10.116h5.832q2.376 0 3.672-1.332t1.296-3.78zm1.872 10.26l7.38 13.428q.288.612-.036 1.116-.288.576-.972.576h-5.472q-.72 0-1.008-.612l-6.984-13.14h-5.58v12.6q0 .504-.324.828t-.828.324h-4.824q-.504 0-.828-.324t-.324-.828v-34.56q0-.504.324-.828t.828-.324h10.584q4.608 0 6.84.864 3.06 1.116 4.824 3.924t1.764 6.48q0 3.312-1.53 5.958t-4.158 3.942q.216.36.324.576zm-7.128-29.808q-5.4 0-10.296 2.106t-8.442 5.652-5.652 8.442-2.106 10.296 2.106 10.296 5.652 8.442 8.442 5.652 10.296 2.106 10.296-2.106 8.442-5.652 5.652-8.442 2.106-10.296-2.106-10.296-5.652-8.442-8.442-5.652-10.296-2.106zm32.256 26.496q0 6.552-2.556 12.528t-6.876 10.296-10.296 6.876-12.528 2.556-12.528-2.556-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556 12.528 2.556 10.296 6.876 6.876 10.296 2.556 12.528z","CREATIVE_COMMONS":"M21.78-20.051q5.508 0 9.252-3.744.504-.648.108-1.296l-1.62-2.952q-.216-.468-.864-.612-.576-.072-.972.396l-.144.108q-.144.144-.414.36t-.63.468-.846.522-1.026.486-1.206.342-1.35.126q-2.736 0-4.5-1.8t-1.764-4.572q0-2.736 1.728-4.518t4.392-1.782q1.332 0 2.574.504t1.818 1.008l.576.504q.396.396.936.36.576-.072.864-.504l1.908-2.808q.468-.72-.072-1.404-.108-.144-.396-.432t-1.08-.846-1.746-1.008-2.43-.81-3.096-.36q-5.328 0-8.856 3.474t-3.528 8.658q0 5.256 3.492 8.694t8.892 3.438zm22.68 0q5.508 0 9.252-3.744.504-.648.144-1.296l-1.62-2.952q-.288-.504-.9-.612-.576-.072-.972.396l-.144.108q-.144.144-.414.36t-.63.468-.846.522-1.026.486-1.206.342-1.35.126q-2.736 0-4.5-1.8t-1.764-4.572q0-2.736 1.728-4.518t4.392-1.782q1.332 0 2.574.504t1.818 1.008l.576.504q.396.396.936.36.576-.072.864-.504l1.908-2.808q.468-.72-.072-1.404-.108-.144-.396-.432t-1.08-.846-1.746-1.008-2.43-.81-3.096-.36q-5.292 0-8.838 3.474t-3.546 8.658q0 5.256 3.492 8.694t8.892 3.438zm-12.204-38.628q-5.4 0-10.296 2.106t-8.442 5.652-5.652 8.442-2.106 10.296 2.106 10.296 5.652 8.442 8.442 5.652 10.296 2.106 10.296-2.106 8.442-5.652 5.652-8.442 2.106-10.296-2.106-10.296-5.652-8.442-8.442-5.652-10.296-2.106zm0-5.76q6.552 0 12.528 2.556t10.296 6.876 6.876 10.296 2.556 12.528-2.556 12.528-6.876 10.296-10.296 6.876-12.528 2.556-12.528-2.556-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556z","GG":"M26.496-35.639l13.824 13.824-13.824 13.824-24.192-24.192 24.192-24.192 6.048 6.048-3.456 3.456-2.592-2.592-17.28 17.28 17.28 17.28 6.948-6.948-10.404-10.332zm20.736-20.736l24.192 24.192-24.192 24.192-6.048-6.048 3.456-3.456 2.592 2.592 17.28-17.28-17.28-17.28-6.948 6.948 10.404 10.332-3.456 3.456-13.824-13.824z","GG_CIRCLE":"M25.812-15.695l9.756-9.756-10.044-10.044-3.168 3.168 6.912 6.876-3.456 3.456-10.044-10.044 10.044-10.044 1.44 1.44 3.132-3.132-4.572-4.608-16.344 16.344zm12.888-.288l16.344-16.344-16.344-16.344-9.756 9.756 10.044 10.044 3.168-3.168-6.912-6.876 3.456-3.456 10.044 10.044-10.044 10.044-1.44-1.44-3.132 3.168zm25.812-16.2q0 6.552-2.556 12.528t-6.876 10.296-10.296 6.876-12.528 2.556-12.528-2.556-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556 12.528 2.556 10.296 6.876 6.876 10.296 2.556 12.528z","TRIPADVISOR":"M23.436-28.547q0 1.404-.99 2.394t-2.358.99q-1.404 0-2.394-.99t-.99-2.394q0-1.368.99-2.358t2.394-.99q1.368 0 2.358.99t.99 2.358zm41.544-.036q0 1.404-.99 2.394t-2.394.99-2.394-.99-.99-2.394.99-2.376 2.394-.972 2.394.972.99 2.376zm-37.44.036q0-2.844-2.034-4.896t-4.914-2.052-4.914 2.034-2.034 4.914 2.034 4.914 4.914 2.034 4.914-2.034 2.034-4.914zm41.508-.036q0-2.88-2.034-4.914t-4.914-2.034q-2.844 0-4.896 2.034t-2.052 4.914 2.034 4.914 4.914 2.034 4.914-2.034 2.034-4.914zm-38.448.036q0 4.176-2.934 7.11t-7.074 2.934q-4.176 0-7.11-2.952t-2.934-7.092 2.952-7.074 7.092-2.934 7.074 2.934 2.934 7.074zm41.544-.036q0 4.14-2.934 7.074t-7.11 2.934q-4.14 0-7.074-2.934t-2.934-7.074 2.934-7.074 7.074-2.934q4.176 0 7.11 2.934t2.934 7.074zm-34.704.108q0-6.876-4.878-11.754t-11.754-4.878q-4.5 0-8.316 2.232t-6.048 6.066-2.232 8.334 2.232 8.334 6.048 6.066 8.316 2.232q6.876 0 11.754-4.878t4.878-11.754zm24.048-20.628q-9.144-3.996-20.016-3.996-11.484 0-20.628 3.96 4.212 0 8.028 1.638t6.57 4.41 4.392 6.588 1.638 8.028q0-4.14 1.566-7.902t4.248-6.498 6.39-4.428 7.812-1.8zm17.244 20.628q0-6.876-4.86-11.754t-11.736-4.878-11.754 4.878-4.878 11.754 4.878 11.754 11.754 4.878 11.736-4.878 4.86-11.754zm-9.576-20.376h13.788q-1.584 1.836-2.7 4.122t-1.44 4.122q3.96 5.436 3.96 12.132 0 5.616-2.772 10.368t-7.524 7.506-10.332 2.754q-4.788 0-8.964-2.016t-7.056-5.58q-1.692 2.016-4.644 6.444-.396-.792-1.926-2.97t-2.682-3.51q-2.88 3.564-7.074 5.598t-8.982 2.034q-5.58 0-10.332-2.754t-7.524-7.506-2.772-10.368q0-6.696 3.96-12.132-.324-1.836-1.44-4.122t-2.7-4.122h13.14q5.364-3.6 12.78-5.634t15.552-2.034q8.064 0 15.156 2.016t12.528 5.652z","ODNOKLASSNIKI":"M23.04-31.787q-6.768 0-11.556-4.788t-4.788-11.52q0-6.768 4.788-11.556t11.556-4.788 11.556 4.788 4.788 11.556q0 6.732-4.788 11.52t-11.556 4.788zm0-24.372q-3.312 0-5.67 2.358t-2.358 5.706q0 3.312 2.358 5.67t5.67 2.358 5.67-2.358 2.358-5.67q0-3.348-2.358-5.706t-5.67-2.358zm18.828 26.352q.468.972.54 1.782t-.162 1.458-.954 1.386-1.53 1.332-2.214 1.494q-4.14 2.628-11.34 3.384l2.628 2.592 9.612 9.612q1.08 1.116 1.08 2.664t-1.08 2.628l-.432.468q-1.116 1.08-2.664 1.08t-2.664-1.08q-2.412-2.448-9.612-9.648l-9.612 9.648q-1.116 1.08-2.664 1.08t-2.628-1.08l-.432-.468q-1.116-1.08-1.116-2.628t1.116-2.664l9.612-9.612 2.592-2.592q-7.308-.756-11.412-3.384-1.404-.9-2.214-1.494t-1.53-1.332-.954-1.386-.162-1.458.54-1.782q.36-.72 1.008-1.26t1.512-.792 2.016.072 2.34 1.26q.18.144.54.396t1.548.882 2.484 1.098 3.312.864 4.068.396q3.276 0 6.264-.918t4.32-1.818l1.368-.9q1.188-.936 2.34-1.26t2.016-.072 1.512.792 1.008 1.26z","ODNOKLASSNIKI_SQUARE":"M33.372-43.559q0 2.376-1.674 4.05t-4.05 1.674-4.05-1.674-1.674-4.05 1.674-4.05 4.05-1.674 4.05 1.674 1.674 4.05zm7.704 13.068q-.36-.72-1.008-1.152t-1.71-.342-2.178.99q-.36.288-1.044.72t-2.916 1.152-4.572.72-4.464-.648-3.096-1.296l-.972-.648q-1.116-.9-2.178-.99t-1.71.342-1.008 1.152q-.792 1.62-.072 2.682t3.132 2.646q2.988 1.908 8.136 2.412l-1.836 1.872q-5.112 5.112-6.876 6.84-.792.792-.792 1.89t.792 1.89l.324.324q.792.792 1.89.792t1.89-.792l6.876-6.876q4.104 4.14 6.876 6.876.792.792 1.89.792t1.89-.792l.324-.324q.792-.792.792-1.89t-.792-1.89l-6.876-6.84-1.872-1.872q5.076-.504 8.1-2.412 2.412-1.584 3.132-2.646t-.072-2.682zm-1.764-13.068q0-4.824-3.42-8.244t-8.244-3.42-8.244 3.42-3.42 8.244 3.42 8.244 8.244 3.42 8.244-3.42 3.42-8.244zm15.984-5.904v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","GET_POCKET":"M56.34-59.831q2.34 0 3.96 1.638t1.62 3.978v18.684q0 6.336-2.448 12.096t-6.57 9.9-9.864 6.57-12.042 2.43q-6.336 0-12.078-2.43t-9.882-6.57-6.588-9.9-2.448-12.096v-18.684q0-2.304 1.656-3.96t3.96-1.656h50.724zm-25.344 38.304q1.692 0 2.952-1.188l14.544-13.968q1.332-1.26 1.332-3.06 0-1.764-1.242-3.006t-3.006-1.242q-1.692 0-2.952 1.188l-11.628 11.16-11.628-11.16q-1.26-1.188-2.916-1.188-1.764 0-3.006 1.242t-1.242 3.006q0 1.836 1.296 3.06l14.58 13.968q1.188 1.188 2.916 1.188z","WIKIPEDIA_W":"M53.784-5.435l-10.62-25.02q-.9 1.764-5.706 10.998t-7.146 14.022q-.036.036-.99.018t-.954-.054q-2.952-6.948-9.198-21.132t-9.342-21.456q-.756-1.8-2.394-3.87t-3.726-3.618-3.672-1.548l-.018-.864-.018-.972h20.988v1.8q-1.404.072-2.862.576t-2.394 1.548-.36 2.304q.936 2.124 7.794 17.964t8.478 19.44q1.116-2.196 5.04-9.594t4.716-8.91q-.684-1.404-4.536-10.116t-4.896-10.62q-1.368-2.484-7.236-2.556v-1.8l18.468.036v1.692q-2.16.072-3.366.9t-.45 2.484q1.188 2.52 3.132 6.822t3.096 6.75q3.96-7.704 6.228-13.068.864-1.98-.36-2.862t-4.644-.954q.036-.252.036-.9v-.864q2.304 0 6.138-.018t6.48-.036 3.33-.018v1.764q-2.232.072-4.284 1.188t-3.24 2.916l-7.668 15.912q.468 1.188 4.59 10.44t4.374 9.864l15.876-36.612q-.504-1.368-1.782-2.25t-2.34-1.134-1.998-.288v-1.8l16.56.144.036.072-.036 1.584q-5.004.144-7.236 5.22-18.936 43.776-20.124 46.476h-1.764z","SAFARI":"M34.164-32.291q0 .936-.594 1.62t-1.494.684q-.936 0-1.62-.594t-.684-1.494q0-.936.612-1.62t1.512-.684 1.584.594.684 1.494zm.54 2.088l12.6-20.916q-.324.288-2.43 2.25t-4.518 4.194-4.914 4.572-4.212 3.978-1.818 1.854l-12.564 20.88q.252-.252 2.412-2.232t4.536-4.194 4.896-4.572 4.212-3.996 1.8-1.818zm23.292-1.98q0 7.236-3.744 13.356-.108-.072-.612-.396t-.954-.594-.594-.27q-.468 0-.468.468 0 .36 2.124 1.584-2.664 4.032-6.642 6.858t-8.694 3.978l-.576-2.412q-.036-.36-.54-.36-.18 0-.288.198t-.072.342l.576 2.448q-2.592.54-5.256.54-7.164 0-13.392-3.78.036-.072.468-.738t.774-1.206.342-.684q0-.468-.468-.468-.216 0-.612.522t-.81 1.242-.486.828q-4.068-2.7-6.912-6.75t-3.96-8.802l2.484-.54q.36-.108.36-.54 0-.18-.198-.288t-.378-.072l-2.448.54q-.504-2.592-.504-5.004 0-7.416 3.924-13.644.072.036.666.432t1.08.684.63.288q.468 0 .468-.432 0-.216-.45-.558t-1.17-.774l-.72-.432q2.772-4.032 6.804-6.804t8.784-3.852l.54 2.412q.072.36.54.36.18 0 .288-.198t.072-.378l-.54-2.376q2.556-.468 4.824-.468 7.344 0 13.644 3.924-1.404 2.016-1.404 2.34 0 .468.432.468.396 0 1.728-2.304 3.996 2.7 6.75 6.696t3.87 8.676l-2.016.432q-.36.072-.36.576 0 .18.198.288t.342.072l2.052-.468q.504 2.592.504 5.04zm3.06 0q0-5.868-2.286-11.196t-6.138-9.18-9.18-6.138-11.196-2.286-11.196 2.286-9.18 6.138-6.138 9.18-2.286 11.196 2.286 11.196 6.138 9.18 9.18 6.138 11.196 2.286 11.196-2.286 9.18-6.138 6.138-9.18 2.286-11.196zm3.456 0q0 6.552-2.556 12.528t-6.876 10.296-10.296 6.876-12.528 2.556-12.528-2.556-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556 12.528 2.556 10.296 6.876 6.876 10.296 2.556 12.528z","CHROME":"M32.148-64.439q8.64-.072 16.236 4.32 8.352 4.824 12.672 13.392l-26.712-1.404q-5.76-.324-10.584 2.682t-6.66 8.262l-9.936-15.264q4.608-5.724 11.196-8.838t13.788-3.15zm-26.892 14.58l12.132 23.868q2.592 5.148 7.596 7.812t10.548 1.62l-8.28 16.236q-7.632-1.188-13.86-5.67t-9.81-11.376-3.582-14.814q0-9.612 5.256-17.676zm57.096 6.084q2.088 5.4 2.142 11.178t-1.746 11.016-5.508 9.792-8.856 7.542q-8.28 4.788-17.928 4.284l14.58-22.428q3.168-4.716 2.97-10.458t-3.834-9.99zm-30.096.72q4.5 0 7.686 3.186t3.186 7.686-3.186 7.686-7.686 3.186-7.686-3.186-3.186-7.686 3.186-7.686 7.686-3.186z","FIREFOX":"M32.508.073q-10.188 0-18.162-5.418t-11.862-14.346q-2.088-4.716-2.412-10.836t.936-11.97 3.996-11.232 6.444-8.73l-.396 10.116q.396-.504 2.448-.558t2.52.558q1.512-2.916 5.778-4.968t8.442-2.124q-1.944 1.62-4.302 5.346t-2.106 5.886q.9.288 2.25.486t2.268.27 2.448.144 1.818.108q.54.18.342 1.638t-1.098 2.718q-.18.252-.594.666t-2.034 1.278-3.636 1.224l.54 6.804-5.004-2.412q-.648 1.548-.27 2.934t1.296 2.394 2.358 1.494 2.916.234q1.836-.324 3.528-1.242t3.006-1.62 2.646-.63q2.196.144 3.222 1.188t.702 2.34q-.036.072-.09.198t-.306.45-.648.558-1.134.378-1.674.036q-2.16 3.42-5.202 4.878t-7.542 1.062q2.664 2.196 5.85 2.97t6.066.216 5.562-1.872 4.608-3.15 2.898-3.744q1.548-3.276 1.404-6.93t-1.35-6.786-2.826-4.5q3.132 1.368 4.932 2.862t2.772 4.05q.54-6.12-2.07-12.348t-7.542-10.224q9.54 2.772 14.832 10.062t5.436 18.63q.072 4.572-1.458 9.18t-4.446 8.568-6.804 7.056-8.91 4.878-10.386 1.782z","OPERA":"M53.748-56.231q-5.94-3.96-12.924-3.96-5.58 0-10.548 2.628t-8.64 7.2q-2.7 3.348-4.302 7.848t-1.746 9.576v1.512q.144 5.076 1.746 9.576t4.302 7.848q3.672 4.572 8.64 7.2t10.548 2.628q6.984 0 12.924-3.96-4.356 3.888-9.882 6.048t-11.61 2.16q-1.044 0-1.548-.036-6.3-.288-11.988-2.952t-9.792-6.948-6.516-10.116-2.412-12.204q0-6.552 2.556-12.528t6.876-10.296 10.296-6.876 12.528-2.556h.108q6.048.036 11.538 2.178t9.846 6.03zm10.764 24.048q0 6.912-2.772 13.05t-7.668 10.674q-3.744 2.268-7.992 2.268-4.932 0-9.18-3.024 5.544-2.016 9.126-8.388t3.582-14.58q0-8.172-3.564-14.544t-9.108-8.424q4.284-2.988 9.144-2.988 4.284 0 8.136 2.34 4.86 4.5 7.578 10.62t2.718 12.996z","INTERNET_EXPLORER":"M64.512-30.707q0 2.016-.252 3.744h-41.436q0 5.256 3.942 8.802t9.27 3.546q3.564 0 6.678-1.674t4.914-4.698h15.228q-2.016 5.724-6.138 10.116t-9.63 6.786-11.556 2.394q-6.732 0-12.816-2.988-8.208 4.176-14.184 4.176-8.532 0-8.532-9.468 0-4.14 1.62-9.9.612-2.16 3.924-8.244 7.164-12.96 17.1-21.816-6.624 2.844-15.372 12.744 2.268-9.864 10.206-16.182t18.054-6.318q1.08 0 1.62.036 9.18-4.212 15.588-4.212 2.304 0 4.176.468t3.402 1.458 2.394 2.754.864 4.14q0 4.176-2.7 10.296 3.636 6.552 3.636 14.04zm-2.52-23.04q0-2.988-1.908-4.752t-4.932-1.764q-3.888 0-9.144 2.52 4.356 1.692 8.01 4.734t6.138 7.038q1.836-4.86 1.836-7.776zm-57.384 44.532q0 3.096 1.746 4.77t4.842 1.674q4.14 0 9.576-2.988-4.392-2.592-7.686-6.588t-4.95-8.82q-3.528 7.38-3.528 11.952zm18.144-25.668h26.208q-.18-5.112-4.068-8.532t-9.036-3.42q-5.184 0-9.054 3.42t-4.05 8.532z","TV":"M64.512-19.511v-34.56q0-.468-.342-.81t-.81-.342h-57.6q-.468 0-.81.342t-.342.81v34.56q0 .468.342.81t.81.342h57.6q.468 0 .81-.342t.342-.81zm4.608-34.56v34.56q0 2.376-1.692 4.068t-4.068 1.692h-26.496v4.608h12.672q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-29.952q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h12.672v-4.608h-26.496q-2.376 0-4.068-1.692t-1.692-4.068v-34.56q0-2.376 1.692-4.068t4.068-1.692h57.6q2.376 0 4.068 1.692t1.692 4.068z","CONTAO":"M4.968-59.831h7.092q-2.52 2.304-4.536 5.364-1.296 2.016-2.124 4.14t-1.08 4.518-.306 4.32.378 4.752.756 4.536 1.008 4.914l.216 1.008q1.836 8.568 2.916 11.844 2.052 6.156 5.472 9.9h-9.792q-1.728 0-2.952-1.224t-1.224-2.952v-46.944q0-1.728 1.224-2.952t2.952-1.224zm43.488 0h11.088q1.728 0 2.952 1.224t1.224 2.952v46.944q0 1.728-1.224 2.952t-2.952 1.224h-6.408q7.632-7.56 7.056-20.34l-16.884 3.636q-.072 1.62-.432 2.952t-1.116 2.592-2.142 2.142-3.366 1.314q-4.428.936-7.164-1.44-1.152-.972-1.908-2.196t-1.854-4.644-2.322-9.288q-1.26-5.868-1.638-9.468t-.198-5.004.828-2.772q.72-1.476 2.25-2.628t3.69-1.62q1.62-.432 3.006-.234t2.412.612 1.944 1.26 1.548 1.728 1.242 2.034l16.848-3.6q-2.448-6.3-6.48-10.332z","500PX":"M50.436-8.747l-.216.216q-4.068 4.104-9.324 6.3-5.544 2.304-11.412 2.304-5.94 0-11.412-2.304-5.328-2.268-9.324-6.3-4.068-4.032-6.3-9.288-1.512-3.708-1.944-6.804-.144-1.008 1.728-1.296 1.836-.288 2.016.72l.036.144q.648 3.24 1.656 5.724 1.8 4.464 5.472 8.136 3.528 3.528 8.136 5.472 4.752 2.016 9.936 2.016 5.148 0 9.936-2.016 4.608-1.98 8.1-5.472l.216-.216q.36-.36.9-.216.432.108 1.188.792 1.296 1.332.612 2.088zm-16.992-22.14l-2.376 2.376 2.268 2.268q.756.756-.252 1.764-.612.612-1.152.612-.36 0-.684-.36l-2.232-2.196-2.376 2.376q-.18.18-.54.18-.54 0-1.116-.576l-.072-.072q-.648-.54-.648-1.044 0-.252.288-.612l2.376-2.34-2.376-2.376q-.576-.576.504-1.62.648-.648 1.116-.648.216 0 .468.18l2.34 2.376 2.34-2.34q.648-.612 1.728.468.972.972.396 1.584zm16.956 2.052q0 4.248-1.656 8.208-1.62 3.78-4.536 6.696-2.88 2.88-6.732 4.536t-8.208 1.656-8.208-1.656-6.732-4.536q-2.952-2.952-4.5-6.696-.54-1.152-.54-1.44h-.036q-.324-.972 1.548-1.584 1.8-.576 2.16.432 1.332 3.564 3.492 6.012h.036v-12.276q.108-4.896 3.672-8.352 3.78-3.708 9.108-3.708 5.292 0 9.036 3.708t3.744 8.964q0 5.292-3.762 9.036t-9.018 3.744q-2.088 0-4.032-.576-1.008-.396-.468-2.196.576-1.836 1.584-1.548l.504.108q.504.108 1.17.216t1.098.108q3.744 0 6.336-2.574t2.592-6.282q0-3.636-2.592-6.156-2.556-2.556-6.3-2.556-3.852 0-6.408 2.88-2.304 2.592-2.304 5.76v14.868q3.96 2.412 8.712 2.412 3.456 0 6.66-1.314t5.616-3.726 3.726-5.58 1.314-6.588q0-7.128-5.076-12.204-5.04-5.04-12.204-5.04-7.2 0-12.24 5.04-1.908 1.908-2.772 3.132l-.072.072q-.288.396-.468.558t-.774.342-1.386-.108q-.756-.18-1.314-.594t-.558-.954v-24.48q0-.54.378-.954t.99-.414h31.572q1.08 0 1.08 1.98t-1.08 1.98h-29.196v17.388h.036q1.44-1.512 3.672-3.024t3.888-2.196q3.924-1.656 8.316-1.656 4.356 0 8.208 1.656t6.732 4.536q2.916 2.916 4.536 6.696 1.656 4.032 1.656 8.244zm-1.116-20.916q.324.288.324.648t-.198.648-.594.756q-.936.936-1.404.936-.324 0-.576-.252-3.816-3.276-7.452-4.788-4.608-2.016-9.936-2.016-4.788 0-9.432 1.764-.972.36-1.62-1.332-.324-.9-.288-1.368.108-.576.576-.72 4.68-2.052 10.764-2.052 5.904 0 11.376 2.304 4.932 2.088 8.46 5.472z","AMAZON":"M55.836-11.303q.54-.216.936-.108t.396.63-.54 1.206q-.468.576-1.584 1.566t-3.438 2.448-5.076 2.664-6.768 2.088-8.262.882q-4.284 0-8.568-1.116t-7.524-2.754-6.21-3.744-4.77-3.78-3.024-3.15q-.288-.324-.36-.594t.036-.432.288-.252.414-.072.414.162q6.912 4.212 10.8 5.976 14.004 6.336 28.764 3.24 6.84-1.44 14.076-4.86zm7.452-4.14q.396.576.09 2.502t-1.026 3.69q-1.224 2.988-3.06 4.464-.612.504-.936.324t0-.864q.756-1.62 1.602-4.374t.234-3.546q-.18-.252-.558-.414t-.972-.216-1.062-.09-1.26 0-1.134.072-1.116.108-.81.072q-.216.036-.468.054t-.396.036-.306.036-.252.018h-.36l-.108-.018-.072-.054-.054-.108q-.216-.576 1.692-1.44t3.708-1.08q1.656-.252 3.888-.036t2.736.864zm-14.184-15.948q0 1.116.486 2.304t1.152 2.088 1.35 1.656 1.188 1.152l.468.396-8.172 8.064q-1.44-1.332-2.844-2.718t-2.088-2.106l-.684-.72q-.396-.396-.9-1.188-1.368 2.124-3.51 3.69t-4.59 2.286-5.04.828-4.95-.756-4.23-2.358-2.988-4.068-1.116-5.85q0-3.024 1.008-5.544t2.592-4.194 3.834-2.988 4.41-2.052 4.68-1.242 4.302-.666 3.582-.234v-4.572q0-2.34-.756-3.492-1.224-1.908-4.356-1.908-.216 0-.594.036t-1.458.432-2.016 1.062-2.016 2.142-1.728 3.456l-10.584-.972q0-2.16.792-4.284t2.412-4.068 3.888-3.42 5.454-2.358 6.858-.882q3.6 0 6.516.9t4.662 2.214 2.916 2.988 1.62 3.096.45 2.646v21.204zm-24.192.756q0 3.096 2.52 4.788 2.376 1.584 5.004.792 3.024-.9 4.104-4.428.504-1.62.504-3.636v-5.832q-2.124.072-3.996.432t-3.834 1.206-3.132 2.556-1.17 4.122z","CALENDAR_PLUS_O":"M55.296-55.223q1.872 0 3.24 1.368t1.368 3.24v46.08q0 1.872-1.368 3.24t-3.24 1.368h-50.688q-1.872 0-3.24-1.368t-1.368-3.24v-46.08q0-1.872 1.368-3.24t3.24-1.368h4.608v-3.456q0-2.376 1.692-4.068t4.068-1.692h2.304q2.376 0 4.068 1.692t1.692 4.068v3.456h13.824v-3.456q0-2.376 1.692-4.068t4.068-1.692h2.304q2.376 0 4.068 1.692t1.692 4.068v3.456h4.608zm-13.824-3.456v10.368q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828v-10.368q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828zm-27.648 0v10.368q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828v-10.368q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828zm41.472 54.144v-36.864h-50.688v36.864h50.688zm-23.04-20.736h8.064q.504 0 .828.324t.324.828v2.304q0 .504-.324.828t-.828.324h-8.064v8.064q0 .504-.324.828t-.828.324h-2.304q-.504 0-.828-.324t-.324-.828v-8.064h-8.064q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h8.064v-8.064q0-.504.324-.828t.828-.324h2.304q.504 0 .828.324t.324.828v8.064z","CALENDAR_MINUS_O":"M41.472-24.119v2.304q0 .504-.324.828t-.828.324h-20.736q-.504 0-.828-.324t-.324-.828v-2.304q0-.504.324-.828t.828-.324h20.736q.504 0 .828.324t.324.828zm-36.864 19.584h50.688v-36.864h-50.688v36.864zm13.824-43.776v-10.368q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v10.368q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm27.648 0v-10.368q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v10.368q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm13.824-2.304v46.08q0 1.872-1.368 3.24t-3.24 1.368h-50.688q-1.872 0-3.24-1.368t-1.368-3.24v-46.08q0-1.872 1.368-3.24t3.24-1.368h4.608v-3.456q0-2.376 1.692-4.068t4.068-1.692h2.304q2.376 0 4.068 1.692t1.692 4.068v3.456h13.824v-3.456q0-2.376 1.692-4.068t4.068-1.692h2.304q2.376 0 4.068 1.692t1.692 4.068v3.456h4.608q1.872 0 3.24 1.368t1.368 3.24z","CALENDAR_TIMES_O":"M39.996-14.579l-1.656 1.656q-.324.324-.792.324t-.828-.324l-6.768-6.804-6.768 6.804q-.36.324-.828.324t-.792-.324l-1.656-1.656q-.324-.324-.324-.792t.324-.828l6.804-6.768-6.804-6.768q-.324-.36-.324-.828t.324-.792l1.656-1.656q.324-.324.792-.324t.828.324l6.768 6.768 6.768-6.768q.36-.324.828-.324t.792.324l1.656 1.656q.324.324.324.792t-.324.828l-6.768 6.768 6.768 6.768q.324.36.324.828t-.324.792zm-35.388 10.044h50.688v-36.864h-50.688v36.864zm13.824-43.776v-10.368q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v10.368q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm27.648 0v-10.368q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v10.368q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm13.824-2.304v46.08q0 1.872-1.368 3.24t-3.24 1.368h-50.688q-1.872 0-3.24-1.368t-1.368-3.24v-46.08q0-1.872 1.368-3.24t3.24-1.368h4.608v-3.456q0-2.376 1.692-4.068t4.068-1.692h2.304q2.376 0 4.068 1.692t1.692 4.068v3.456h13.824v-3.456q0-2.376 1.692-4.068t4.068-1.692h2.304q2.376 0 4.068 1.692t1.692 4.068v3.456h4.608q1.872 0 3.24 1.368t1.368 3.24z","CALENDAR_CHECK_O":"M46.908-29.735l-18.432 18.432q-.36.324-.828.324t-.828-.324l-10.368-10.368q-.324-.36-.324-.828t.324-.792l1.656-1.656q.324-.324.792-.324t.828.324l7.92 7.92 15.984-15.984q.36-.324.828-.324t.792.324l1.656 1.656q.324.324.324.792t-.324.828zm-42.3 25.2h50.688v-36.864h-50.688v36.864zm13.824-43.776v-10.368q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v10.368q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm27.648 0v-10.368q0-.504-.324-.828t-.828-.324h-2.304q-.504 0-.828.324t-.324.828v10.368q0 .504.324.828t.828.324h2.304q.504 0 .828-.324t.324-.828zm13.824-2.304v46.08q0 1.872-1.368 3.24t-3.24 1.368h-50.688q-1.872 0-3.24-1.368t-1.368-3.24v-46.08q0-1.872 1.368-3.24t3.24-1.368h4.608v-3.456q0-2.376 1.692-4.068t4.068-1.692h2.304q2.376 0 4.068 1.692t1.692 4.068v3.456h13.824v-3.456q0-2.376 1.692-4.068t4.068-1.692h2.304q2.376 0 4.068 1.692t1.692 4.068v3.456h4.608q1.872 0 3.24 1.368t1.368 3.24z","INDUSTRY":"M16.128-64.439q.936 0 1.62.684t.684 1.62v32.076l19.296-15.444q.612-.504 1.44-.504.936 0 1.62.684t.684 1.62v13.644l19.296-15.444q.612-.504 1.44-.504.936 0 1.62.684t.684 1.62v41.472q0 .936-.684 1.62t-1.62.684h-59.904q-.936 0-1.62-.684t-.684-1.62v-59.904q0-.936.684-1.62t1.62-.684h13.824z","MAP_PIN":"M18.432-25.271q2.376 0 4.608-.54v23.58q0 .936-.684 1.62t-1.62.684h-4.608q-.936 0-1.62-.684t-.684-1.62v-23.58q2.196.54 4.608.54zm0-39.168q7.632 0 13.032 5.4t5.4 13.032-5.4 13.032-13.032 5.4-13.032-5.4-5.4-13.032 5.4-13.032 13.032-5.4zm0 8.064q.504 0 .828-.324t.324-.828-.324-.828-.828-.324q-5.256 0-8.964 3.708t-3.708 8.964q0 .504.324.828t.828.324.828-.324.324-.828q0-4.284 3.042-7.326t7.326-3.042z","MAP_SIGNS":"M62.82-53.747q.36.36.36.828t-.36.828l-5.076 5.076q-1.008 1.008-2.448 1.008h-48.384q-.936 0-1.62-.684t-.684-1.62v-9.216q0-.936.684-1.62t1.62-.684h20.736v-2.304q0-.936.684-1.62t1.62-.684h4.608q.936 0 1.62.684t.684 1.62v2.304h18.432q1.44 0 2.448 1.008zm-35.172 33.084h9.216v18.432q0 .936-.684 1.62t-1.62.684h-4.608q-.936 0-1.62-.684t-.684-1.62v-18.432zm29.952-16.128q.936 0 1.62.684t.684 1.62v9.216q0 .936-.684 1.62t-1.62.684h-48.384q-1.44 0-2.448-1.008l-5.076-5.076q-.36-.36-.36-.828t.36-.828l5.076-5.076q1.008-1.008 2.448-1.008h18.432v-6.912h9.216v6.912h20.736z","MAP_O":"M72.72-64.043q1.008.72 1.008 1.908v50.688q0 .72-.396 1.296t-1.044.828l-23.04 9.216q-.864.396-1.728 0l-22.176-8.856-22.176 8.856q-.36.18-.864.18-.684 0-1.296-.396-1.008-.72-1.008-1.908v-50.688q0-.72.396-1.296t1.044-.828l23.04-9.216q.864-.396 1.728 0l22.176 8.856 22.176-8.856q1.152-.468 2.16.216zm-46.224 4.86v45.72l20.736 8.28v-45.72zm-21.888 7.812v45.72l19.584-7.812v-45.72zm64.512 38.376v-45.72l-19.584 7.812v45.72z","MAP":"M18.432-64.439q.468 0 .81.342t.342.81v52.992q0 .72-.612 1.008l-17.28 9.216q-.252.144-.54.144-.468 0-.81-.342t-.342-.81v-52.992q0-.72.612-1.008l17.28-9.216q.252-.144.54-.144zm44.928 0q.468 0 .81.342t.342.81v52.992q0 .72-.612 1.008l-17.28 9.216q-.252.144-.54.144-.468 0-.81-.342t-.342-.81v-52.992q0-.72.612-1.008l17.28-9.216q.252-.144.54-.144zm-40.32 0q.288 0 .504.108l18.432 9.216q.648.36.648 1.044v52.992q0 .468-.342.81t-.81.342q-.288 0-.504-.108l-18.432-9.216q-.648-.36-.648-1.044v-52.992q0-.468.342-.81t.81-.342z","COMMENTING":"M23.04-32.183q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm13.824 0q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm13.824 0q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm13.824 0q0 6.264-4.32 11.574t-11.736 8.388-16.2 3.078q-3.96 0-7.596-.648-6.228 6.228-15.66 8.244-1.872.36-3.096.468-.432.036-.792-.216t-.468-.648q-.144-.54.72-1.332.18-.18.846-.774t.918-.846.846-.918.864-1.134.738-1.332.72-1.728.522-2.07.45-2.61q-5.256-3.24-8.262-7.794t-3.006-9.702q0-6.264 4.32-11.574t11.736-8.388 16.2-3.078 16.2 3.078 11.736 8.388 4.32 11.574z","COMMENTING_O":"M23.04-32.183q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm13.824 0q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm13.824 0q0 1.908-1.35 3.258t-3.258 1.35-3.258-1.35-1.35-3.258 1.35-3.258 3.258-1.35 3.258 1.35 1.35 3.258zm-18.432-18.432q-7.344 0-13.734 2.502t-10.152 6.75-3.762 9.18q0 4.032 2.574 7.686t7.254 6.318l3.132 1.8-.972 3.456q-.864 3.276-2.52 6.192 5.472-2.268 9.9-6.156l1.548-1.368 2.052.216q2.484.288 4.68.288 7.344 0 13.734-2.502t10.152-6.75 3.762-9.18-3.762-9.18-10.152-6.75-13.734-2.502zm32.256 18.432q0 6.264-4.32 11.574t-11.736 8.388-16.2 3.078q-2.52 0-5.22-.288-7.128 6.3-16.56 8.712-1.764.504-4.104.792h-.18q-.54 0-.972-.378t-.576-.99v-.036q-.108-.144-.018-.432t.072-.36.162-.342l.216-.324.252-.306.288-.324q.252-.288 1.116-1.242t1.242-1.368 1.116-1.422 1.17-1.836.972-2.124.936-2.736q-5.652-3.204-8.91-7.92t-3.258-10.116q0-4.68 2.556-8.946t6.876-7.362 10.296-4.914 12.528-1.818 12.528 1.818 10.296 4.914 6.876 7.362 2.556 8.946z","HOUZZ":"M18.432-21.563l18.432-10.62v21.276l-18.432 10.656v-21.312zm-18.432-10.62v21.276l18.432-10.656zm18.432-31.932v21.276l-18.432 10.656v-21.276zm0 21.276l18.432-10.62v21.276z","VIMEO":"M61.524-45.791q-.36 8.496-11.952 23.436-11.988 15.516-20.232 15.516-5.112 0-8.64-9.468-1.584-5.76-4.752-17.352-2.592-9.432-5.652-9.432-.648 0-4.572 2.736l-2.772-3.528q.864-.756 3.888-3.474t4.68-4.158q5.616-4.968 8.676-5.256 3.42-.324 5.508 1.998t2.916 7.326q1.584 10.332 2.376 13.428 1.98 8.964 4.32 8.964 1.836 0 5.544-5.796 3.636-5.796 3.924-8.856.468-5.004-3.924-5.004-2.052 0-4.356.936 4.32-14.148 16.524-13.752 9.036.288 8.496 11.736z","BLACK_TIE":"M0-59.831h55.296v55.296h-55.296v-55.296zm39.06 40.14l-7.956-22.716 7.956-10.692h-22.824l7.956 10.692-7.956 22.716 11.412 10.944z","FONTICONS":"M0-59.831h55.296v55.296h-55.296v-55.296zm32.688 11.52l-.432 1.188 2.7 2.988-1.116 4.104.9.9 3.852-2.052 3.852 2.052.9-.9-1.116-4.104 2.7-2.988-.432-1.188h-3.42l-1.908-3.456h-1.152l-1.908 3.456h-3.42zm-9.612 5.868q1.152 0 1.602.576t.414 2.268l6.264-.756q0-1.98-.63-3.33t-1.818-2.016-2.484-.918-3.06-.252q-4.788 0-7.164 2.07t-2.376 6.57v2.592h-3.456v4.608h2.736q.72 0 .72.288v13.752q0 .504-.18.72t-.648.252l-2.628.252v3.168h16.128v-3.096l-5.364-.504q-.216-.036-.306-.054t-.126-.09-.018-.144.036-.252.018-.36v-13.932h6.876l1.368-4.608h-8.316q-.216 0-.072-.216t.144-.324v-2.88q0-.972.054-1.458t.27-1.008.702-.72 1.314-.198zm21.852 29.844v-3.096l-1.944-.324q-.252-.036-.342-.09t-.09-.108.036-.27.036-.432v-18.72h-9.9l-.828 3.636 2.988.792q.828.252.828.972v13.32q0 .504-.216.666t-.72.234l-2.52.324v3.096h12.672z","REDDIT_ALIEN":"M64.512-33.983q0 2.088-1.062 3.798t-2.862 2.61q.432 1.656.432 3.456 0 5.58-3.834 10.332t-10.458 7.506-14.4 2.754-14.382-2.754-10.44-7.506-3.834-10.332q0-1.692.396-3.384-1.836-.9-2.952-2.646t-1.116-3.834q0-2.952 2.088-5.058t5.076-2.106q3.06 0 5.22 2.268 7.848-5.472 18.54-5.832l4.176-18.756q.108-.468.54-.756t.936-.18l13.284 2.916q.648-1.332 1.944-2.142t2.844-.81q2.232 0 3.816 1.566t1.584 3.798-1.584 3.816-3.816 1.584-3.798-1.566-1.566-3.798l-12.024-2.664-3.744 16.992q10.8.324 18.684 5.76 2.088-2.196 5.148-2.196 2.988 0 5.076 2.106t2.088 5.058zm-49.464 7.164q0 2.232 1.566 3.816t3.798 1.584 3.816-1.584 1.584-3.816-1.584-3.798-3.816-1.566q-2.196 0-3.78 1.584t-1.584 3.78zm29.16 12.78q.396-.396.396-.936t-.396-.936q-.36-.36-.9-.36t-.936.36q-1.476 1.512-4.356 2.232t-5.76.72-5.76-.72-4.356-2.232q-.396-.36-.936-.36t-.9.36q-.396.36-.396.918t.396.954q1.548 1.548 4.266 2.448t4.41 1.062 3.276.162 3.276-.162 4.41-1.062 4.266-2.448zm-.108-7.38q2.232 0 3.798-1.584t1.566-3.816q0-2.196-1.584-3.78t-3.78-1.584q-2.232 0-3.816 1.566t-1.584 3.798 1.584 3.816 3.816 1.584z","EDGE":"M2.484-35.819h.036q.576-4.536 2.106-8.694t4.14-7.812 6.03-6.336 8.046-4.23 9.954-1.548q8.316 0 14.904 3.798t10.584 10.926q3.744 6.732 3.744 15.912v6.768h-40.5q.036 3.996 1.926 6.93t4.914 4.41 6.822 2.052 7.668.108 7.488-1.674 6.246-3.042v13.572q-3.312 1.98-8.262 3.312t-11.25 1.368-11.376-1.908q-6.804-2.628-11.214-8.964t-4.482-13.392q-.108-8.712 3.996-14.832t11.7-9.648q-1.728 2.16-2.808 4.518t-1.656 5.742h22.86q.288-2.772-.288-5.04t-1.692-3.654-2.538-2.394-2.898-1.476-2.7-.738-2.016-.306l-.792-.036q-4.86.18-9.342 1.602t-8.046 3.762-6.336 5.058-4.968 5.886z","CREDIT_CARD_ALT":"M0-10.295v-21.888h82.944v21.888q0 2.376-1.692 4.068t-4.068 1.692h-71.424q-2.376 0-4.068-1.692t-1.692-4.068zm23.04-8.064v4.608h13.824v-4.608h-13.824zm-13.824 0v4.608h9.216v-4.608h-9.216zm67.968-41.472q2.376 0 4.068 1.692t1.692 4.068v8.064h-82.944v-8.064q0-2.376 1.692-4.068t4.068-1.692h71.424z","CODIEPIE":"M55.764-39.995q1.98 0 3.078 1.026t1.098 3.006-1.224 2.952-3.276.972h-4.896v6.372h-.9v-14.328h6.12zm5.796 21.24l-.144.396-.18.36q-4.068 8.28-11.898 13.176t-17.082 4.896q-6.552 0-12.528-2.556t-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556q8.784 0 16.362 4.464t11.862 12.168l.072.144.288.576q-1.08.54-4.914 2.466t-5.886 3.042q-.216.108-17.244 9.648 13.824 6.588 28.764 13.176zm-29.304 18.036q9 0 16.65-4.77t11.61-12.87l-10.332-4.644q-2.592 5.04-7.416 7.992t-10.512 2.952q-5.436 0-10.08-2.7t-7.344-7.344-2.7-10.08 2.7-10.08 7.344-7.344 10.08-2.7 10.08 2.646 7.344 7.362l10.08-5.148q-4.176-7.488-11.556-11.844t-15.948-4.356q-4.284 0-8.37 1.134t-7.524 3.15-6.354 4.932-4.932 6.354-3.15 7.524-1.134 8.37 1.134 8.37 3.15 7.524 4.932 6.354 6.354 4.932 7.524 3.15 8.37 1.134z","MODX":"M51.372-38.915l-22.104-13.896 3.312-5.436h30.78zm-36.792 9.54l-6.624-4.176v-30.888l42.588 26.748zm36.684-4.86l5.292 3.42v30.888l-19.152-12.06zm-1.332-.756l-18 28.872h-30.78l12.816-20.556z","FORT_AWESOME":"M23.04-28.151v-8.064q0-.576-.576-.576h-3.456q-.576 0-.576.576v8.064q0 .576.576.576h3.456q.576 0 .576-.576zm18.432 0v-8.064q0-.576-.576-.576h-3.456q-.576 0-.576.576v8.064q0 .576.576.576h3.456q.576 0 .576-.576zm18.432 1.152v27.072h-23.04v-11.52q0-2.88-2.016-4.896t-4.896-2.016-4.896 2.016-2.016 4.896v11.52h-23.04v-27.072q0-.576.576-.576h3.456q.576 0 .576.576v4.032h4.608v-22.464q0-.576.576-.576h3.456q.576 0 .576.576v4.032h4.608v-4.032q0-.576.576-.576h3.456q.576 0 .576.576v4.032h4.608v-4.032q0-.576.576-.576h.576v-14.148q-1.152-.684-1.152-1.98 0-.936.684-1.62t1.62-.684 1.62.684.684 1.62q0 1.296-1.152 1.98v.324h9.792q.576 0 .576.576v8.064q0 .576-.576.576h-9.792v4.608h.576q.576 0 .576.576v4.032h4.608v-4.032q0-.576.576-.576h3.456q.576 0 .576.576v4.032h4.608v-4.032q0-.576.576-.576h3.456q.576 0 .576.576v22.464h4.608v-4.032q0-.576.576-.576h3.456q.576 0 .576.576z","USB":"M82.368-35.459q.576.288.576.972t-.576.972l-11.52 6.912q-.288.18-.576.18-.324 0-.576-.144-.576-.36-.576-1.008v-4.608h-30.888q1.332 2.088 2.988 5.94.576 1.332.882 1.98t.864 1.764.972 1.692.972 1.224 1.134.936 1.188.288h3.456v-3.456q0-.504.324-.828t.828-.324h11.52q.504 0 .828.324t.324.828v11.52q0 .504-.324.828t-.828.324h-11.52q-.504 0-.828-.324t-.324-.828v-3.456h-3.456q-1.152 0-2.196-.36t-1.836-.846-1.62-1.458-1.332-1.656-1.206-2.052-1.026-2.07-1.008-2.178q-.828-1.908-1.332-2.934t-1.296-2.34-1.602-1.926-1.674-.612h-12.96q-.792 3.024-3.276 4.968t-5.652 1.944q-3.816 0-6.516-2.7t-2.7-6.516 2.7-6.516 6.516-2.7q3.168 0 5.652 1.944t3.276 4.968h3.744q.864 0 1.674-.612t1.602-1.926 1.296-2.34 1.332-2.934q.684-1.476 1.008-2.178t1.026-2.07 1.206-2.052 1.332-1.656 1.62-1.458 1.836-.846 2.196-.36h3.852q.756-2.052 2.52-3.33t3.996-1.278q2.88 0 4.896 2.016t2.016 4.896-2.016 4.896-4.896 2.016q-2.232 0-3.996-1.278t-2.52-3.33h-3.852q-.612 0-1.188.288t-1.134.936-.972 1.224-.972 1.692-.864 1.764-.882 1.98q-1.656 3.852-2.988 5.94h40.104v-4.608q0-.648.576-1.008t1.152.036z","PRODUCT_HUNT":"M41.4-37.007q0 2.016-1.422 3.42t-3.438 1.404h-9.108v-9.684h9.108q2.016 0 3.438 1.422t1.422 3.438zm6.444 0q0-4.68-3.294-7.992t-8.01-3.312h-15.588v32.256h6.48v-9.684h9.108q4.68 0 7.992-3.294t3.312-7.974zm16.668 4.824q0 6.552-2.556 12.528t-6.876 10.296-10.296 6.876-12.528 2.556-12.528-2.556-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556 12.528 2.556 10.296 6.876 6.876 10.296 2.556 12.528z","MIXCLOUD":"M59.22-24.911q0-2.124-1.224-3.834t-3.132-2.466q-.252 1.62-.828 3.312-.252.864-.99 1.368t-1.602.504q-.432 0-.864-.108-1.116-.36-1.62-1.386t-.144-2.106q.828-2.556.828-5.148 0-4.428-2.196-8.19t-5.976-5.958-8.208-2.196q-4.824 0-8.892 2.628t-6.012 6.984q3.888 1.008 6.768 3.816.792.828.792 1.98t-.792 1.944-1.944.792-1.98-.792q-2.7-2.7-6.48-2.7-3.816 0-6.516 2.682t-2.7 6.498 2.7 6.498 6.516 2.682h37.656q2.844 0 4.842-1.998t1.998-4.806zm5.508 0q0 5.112-3.618 8.712t-8.73 3.6h-37.656q-6.084 0-10.404-4.302t-4.32-10.386q0-5.508 3.6-9.612t8.964-4.896q2.232-6.624 7.956-10.728t12.744-4.104q8.46 0 14.706 5.706t7.074 14.022q4.176.9 6.93 4.266t2.754 7.722zm9 0q0 6.3-3.492 11.484-.828 1.188-2.304 1.188-.864 0-1.548-.468-.936-.612-1.152-1.746t.432-2.07q2.556-3.744 2.556-8.388t-2.556-8.388q-.648-.936-.432-2.052t1.152-1.764 2.07-.414 1.782 1.17q3.492 5.112 3.492 11.448zm9.216 0q0 8.784-4.824 15.948-.828 1.224-2.304 1.224-.828 0-1.512-.468-.936-.648-1.17-1.764t.414-2.052q3.888-5.904 3.888-12.888 0-7.02-3.888-12.852-.648-.936-.414-2.07t1.17-1.746q.936-.648 2.052-.432t1.764 1.188q4.824 7.128 4.824 15.912z","SCRIBD":"M54-8.675q0 3.204-2.268 5.49t-5.508 2.286-5.526-2.286-2.286-5.49q0-3.24 2.286-5.526t5.526-2.286 5.508 2.286 2.268 5.526zm-8.388-10.116q-4.14.54-6.93 3.69t-2.79 7.398q0 2.664 1.188 4.968-5.256 2.808-13.644 2.808-3.924 0-7.236-.756t-5.526-1.962-3.978-2.754-2.736-3.06-1.602-2.988-.846-2.394-.216-1.422q0-.684.162-1.53t.666-2.016 1.314-2.088 2.304-1.566 3.402-.648 3.384.63 2.268 1.476 1.278 1.908.63 1.764.144 1.206q0 1.224-.828 2.916 1.008.972 2.952 1.512t3.348.612l1.44.036q4.14 0 6.84-1.836t2.7-4.788q0-.936-.324-1.746t-1.134-1.602-1.782-1.476-2.664-1.584-3.366-1.71-4.302-2.034l-1.548-.72q-4.176-1.98-6.732-3.6t-4.41-3.672-2.592-4.518-.738-5.85q0-2.808.738-5.4t2.376-4.95 4.05-4.104 5.994-2.772 7.974-1.026q4.32 0 7.92.936t5.922 2.412 3.942 3.384 2.304 3.798.684 3.726q0 1.656-.54 2.97t-1.314 2.088-1.746 1.296-1.764.702-1.404.18h-1.44l-1.404-.18-1.584-.504-1.476-1.008-1.332-1.656-.864-2.538-.36-3.51q-.54-.576-2.124-.918t-2.916-.378l-1.332-.036q-2.448 0-4.23 1.116t-2.538 2.52-.756 2.736q0 .864.18 1.548t.864 1.656 1.908 1.836 3.492 1.926 5.4 2.106q2.736.9 4.986 1.926t3.924 1.998 2.988 2.124 2.178 2.142 1.476 2.25.954 2.232.522 2.286.216 2.232.036 2.25z","PAUSE_CIRCLE":"M25.344-21.815v-20.736q0-.504-.324-.828t-.828-.324h-9.216q-.504 0-.828.324t-.324.828v20.736q0 .504.324.828t.828.324h9.216q.504 0 .828-.324t.324-.828zm16.128 0v-20.736q0-.504-.324-.828t-.828-.324h-9.216q-.504 0-.828.324t-.324.828v20.736q0 .504.324.828t.828.324h9.216q.504 0 .828-.324t.324-.828zm13.824-10.368q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","PAUSE_CIRCLE_O":"M27.648-59.831q7.524 0 13.878 3.708t10.062 10.062 3.708 13.878-3.708 13.878-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708zm0 47.232q5.328 0 9.828-2.628t7.128-7.128 2.628-9.828-2.628-9.828-7.128-7.128-9.828-2.628-9.828 2.628-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628zm3.456-8.064q-.504 0-.828-.324t-.324-.828v-20.736q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828v20.736q0 .504-.324.828t-.828.324h-6.912zm-13.824 0q-.504 0-.828-.324t-.324-.828v-20.736q0-.504.324-.828t.828-.324h6.912q.504 0 .828.324t.324.828v20.736q0 .504-.324.828t-.828.324h-6.912z","STOP_CIRCLE":"M39.168-21.815v-20.736q0-.504-.324-.828t-.828-.324h-20.736q-.504 0-.828.324t-.324.828v20.736q0 .504.324.828t.828.324h20.736q.504 0 .828-.324t.324-.828zm16.128-10.368q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","STOP_CIRCLE_O":"M27.648-59.831q7.524 0 13.878 3.708t10.062 10.062 3.708 13.878-3.708 13.878-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708zm0 47.232q5.328 0 9.828-2.628t7.128-7.128 2.628-9.828-2.628-9.828-7.128-7.128-9.828-2.628-9.828 2.628-7.128 7.128-2.628 9.828 2.628 9.828 7.128 7.128 9.828 2.628zm-10.368-8.064q-.504 0-.828-.324t-.324-.828v-20.736q0-.504.324-.828t.828-.324h20.736q.504 0 .828.324t.324.828v20.736q0 .504-.324.828t-.828.324h-20.736z","SHOPPING_BAG":"M63.252-13.751l1.26 11.268q.108 1.008-.576 1.8-.684.756-1.728.756h-59.904q-1.044 0-1.728-.756-.684-.792-.576-1.8l1.26-11.268h61.992zm-3.348-30.204l3.096 27.9h-61.488l3.096-27.9q.108-.864.756-1.458t1.548-.594h9.216v4.608q0 1.908 1.35 3.258t3.258 1.35 3.258-1.35 1.35-3.258v-4.608h13.824v4.608q0 1.908 1.35 3.258t3.258 1.35 3.258-1.35 1.35-3.258v-4.608h9.216q.9 0 1.548.594t.756 1.458zm-13.824-6.66v9.216q0 .936-.684 1.62t-1.62.684-1.62-.684-.684-1.62v-9.216q0-3.816-2.7-6.516t-6.516-2.7-6.516 2.7-2.7 6.516v9.216q0 .936-.684 1.62t-1.62.684-1.62-.684-.684-1.62v-9.216q0-5.724 4.05-9.774t9.774-4.05 9.774 4.05 4.05 9.774z","SHOPPING_BASKET":"M69.12-36.791q1.908 0 3.258 1.35t1.35 3.258-1.35 3.258-3.258 1.35h-.54l-4.14 23.832q-.288 1.656-1.584 2.736t-2.952 1.08h-46.08q-1.656 0-2.952-1.08t-1.584-2.736l-4.14-23.832h-.54q-1.908 0-3.258-1.35t-1.35-3.258 1.35-3.258 3.258-1.35h64.512zm-51.66 28.8q.936-.072 1.566-.81t.558-1.674l-1.152-14.976q-.072-.936-.81-1.566t-1.674-.558-1.566.81-.558 1.674l1.152 14.976q.072.9.738 1.512t1.566.612h.18zm14.796-2.304v-14.976q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62v14.976q0 .936.684 1.62t1.62.684 1.62-.684.684-1.62zm13.824 0v-14.976q0-.936-.684-1.62t-1.62-.684-1.62.684-.684 1.62v14.976q0 .936.684 1.62t1.62.684 1.62-.684.684-1.62zm12.672.18l1.152-14.976q.072-.936-.558-1.674t-1.566-.81-1.674.558-.81 1.566l-1.152 14.976q-.072.936.558 1.674t1.566.81h.18q.9 0 1.566-.612t.738-1.512zm-41.616-43.812l-3.348 14.832h-4.752l3.636-15.876q.684-3.168 3.204-5.166t5.76-1.998h6.012q0-.936.684-1.62t1.62-.684h13.824q.936 0 1.62.684t.684 1.62h6.012q3.24 0 5.76 1.998t3.204 5.166l3.636 15.876h-4.752l-3.348-14.832q-.396-1.584-1.638-2.592t-2.862-1.008h-6.012q0 .936-.684 1.62t-1.62.684h-13.824q-.936 0-1.62-.684t-.684-1.62h-6.012q-1.62 0-2.862 1.008t-1.638 2.592z","HASHTAG":"M35.676-27.575l2.304-9.216h-9.144l-2.304 9.216h9.144zm27.648-18.144l-2.016 8.064q-.252.864-1.116.864h-11.772l-2.304 9.216h11.196q.54 0 .9.432.36.504.216 1.008l-2.016 8.064q-.18.864-1.116.864h-11.772l-2.916 11.808q-.252.864-1.116.864h-8.064q-.576 0-.936-.432-.324-.432-.216-1.008l2.808-11.232h-9.144l-2.916 11.808q-.252.864-1.116.864h-8.1q-.54 0-.9-.432-.324-.432-.216-1.008l2.808-11.232h-11.196q-.54 0-.9-.432-.324-.432-.216-1.008l2.016-8.064q.252-.864 1.116-.864h11.772l2.304-9.216h-11.196q-.54 0-.9-.432-.36-.504-.216-1.008l2.016-8.064q.18-.864 1.116-.864h11.772l2.916-11.808q.252-.864 1.152-.864h8.064q.54 0 .9.432.324.432.216 1.008l-2.808 11.232h9.144l2.916-11.808q.252-.864 1.152-.864h8.064q.54 0 .9.432.324.432.216 1.008l-2.808 11.232h11.196q.54 0 .9.432.324.432.216 1.008z","BLUETOOTH":"M30.276-26.531l5.328 5.328-5.364 5.364zm-.036-21.996l5.364 5.364-5.328 5.328zm-4.68 44.064l16.704-16.704-11.016-11.016 11.016-11.016-16.704-16.704v21.996l-9.18-9.18-3.348 3.348 11.52 11.556-11.52 11.556 3.348 3.348 9.18-9.18v21.996zm25.884-27.72q0 7.524-1.152 13.158t-3.15 9.252-5.058 5.85-6.534 3.114-7.902.882-7.902-.882-6.534-3.114-5.058-5.85-3.15-9.252-1.152-13.158 1.152-13.158 3.15-9.252 5.058-5.85 6.534-3.114 7.902-.882 7.902.882 6.534 3.114 5.058 5.85 3.15 9.252 1.152 13.158z","BLUETOOTH_B":"M21.456-13.211l6.228-6.192-6.228-6.192v12.384zm0-25.56l6.228-6.192-6.228-6.192v12.384zm1.152 6.588l12.816 12.816-19.404 19.44v-25.596l-10.692 10.656-3.888-3.888 13.392-13.428-13.392-13.428 3.888-3.888 10.692 10.656v-25.596l19.404 19.44z","PERCENT":"M46.08-18.359q0-1.872-1.368-3.24t-3.24-1.368-3.24 1.368-1.368 3.24 1.368 3.24 3.24 1.368 3.24-1.368 1.368-3.24zm-27.648-27.648q0-1.872-1.368-3.24t-3.24-1.368-3.24 1.368-1.368 3.24 1.368 3.24 3.24 1.368 3.24-1.368 1.368-3.24zm36.864 27.648q0 5.724-4.05 9.774t-9.774 4.05-9.774-4.05-4.05-9.774 4.05-9.774 9.774-4.05 9.774 4.05 4.05 9.774zm-3.456-39.168q0 .72-.468 1.368l-38.016 50.688q-.684.936-1.836.936h-5.76q-.936 0-1.62-.684t-.684-1.62q0-.72.468-1.368l38.016-50.688q.684-.936 1.836-.936h5.76q.936 0 1.62.684t.684 1.62zm-24.192 11.52q0 5.724-4.05 9.774t-9.774 4.05-9.774-4.05-4.05-9.774 4.05-9.774 9.774-4.05 9.774 4.05 4.05 9.774z","GITLAB":"M3.744-39.023l28.512 36.54-31.248-22.68q-.648-.468-.9-1.242t0-1.53l3.636-11.088zm16.632 0h23.76l-11.88 36.54zm-7.128-22.032l7.128 22.032h-16.632l7.128-22.032q.288-.828 1.188-.828t1.188.828zm47.52 22.032l3.636 11.088q.252.756 0 1.53t-.9 1.242l-31.248 22.68 28.512-36.54zm0 0h-16.632l7.128-22.032q.288-.828 1.188-.828t1.188.828z","WPBEGINNER":"M13.824-34.487h5.76v-8.064h-5.76v8.064zm30.132 11.952v-3.312q-3.744 1.296-8.748 1.368-4.86.036-9.342-1.674t-7.938-4.41l.036 3.456q3.168 2.88 7.632 4.626t9.792 1.71q4.644 0 8.568-1.764zm-20.916-11.952h23.04v-8.064h-23.04v8.064zm41.472-1.152q0 6.732-3.564 12.672 3.204 3.672 3.204 8.244 0 5.652-4.662 9.648t-11.286 3.996q-4.392 0-8.1-1.89t-5.796-5.058q-.684.036-2.052.036t-2.052-.036q-2.088 3.168-5.796 5.058t-8.1 1.89q-6.624 0-11.286-3.996t-4.662-9.648q0-4.572 3.204-8.244-3.564-5.94-3.564-12.672 0-7.524 4.32-13.878t11.754-10.062 16.182-3.708 16.182 3.708 11.754 10.062 4.32 13.878z","WPFORMS":"M18.54-31.643v4.608h-9.072v-4.608h9.072zm0-9.18v4.572h-9.072v-4.572h9.072zm27.288 18.396v4.608h-12.276v-4.608h12.276zm0-9.216v4.608h-24.192v-4.608h24.192zm0-9.18v4.572h-24.192v-4.572h24.192zm4.86 30.96v-44.64q0-.288-.216-.504t-.504-.216h-1.152l-13.608 9.216-7.56-6.156-7.56 6.156-13.608-9.216h-1.152q-.288 0-.504.216t-.216.504v44.64q0 .288.216.504t.504.216h44.64q.288 0 .504-.216t.216-.504zm-30.78-39.96l6.66-5.4h-14.616zm15.48 0l7.956-5.4h-14.616zm19.908-4.68v44.64q0 2.232-1.548 3.78t-3.78 1.548h-44.64q-2.232 0-3.78-1.548t-1.548-3.78v-44.64q0-2.232 1.548-3.78t3.78-1.548h44.64q2.232 0 3.78 1.548t1.548 3.78z","ENVIRA":"M32.256-35.063q-3.744-7.056-5.76-10.008-5.004-7.272-12.492-11.448-1.224-.684-2.52-1.296-3.204-1.44-3.384-1.152t1.224 1.368l1.404 1.116q2.232 1.548 4.05 3.366t3.402 4.194 2.538 4.068 2.538 4.716q.324.612.468.9 1.584 3.024 3.024 5.508t3.528 5.544 4.158 5.4 4.716 4.446 5.346 3.258q5.508 2.376 5.544 2.16.036-.108-1.764-1.332-1.908-1.296-2.916-2.052-2.772-2.088-6.444-7.596t-6.66-11.16zm-12.492 19.548q-2.736-2.16-4.77-4.5t-3.528-5.166-2.556-5.562-2.106-6.696-1.872-7.524-2.178-9.072-2.754-10.404q9.828 0 17.91 1.296t13.644 3.312 9.756 5.202 6.678 6.21 3.96 7.146 2.016 7.182.45 7.146-.342 6.228-.72 5.166-.468 3.852l11.628 11.772h-3.744l-10.116-10.26q-.792.072-3.294.504t-4.374.684-4.968.216-5.778-.612-6.03-2.124-6.444-3.996z","UNIVERSAL_ACCESS":"M49.464-40.787q-.216-.936-1.026-1.422t-1.746-.27q-9.396 2.232-14.436 2.232t-14.436-2.232q-.936-.216-1.746.27t-1.026 1.422.27 1.746 1.422 1.026q6.984 1.656 10.908 2.088-.072 5.688-.558 9.684t-.954 5.598-1.476 4.158l-.324.756q-.36.9.036 1.764t1.296 1.224q.324.144.828.144 1.584 0 2.16-1.476l.288-.72q1.944-5.004 2.556-9.324h1.512q.612 4.32 2.556 9.324l.288.72q.576 1.476 2.16 1.476.504 0 .828-.144.9-.36 1.296-1.224t.036-1.764l-.324-.756q-1.008-2.556-1.476-4.158t-.954-5.598-.558-9.684q3.924-.432 10.908-2.088.936-.216 1.422-1.026t.27-1.746zm-12.6-5.22q0-1.908-1.35-3.258t-3.258-1.35-3.258 1.35-1.35 3.258 1.35 3.258 3.258 1.35 3.258-1.35 1.35-3.258zm20.736 13.824q0 5.148-1.998 9.846t-5.4 8.1-8.1 5.4-9.846 1.998-9.846-1.998-8.1-5.4-5.4-8.1-1.998-9.846 1.998-9.846 5.4-8.1 8.1-5.4 9.846-1.998 9.846 1.998 8.1 5.4 5.4 8.1 1.998 9.846zm-25.344-27.648q-5.616 0-10.728 2.196t-8.82 5.904-5.904 8.82-2.196 10.728 2.196 10.728 5.904 8.82 8.82 5.904 10.728 2.196 10.728-2.196 8.82-5.904 5.904-8.82 2.196-10.728-2.196-10.728-5.904-8.82-8.82-5.904-10.728-2.196zm32.256 27.648q0 6.552-2.556 12.528t-6.876 10.296-10.296 6.876-12.528 2.556-12.528-2.556-10.296-6.876-6.876-10.296-2.556-12.528 2.556-12.528 6.876-10.296 10.296-6.876 12.528-2.556 12.528 2.556 10.296 6.876 6.876 10.296 2.556 12.528z","WHEELCHAIR_ALT":"M51.768-35.171q1.224 1.26 1.044 2.952l-1.584 19.836q-.144 1.512-1.242 2.52t-2.574 1.008q-.216 0-.324-.036-1.584-.108-2.61-1.314t-.918-2.79l1.26-15.444-5.148.288q1.98 4.068 1.98 8.64 0 7.776-5.328 13.392l-4.932-4.932q3.276-3.636 3.276-8.46 0-5.22-3.69-8.928t-8.91-3.708q-4.824 0-8.496 3.312l-4.932-4.968q4.32-4.104 10.224-5.076l9.504-10.8-5.364-3.132-6.516 5.796q-1.188 1.08-2.772.99t-2.628-1.278-.954-2.772 1.242-2.628l8.604-7.668q.936-.828 2.16-.954t2.304.522l17.568 10.188q1.296.756 1.728 2.448.612 2.412-.936 4.212l-7.38 8.352 13.356-.72q1.764-.108 2.988 1.152zm-7.128-16.452q-2.664 0-4.536-1.872t-1.872-4.536 1.872-4.536 4.536-1.872 4.554 1.872 1.89 4.536-1.89 4.536-4.554 1.872zm-22.572 44.712q3.816 0 7.056-2.196l5.004 5.004q-5.256 4.176-12.06 4.176-5.328 0-9.846-2.628t-7.146-7.128-2.628-9.828q0-6.768 4.176-12.096l5.004 5.004q-2.16 3.168-2.16 7.092 0 5.22 3.69 8.91t8.91 3.69z","QUESTION_CIRCLE_O":"M31.68-21.239v5.76q0 .504-.324.828t-.828.324h-5.76q-.504 0-.828-.324t-.324-.828v-5.76q0-.504.324-.828t.828-.324h5.76q.504 0 .828.324t.324.828zm9.216-17.856q0 1.8-.54 3.24t-1.638 2.484-1.872 1.584-2.142 1.296q-1.152.648-1.674 1.008t-.936.864-.414 1.044v1.152q0 .504-.324.828t-.828.324h-5.76q-.504 0-.828-.324t-.324-.828v-2.448q0-1.26.378-2.322t.864-1.71 1.404-1.278 1.476-.918 1.602-.756q1.908-.9 2.7-1.548t.792-1.764q0-1.512-1.566-2.574t-3.438-1.062q-2.016 0-3.42.972-1.044.72-2.88 2.988-.324.432-.9.432-.396 0-.684-.216l-3.888-2.952q-.36-.252-.432-.72t.18-.828q4.392-6.912 12.564-6.912 4.644 0 8.586 3.222t3.942 7.722zm-13.248-16.128q-4.68 0-8.946 1.836t-7.344 4.914-4.914 7.344-1.836 8.946 1.836 8.946 4.914 7.344 7.344 4.914 8.946 1.836 8.946-1.836 7.344-4.914 4.914-7.344 1.836-8.946-1.836-8.946-4.914-7.344-7.344-4.914-8.946-1.836zm27.648 23.04q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","BLIND":"M13.176-53.243q-2.304 0-3.96-1.638t-1.656-3.978q0-2.304 1.656-3.942t3.96-1.638 3.942 1.638 1.638 3.942q0 2.34-1.638 3.978t-3.942 1.638zm19.836 23.112q0 1.8-1.08 2.43t-2.286.234-1.71-1.224l-13.212-15.768q-.252-.432-.504-.558t-.396-.054l-.108.108q-.252.288.144.756l4.392 5.004.036 12.744-5.796 16.452q-2.412 6.912-3.312 8.424-.576.936-1.008 1.152-1.8.936-3.708.036-1.044-.468-1.494-1.548t-.342-2.052q.072-.612 7.092-22.248l.18-14.976-3.06 5.904 1.26 7.992q.144.864-.036 1.512t-.504.99-.684.576-.612.27l-.252.072q-.684.108-1.242-.108t-.864-.576-.504-.792-.27-.702-.072-.342l-1.656-10.764 7.596-13.716q.828-1.224 4.068-1.224 2.7 0 3.852 1.44l15.264 18.756q.252.18.504.612l.108.108-.036.036q.252.468.252 1.044zm-14.508 5.4q1.548 4.068 3.186 8.1t2.502 6.048l.864 1.98q1.296 3.348 1.512 4.5.396 2.52-1.296 3.492-1.26.792-2.376.576t-1.836-.792-1.044-1.26h-.036q-.216-.576-.288-.9l-4.464-12.636zm29.664 21.312q1.116 1.764 1.116 2.052 0 .18-.108.252-.324.18-.522-.018t-.558-.936-.576-1.098q-4.104-6.192-15.228-23.796.108.036.252-.036t.252-.144l.108-.072q.396-.324.396-.612z","AUDIO_DESCRIPTION":"M18.144-28.655h6.156l-.036-9.54zm36.936-3.564q0-3.132-1.818-5.04t-5.274-1.908h-1.944v13.968h1.872q3.276 0 5.22-2.052t1.944-4.968zm-20.664-13.572l.036 27.216q0 .504-.342.864t-.846.36h-7.776q-.504 0-.846-.36t-.342-.864v-2.232h-10.476l-1.98 2.916q-.36.54-1.008.54h-9.612q-.756 0-1.098-.648t.126-1.26l20.016-27.252q.324-.504.972-.504h11.952q.504 0 .864.36t.36.864zm29.772 13.572q0 6.948-4.518 10.908t-11.682 3.96h-9.72q-.504 0-.864-.36t-.36-.864v-27.216q0-.504.36-.864t.864-.36h9.648q7.2 0 11.736 3.924t4.536 10.872zm5.616.036q0 .396-.018 1.044t-.288 2.574-.774 3.672-1.602 3.888-2.646 3.69h-1.836q1.368-1.62 2.394-3.762t1.494-4.032.756-3.528.324-2.61l.036-.972q0-.288-.018-.81t-.27-2.16-.72-3.294-1.476-4.014-2.376-4.482h1.548q1.476 1.692 2.592 3.852t1.638 4.014.828 3.456.378 2.538zm6.624 0q0 .396-.018 1.044t-.288 2.574-.774 3.672-1.62 3.888-2.664 3.69h-1.836q1.368-1.62 2.394-3.762t1.494-4.032.756-3.528.324-2.61l.036-.972q0-.288-.018-.81t-.27-2.16-.702-3.294-1.458-4.014-2.376-4.482h1.548q1.476 1.692 2.592 3.852t1.638 4.014.828 3.456.378 2.538zm6.516 0q0 .396-.018 1.044t-.288 2.574-.774 3.672-1.602 3.888-2.646 3.69h-1.836q1.368-1.62 2.376-3.762t1.476-4.032.756-3.528.324-2.61l.036-.972q0-.288-.018-.81t-.27-2.16-.702-3.294-1.458-4.014-2.376-4.482h1.548q1.476 1.692 2.592 3.852t1.638 4.014.828 3.456.342 2.538z","VOLUME_CONTROL_PHONE":"M22.212-3.635q0-.396-.468-2.088t-1.116-3.852-.72-2.484q-.036-.144-.18-.954t-.306-1.296-.486-.774q-.54-.504-1.836-.504-.828 0-2.52.198t-2.556.198q-1.224 0-1.692-.396-.216-.18-.396-.558t-.27-.72-.234-.864-.18-.666q-1.332-4.608-1.332-9.18t1.332-9.18l.18-.666.234-.864.27-.72.396-.558q.468-.396 1.692-.396.864 0 2.556.198t2.52.198q1.296 0 1.836-.504.324-.288.486-.774t.306-1.296.18-.954q.072-.324.72-2.484t1.116-3.852.468-2.088q0-.792-1.566-1.89t-2.718-1.53q-.72-.288-1.62-.288-1.224 0-3.528.648-2.052.612-3.474 1.458t-2.556 2.376-1.656 2.52-1.638 3.402q-.216.432-.324.684-1.764 3.852-2.448 7.776t-.684 8.784.684 8.784 2.448 7.776q2.016 4.392 2.988 5.796 2.268 3.276 6.444 4.572l.216.072q2.304.648 3.528.648.9 0 1.62-.288 1.152-.432 2.718-1.53t1.566-1.89zm5.724-32.868q-.936 0-1.62-.684t-.684-1.638.684-1.638q1.332-1.332 1.332-3.24 0-1.872-1.332-3.276-.684-.684-.684-1.62t.684-1.62 1.62-.684 1.62.684q2.7 2.7 2.7 6.516t-2.7 6.516q-.756.684-1.62.684zm6.516 6.516q-.972 0-1.62-.684-.684-.684-.684-1.62t.684-1.62q4.032-4.104 4.032-9.792t-4.032-9.792q-.684-.684-.684-1.62t.684-1.62 1.62-.684 1.62.684q5.4 5.4 5.4 13.032t-5.4 13.032q-.648.684-1.62.684zm6.516 6.516q-.972 0-1.62-.684-.684-.684-.684-1.62t.684-1.62q3.24-3.276 4.986-7.488t1.746-8.82-1.746-8.82-4.986-7.488q-.684-.684-.684-1.62t.684-1.62 1.62-.684 1.62.684q3.924 3.924 6.012 8.964t2.088 10.584-2.088 10.584-6.012 8.964q-.648.684-1.62.684z","BRAILLE":"M6.912-21.815q-2.376 0-4.068 1.692t-1.692 4.068 1.692 4.068 4.068 1.692 4.068-1.692 1.692-4.068-1.692-4.068-4.068-1.692zm18.432 0q-2.376 0-4.068 1.692t-1.692 4.068 1.692 4.068 4.068 1.692 4.068-1.692 1.692-4.068-1.692-4.068-4.068-1.692zm0-18.432q-2.376 0-4.068 1.692t-1.692 4.068 1.692 4.068 4.068 1.692 4.068-1.692 1.692-4.068-1.692-4.068-4.068-1.692zm27.648 18.432q-2.376 0-4.068 1.692t-1.692 4.068 1.692 4.068 4.068 1.692 4.068-1.692 1.692-4.068-1.692-4.068-4.068-1.692zm18.432 0q-2.376 0-4.068 1.692t-1.692 4.068 1.692 4.068 4.068 1.692 4.068-1.692 1.692-4.068-1.692-4.068-4.068-1.692zm-18.432-18.432q-2.376 0-4.068 1.692t-1.692 4.068 1.692 4.068 4.068 1.692 4.068-1.692 1.692-4.068-1.692-4.068-4.068-1.692zm18.432 0q-2.376 0-4.068 1.692t-1.692 4.068 1.692 4.068 4.068 1.692 4.068-1.692 1.692-4.068-1.692-4.068-4.068-1.692zm0-18.432q-2.376 0-4.068 1.692t-1.692 4.068 1.692 4.068 4.068 1.692 4.068-1.692 1.692-4.068-1.692-4.068-4.068-1.692zm-57.6 42.624q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm18.432 0q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm-18.432-18.432q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm18.432 0q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm-18.432-18.432q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm46.08 36.864q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm-27.648-36.864q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm46.08 36.864q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm-18.432-18.432q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm18.432 0q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm-18.432-18.432q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896zm18.432 0q0 2.88-2.016 4.896t-4.896 2.016-4.896-2.016-2.016-4.896 2.016-4.896 4.896-2.016 4.896 2.016 2.016 4.896z","ASSISTIVE_LISTENING_SYSTEMS":"M4.608-2.231q0 .936-.684 1.62t-1.62.684-1.62-.684-.684-1.62.684-1.62 1.62-.684 1.62.684.684 1.62zm6.912-6.912q0 .936-.684 1.62t-1.62.684-1.62-.684-.684-1.62.684-1.62 1.62-.684 1.62.684.684 1.62zm1.62-13.14l9.216 9.216-3.24 3.24-9.216-9.216zm12.204-.684q0 .936-.684 1.62t-1.62.684-1.62-.684-.684-1.62.684-1.62 1.62-.684 1.62.684.684 1.62zm25.452-11.52q0 2.124-.414 3.906t-1.35 3.366-1.584 2.43-1.908 2.322q-1.116 1.26-1.638 1.944t-1.206 1.8-.954 2.304-.27 2.664q0 5.724-4.05 9.774t-9.774 4.05q-.936 0-1.62-.684t-.684-1.62.684-1.62 1.62-.684q3.816 0 6.516-2.7t2.7-6.516q0-2.052.414-3.798t1.332-3.276 1.566-2.394 1.872-2.268q1.44-1.656 2.142-2.592t1.35-2.682.648-3.726q0-6.66-4.734-11.394t-11.394-4.734-11.394 4.734-4.734 11.394q0 .936-.684 1.62t-1.62.684-1.62-.684-.684-1.62q0-4.212 1.638-8.046t4.428-6.624 6.624-4.428 8.046-1.638 8.046 1.638 6.624 4.428 4.428 6.624 1.638 8.046zm-18.54 4.608q0 .936-.684 1.62t-1.62.684-1.62-.684-.684-1.62.684-1.62 1.62-.684 1.62.684.684 1.62zm10.368-4.608q0 .936-.684 1.62t-1.62.684-1.62-.684-.684-1.62q0-3.348-2.358-5.706t-5.706-2.358q-3.312 0-5.688 2.358t-2.376 5.706q0 .936-.684 1.62t-1.62.684-1.62-.684-.684-1.62q0-5.256 3.708-8.964t8.964-3.708 8.964 3.708 3.708 8.964zm14.184-10.404q.36.9-.036 1.764t-1.296 1.224q-.324.144-.828.144-.684 0-1.278-.396t-.846-1.08q-2.448-6.408-8.064-10.62-.756-.576-.9-1.512t.432-1.692q.612-.756 1.548-.9t1.692.432q6.588 4.932 9.576 12.636zm7.56-2.916q.324.9-.054 1.764t-1.278 1.224q-.396.144-.828.144-1.584 0-2.16-1.476-3.312-8.568-10.692-14.148-.792-.576-.918-1.512t.45-1.692q.576-.792 1.512-.918t1.692.45q8.46 6.3 12.276 16.164z","ASL_INTERPRETING":"M37.152-29.879q-2.124-.072-3.024-1.98-.612-1.224-1.728-1.926t-2.448-.702q-1.908 0-3.258 1.35t-1.35 3.258q0 2.016 1.296 3.204l.36.288q1.224 1.116 2.952 1.116 1.332 0 2.448-.702t1.728-1.926q.9-1.908 3.024-1.98zm20.448-4.608q0-2.016-1.296-3.204l-.36-.288q-1.224-1.116-2.952-1.116-1.332 0-2.448.702t-1.728 1.926q-.9 1.908-3.024 1.98 2.124.072 3.024 1.98.612 1.224 1.728 1.926t2.448.702q1.908 0 3.258-1.35t1.35-3.258zm-15.336-7.956q-.612 1.26-1.98 1.728t-2.628-.144q-2.232-1.116-4.824-1.116-1.836 0-3.564.612l.342-.018.342-.018q3.312 0 6.138 1.8t4.266 4.788q.612 1.296.126 2.646t-1.782 1.962q-.648.324-1.404.324.756 0 1.404.324 1.296.612 1.782 1.962t-.126 2.646q-1.44 2.988-4.266 4.788t-6.138 1.8h-.216q-.576-.072-1.584-.144l-10.44-.972-8.604 4.32q-.504.252-1.044.252-1.44 0-2.052-1.26l-5.76-11.52q-.396-.828-.144-1.71t1.044-1.35l7.524-4.284 5.328-9.612q.612-5.58 3.294-10.494t7.038-8.514q1.116-.9 2.538-.774t2.322 1.242.774 2.52-1.242 2.34q-2.52 2.124-4.212 4.608 4.428-3.024 9.612-3.636 1.44-.18 2.574.684t1.278 2.304q.18 1.44-.684 2.574t-2.304 1.278q-3.024.36-5.724 1.98 1.656-.36 3.564-.36 4.14 0 7.848 1.8 1.296.648 1.764 1.998t-.18 2.646zm34.668-5.76l5.76 11.52q.396.828.144 1.71t-1.044 1.35l-7.524 4.284-5.328 9.612q-.612 5.58-3.294 10.494t-7.038 8.514q-.936.792-2.196.792-1.62 0-2.664-1.26-.9-1.116-.774-2.52t1.242-2.34q2.52-2.124 4.212-4.608-4.428 3.024-9.612 3.636-.144.036-.432.036-1.296 0-2.286-.864t-1.134-2.16q-.18-1.44.684-2.574t2.304-1.278q3.024-.36 5.724-1.98-1.656.36-3.564.36-4.14 0-7.848-1.8-1.296-.648-1.764-1.998t.18-2.646q.612-1.26 1.98-1.728t2.628.144q2.232 1.116 4.824 1.116 1.836 0 3.564-.612l-.342.018-.342.018q-3.312 0-6.138-1.8t-4.266-4.788q-.612-1.296-.126-2.646t1.782-1.962q.648-.324 1.404-.324-.756 0-1.404-.324-1.296-.612-1.782-1.962t.126-2.646q1.44-2.988 4.266-4.788t6.138-1.8h.252q.504.072 1.512.144l10.476.972 8.604-4.32q.504-.252 1.044-.252 1.44 0 2.052 1.26z","HARD_OF_HEARING":"M38.016-34.487q0 .936.684 1.62t1.62.684 1.62-.684.684-1.62q0-5.256-3.708-8.964t-8.964-3.708-8.964 3.708-3.708 8.964q0 .936.684 1.62t1.62.684 1.62-.684.684-1.62q0-3.348 2.376-5.706t5.688-2.358 5.688 2.358 2.376 5.706zm-7.956-20.736q-4.212 0-8.046 1.638t-6.624 4.428-4.428 6.624-1.638 8.046q0 .936.684 1.62t1.62.684 1.62-.684.684-1.62q0-6.66 4.734-11.394t11.394-4.734 11.394 4.734 4.734 11.394q0 1.98-.648 3.726t-1.35 2.682-2.142 2.592q-1.224 1.404-1.872 2.268t-1.566 2.394-1.332 3.276-.414 3.798q0 3.816-2.7 6.516t-6.516 2.7q-.936 0-1.62.684t-.684 1.62.684 1.62 1.62.684q5.724 0 9.774-4.05t4.05-9.774q0-1.476.27-2.664t.954-2.304 1.206-1.8 1.638-1.944q1.26-1.476 1.908-2.322t1.584-2.43 1.35-3.366.414-3.906q0-4.212-1.638-8.046t-4.428-6.624-6.624-4.428-8.046-1.638zm-8.784 25.884l8.136 8.136-20.844 20.844q-.432.432-1.044.432t-1.044-.432l-6.048-6.048q-.432-.432-.432-1.044t.432-1.044zm36.756-34.668l6.048 6.048q.432.432.432 1.044t-.432 1.08l-8.388 8.388-.936.9-2.556 2.556q-2.376-5.508-7.02-9.288l3.276-3.276 7.452-7.452q.468-.432 1.08-.432t1.044.432z","GLIDE":"M31.176-45.899q0 .972-.468 3.384-.396 1.8-1.134 5.4t-1.098 5.4q-.072.396-.162.45t-.486.09q-.72.072-1.116.072-2.088 0-3.024-1.782t-.936-4.086q0-3.168 1.26-6.264t3.708-4.464q1.008-.504 1.836-.504 1.008 0 1.314.594t.306 1.71zm17.496 15.264q0-.504-1.404-2.718t-1.872-2.394q-.756-.288-1.224-.288-3.276 0-8.136 2.772l-.072-.072q.108-.792.99-4.86t.882-6.408q0-8.388-8.712-8.388-.864 0-2.448.216-3.384.612-6.066 3.222t-4.014 5.994-1.332 6.804q0 5.256 2.898 8.1t8.19 2.844q.9 0 .9.108t-.036.18q-.144 1.224-.936 4.212-.504 1.872-1.854 3.636t-2.97 1.764q-1.512 0-1.512-1.692 0-.864.378-1.71t.9-1.422 1.062-1.026.936-.72.396-.306q0-.108-.252-.36-.864-.792-2.106-1.314t-2.358-.522q-1.26 0-2.286 1.224t-1.476 2.7-.45 2.7q0 3.168 1.854 5.112t4.986 1.944q2.952 0 5.58-1.908t4.23-4.536 2.358-5.508q.216-.792.558-2.394t.522-2.394q.108-.432.504-.648 4.248-2.16 8.172-2.16 1.728 0 4.572.648l.144.036q.18 0 .342-.162t.162-.306zm6.624-18.828v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","GLIDE_G":"M26.784-53.459q0-.864-.072-1.386t-.306-1.08-.756-.828-1.35-.27q-1.404 0-2.808.828-3.78 2.088-5.724 6.858t-1.944 9.702q0 1.584.306 3.078t.954 2.898 1.89 2.25 2.934.846q.144 0 .648.018t.72 0 .576-.108.54-.306.252-.576q.576-2.772 1.728-8.334t1.728-8.334q.684-3.276.684-5.256zm27.144 23.616q0 .252-.27.486t-.558.234l-.216-.036q-.792-.108-2.232-.396t-2.592-.45-2.268-.162q-6.012 0-12.636 3.348-.54.288-.756.972-.36 1.296-.882 3.798t-.81 3.618q-.828 3.276-2.52 6.462t-4.05 5.922-5.562 4.428-6.66 1.692q-4.86 0-7.722-3.006t-2.862-7.902q0-1.908.702-4.212t2.268-4.194 3.51-1.89q1.368 0 4.32 1.206t2.988 2.214q0 .036-.594.45t-1.422 1.116-1.656 1.602-1.404 2.196-.576 2.664q0 1.188.594 1.908t1.746.72q1.62 0 3.06-1.134t2.394-2.808 1.728-3.798 1.17-3.852.576-3.24v-.324q0-.072-.126-.126t-.306-.054h-.36l-.36.018-.216.018q-8.172 0-12.672-4.41t-4.5-12.546q0-3.888 1.242-7.956t3.456-7.56 5.616-6.03 7.362-3.222q1.872-.324 3.816-.324 13.464 0 13.464 12.96 0 3.528-1.368 9.828t-1.548 7.596l.108.108q3.636-2.052 6.57-3.168t6.03-1.116q.792 0 1.908.468.684.252 2.88 3.69t2.196 4.194z","SIGNING":"M29.916-40.211q1.152 0 2.124.648l7.992 5.328q2.196 1.44 3.96 3.492l5.256 6.12q1.44 1.656 1.044 3.816l-2.592 14.868q-.216 1.152-1.062 1.926t-1.998.918l-18.972 2.016-12.672 1.152h-.324q-1.404 0-2.43-1.008t-1.026-2.448q0-1.332.972-2.304t2.34-1.152l9.36-1.152h-16.128q-1.476 0-2.502-1.08t-.954-2.556q.072-1.404 1.152-2.34t2.484-.936l15.912-.036-18.756-2.304q-1.476-.18-2.376-1.332t-.684-2.628q.216-1.26 1.242-2.07t2.358-.81h.36l17.316 2.16-12.636-3.384q-1.368-.36-2.232-1.494t-.648-2.466q.216-1.296 1.188-2.106t2.232-.81q.216 0 .72.072l16.128 3.456 7.812 1.332.108.018.108.018q.828 0 1.098-.828t-.45-1.296l-6.696-4.5q-1.26-.828-1.512-2.286t.648-2.646q.972-1.368 2.736-1.368zm-2.52 7.272l6.696 4.5-7.848-1.332-.18-.072-1.296-1.368-8.568-9.432-.09-.126-.09-.126q-.864-1.116-.666-2.52t1.35-2.304q1.116-.828 2.448-.63t2.304 1.206l5.112 5.292-.144.144-.18.144q-1.152 1.62-.828 3.564t1.98 3.06zm31.932-16.344l.54 9.576q.144 2.628-.396 5.292l-1.728 7.884q-.432 2.124-2.412 3.132l-3.816 1.944q.072-2.232-1.404-3.924l-5.256-6.12q-1.908-2.196-4.212-3.708l-7.992-5.328q-1.224-.828-2.736-.828-1.836 0-3.168 1.332l-8.46-11.232q-.9-1.188-.648-2.646t1.476-2.286q1.188-.792 2.574-.504t2.25 1.44l9.576 12.672-9.432-16.38q-.756-1.26-.378-2.7t1.71-2.124q1.26-.648 2.61-.216t2.07 1.656l8.676 15.12-4.896-12.132q-.54-1.26-.162-2.664t1.602-2.016q1.332-.684 2.736-.216t2.016 1.836l6.948 14.94 3.636 7.056q.288.54.828.63t.972-.27.396-.936l-.432-8.064q-.072-1.476.936-2.556t2.484-1.116q1.404 0 2.412 1.026t1.08 2.43z","LOW_VISION":"M12.06-15.623q-.072 0-.216-.072-3.096-2.052-6.066-5.22t-5.022-6.48q-.756-1.08-.756-2.484 0-.324.072-.684t.144-.648.252-.648.306-.576.378-.612.36-.54.432-.558.396-.522q6.624-9.036 16.272-13.14-3.96-7.128-3.96-7.596 0-.684.612-1.044 4.176-2.304 4.608-2.304.648 0 1.008.576l4.464 8.244q3.312-.684 6.912-.684 9.576 0 17.91 4.95t13.626 13.302q.72 1.116.72 2.484t-.72 2.484q-3.276 5.112-7.866 9.126t-10.026 6.318q3.96 7.128 3.96 7.596 0 .72-.612 1.044-4.176 2.304-4.572 2.304-.684 0-1.044-.576l-4.464-8.244-2.304-4.284-15.984-29.52.252-.252q-2.088.864-3.564 1.692.108.18 4.572 8.424t8.748 16.164 4.284 8.028q0 .252-.324.324-.468.108-2.592.108-2.052 0-2.16-.252l-16.416-30.276q-1.404 1.008-2.952 2.448.864 1.548 7.704 14.166t6.84 12.762q0 .36-.396.36-.504 0-2.97-.792t-2.61-1.008l-3.816-7.092-8.064-14.868q-1.584 1.908-2.808 3.816.072.108.648.9t.828 1.224l6.336 11.772q0 .36-.36.36zm29.88-3.672l1.764 3.276q9.828-3.996 16.2-13.86-6.48-9.972-16.524-14.004 2.412 2.304 3.708 5.346t1.296 6.354q0 3.816-1.692 7.218t-4.752 5.67zm-11.412-22.104q0 .72.504 1.224t1.224.504q3.096 0 5.292 2.196t2.196 5.292q0 .72.504 1.224t1.224.504 1.224-.504.504-1.224q0-4.536-3.204-7.74t-7.74-3.204q-.72 0-1.224.504t-.504 1.224zm13.176-2.34l-.324-.144.252.252z","VIADEO":"M37.8-24.623q0 7.74-5.292 13.464-5.328 5.796-13.608 5.796-8.352 0-13.608-5.796-5.292-5.724-5.292-13.464 0-5.292 2.448-9.738t6.804-7.074 9.648-2.628q3.456 0 6.552 1.116-1.152 2.232-1.404 4.536-2.376-1.008-5.148-1.008-6.012 0-10.098 4.428t-4.086 10.476q0 6.12 4.05 10.386t10.134 4.266 10.116-4.266 4.032-10.386q0-3.204-1.152-5.976 2.376-.468 4.428-1.764 1.476 3.528 1.476 7.632zm-7.344-6.804q0 6.912-2.862 12.42t-8.586 9.108l-.504.036q-1.044 0-2.232-.18 2.988-1.152 5.274-3.69t3.582-5.562 2.106-6.804 1.08-6.93.27-6.426q0-2.484-.108-3.708 1.98 5.76 1.98 11.736zm-1.98-11.808v.072q-2.628-7.704-7.416-15.84 3.168 2.124 5.13 6.714t2.286 9.054zm8.784 7.308q-2.988 0-5.76-2.7 7.848-4.32 10.44-8.892.684-1.332.756-2.016-1.512 3.384-5.022 5.994t-7.362 3.51q-1.26-1.944-1.26-4.068 0-1.332.612-2.844t1.548-2.448q1.656-1.584 5.652-2.664 2.124-.576 3.816-2.106t2.664-3.618q2.664 3.78 2.664 9.108 0 3.924-.864 6.12-1.152 2.772-3.186 4.698t-4.698 1.926z","VIADEO_SQUARE":"M37.8-26.963q0-2.808-1.008-5.292-1.476.9-3.06 1.224.792 1.8.792 4.104 0 4.212-2.772 7.146t-6.948 2.934-6.966-2.934-2.79-7.146q0-4.14 2.808-7.182t6.948-3.042q1.908 0 3.528.684.144-1.548.972-3.132-2.16-.756-4.5-.756-5.544 0-9.27 3.906t-3.726 9.486 3.726 9.396 9.27 3.816 9.27-3.834 3.726-9.378zm-6.408-12.78q.072.864.072 2.556 0 2.268-.18 4.428t-.738 4.77-1.458 4.68-2.466 3.816-3.618 2.538q.756.108 1.512.108h.36q7.884-5.004 7.884-14.796 0-4.176-1.368-8.1zm0 0q-.144-2.88-1.584-6.174t-3.528-4.698q3.312 5.616 5.112 10.872zm12.06-3.78q0-3.672-1.836-6.264-1.476 3.096-4.464 3.924-2.484.684-3.924 1.926t-1.44 3.582q0 1.44.864 2.772 2.664-.612 5.058-2.412t3.438-4.14q-.144 1.872-2.682 4.014t-4.986 3.51q1.872 1.872 3.96 1.872 1.836 0 3.24-1.332t2.16-3.24q.612-1.548.612-4.212zm11.844-5.94v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z","SNAPCHAT":"M46.044-23.111q0-.792-.792-.972-2.412-.54-4.248-2.124t-2.88-3.888q-.252-.684-.252-.9 0-.54.702-.936t1.548-.612 1.548-.738.702-1.314q0-.684-.666-1.134t-1.386-.45q-.432 0-1.152.288t-1.116.288q-.144 0-.432-.072.18-3.42.18-4.104 0-2.844-.612-4.104-1.296-2.808-3.708-4.374t-5.472-1.566q-7.164 0-9.9 5.94-.612 1.26-.612 4.104 0 .684.18 4.104-.144.072-.504.072-.432 0-1.152-.27t-1.08-.27q-.756 0-1.386.432t-.63 1.152q0 .756.702 1.278t1.548.738 1.548.612.702.936q0 .216-.252.9-2.304 4.968-7.128 6.012-.792.18-.792.972 0 1.656 4.932 2.448.072.18.216.936t.414 1.098.846.342q.432 0 1.35-.162t1.422-.162q1.26 0 2.412.54t1.944 1.17 2.07 1.17 2.754.54q1.548 0 2.844-.54t2.07-1.17 1.926-1.17 2.412-.54q.504 0 1.422.144t1.386.144q.576 0 .828-.36t.396-1.08.216-.9q4.932-.792 4.932-2.448zm9.252-9.072q0 7.524-3.708 13.878t-10.062 10.062-13.878 3.708-13.878-3.708-10.062-10.062-3.708-13.878 3.708-13.878 10.062-10.062 13.878-3.708 13.878 3.708 10.062 10.062 3.708 13.878z","SNAPCHAT_GHOST":"M30.528-59.831q4.824-.036 8.658 2.466t5.886 6.93q.972 2.088.972 6.444 0 1.692-.324 6.876.504.252 1.008.252.648 0 1.836-.486t1.836-.486q1.044 0 2.016.648t.972 1.656q0 1.152-1.134 1.944t-2.484 1.134-2.484 1.044-1.134 1.71q0 .54.432 1.548 1.332 2.952 3.69 5.4t5.202 3.636q1.008.432 2.88.828 1.008.216 1.008 1.26 0 2.52-7.884 3.708-.252.396-.396 1.404t-.504 1.674-1.188.666q-.72 0-2.232-.234t-2.304-.234q-1.332 0-2.232.18-1.152.18-2.268.81t-2.088 1.368-2.088 1.458-2.736 1.206-3.564.486q-1.872 0-3.474-.486t-2.7-1.206-2.07-1.458-2.088-1.368-2.232-.81q-.936-.18-2.268-.18-.864 0-2.358.27t-2.106.27q-.9 0-1.26-.666t-.504-1.71-.396-1.44q-7.884-1.188-7.884-3.708 0-1.044 1.008-1.26 1.872-.396 2.88-.828 2.808-1.152 5.202-3.636t3.69-5.4q.432-1.008.432-1.548 0-1.008-1.134-1.71t-2.502-1.062-2.502-1.134-1.134-1.89q0-.972.936-1.638t1.98-.666q.54 0 1.728.468t1.908.468q.648 0 1.152-.252-.324-5.112-.324-6.84 0-4.392.972-6.48 2.304-4.932 6.192-7.128t9.504-2.268z","SNAPCHAT_SQUARE":"M46.08-23.111q0-.792-.792-.972-2.412-.504-4.248-2.088t-2.88-3.924q-.252-.504-.252-.9 0-.54.702-.936t1.53-.612 1.53-.738.702-1.314q0-.684-.666-1.134t-1.386-.45q-.396 0-1.116.288t-1.152.288q-.144 0-.432-.072.18-2.268.18-4.14 0-2.808-.612-4.104-1.296-2.808-3.69-4.374t-5.49-1.566q-7.128 0-9.9 5.94-.648 1.368-.648 4.14 0 1.368.216 4.104-.36.072-.54.072-.396 0-1.134-.288t-1.098-.288q-.72 0-1.35.45t-.63 1.17q0 .756.702 1.278t1.53.738 1.53.612.702.936q0 .396-.252.9-2.304 4.968-7.128 6.012-.792.18-.792.972 0 1.692 4.968 2.484.072.18.216.936t.396 1.098.828.342q.468 0 1.386-.18t1.386-.18q1.26 0 2.43.54t1.962 1.17 2.07 1.17 2.754.54q1.548 0 2.844-.54t2.07-1.17 1.944-1.17 2.43-.54q.468 0 1.404.162t1.404.162q.54 0 .81-.342t.414-1.116.18-.882q4.968-.792 4.968-2.484zm9.216-26.352v34.56q0 4.284-3.042 7.326t-7.326 3.042h-34.56q-4.284 0-7.326-3.042t-3.042-7.326v-34.56q0-4.284 3.042-7.326t7.326-3.042h34.56q4.284 0 7.326 3.042t3.042 7.326z"}
},{}],23:[function(require,module,exports){
/*eslint-disable no-unused-vars*/
/*!
 * jQuery JavaScript Library v3.1.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-07-07T21:44Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.1.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.0
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-01-04
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true;
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {
	// Known :disabled false positives:
	// IE: *[disabled]:not(button, input, select, textarea, optgroup, option, menuitem, fieldset)
	// not IE: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Check form elements and option elements for explicit disabling
		return "label" in elem && elem.disabled === disabled ||
			"form" in elem && elem.disabled === disabled ||

			// Check non-disabled form elements for fieldset[disabled] ancestors
			"form" in elem && elem.disabled === false && (
				// Support: IE6-11+
				// Ancestry is covered for us
				elem.isDisabled === disabled ||

				// Otherwise, assume any non-<option> under fieldset[disabled] is disabled
				/* jshint -W018 */
				elem.isDisabled !== !disabled &&
					("label" in elem || !disabledAncestor( elem )) !== disabled
			);
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			resolve.call( undefined, value );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.call( undefined, value );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnotwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? JSON.parse( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) ),
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support: IE <=9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox <=42
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			return ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

function manipulationTarget( elem, content ) {
	if ( jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE <=9 only
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val,
		valueIsBorderBox = true,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE <=11 only
	// Running getBoundingClientRect on a disconnected node
	// in IE throws an error.
	if ( elem.getClientRects().length ) {
		val = elem.getBoundingClientRect()[ name ];
	}

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function raf() {
	if ( timerId ) {
		window.requestAnimationFrame( raf );
		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off or if document is hidden
	if ( jQuery.fx.off || document.hidden ) {
		opt.duration = 0;

	} else {
		opt.duration = typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.requestAnimationFrame ?
			window.requestAnimationFrame( raf ) :
			window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	if ( window.cancelAnimationFrame ) {
		window.cancelAnimationFrame( timerId );
	} else {
		window.clearInterval( timerId );
	}

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// Handle most common string cases
					ret.replace( rreturn, "" ) :

					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in uncached url if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rts, "" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win, rect, doc,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		// Make sure element is not hidden (display: none)
		if ( rect.width || rect.height ) {
			doc = elem.ownerDocument;
			win = getWindow( doc );
			docElem = doc.documentElement;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		}

		// Return zeros for disconnected and hidden elements (gh-2310)
		return rect;
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.parseJSON = JSON.parse;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}





var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}


return jQuery;
} );

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
